--
-- PostgreSQL database cluster dump
--

SET default_transaction_read_only = off;

SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;

--
-- Roles
--

CREATE ROLE anon;
ALTER ROLE anon WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE authenticated;
ALTER ROLE authenticated WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE authenticator;
ALTER ROLE authenticator WITH NOSUPERUSER NOINHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE dashboard_user;
ALTER ROLE dashboard_user WITH NOSUPERUSER INHERIT CREATEROLE CREATEDB NOLOGIN REPLICATION NOBYPASSRLS;
CREATE ROLE pgbouncer;
ALTER ROLE pgbouncer WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE pgsodium_keyholder;
ALTER ROLE pgsodium_keyholder WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE pgsodium_keyiduser;
ALTER ROLE pgsodium_keyiduser WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE pgsodium_keymaker;
ALTER ROLE pgsodium_keymaker WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE postgres;
ALTER ROLE postgres WITH NOSUPERUSER INHERIT CREATEROLE CREATEDB LOGIN REPLICATION BYPASSRLS;
CREATE ROLE service_role;
ALTER ROLE service_role WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION BYPASSRLS;
CREATE ROLE supabase_admin;
ALTER ROLE supabase_admin WITH SUPERUSER INHERIT CREATEROLE CREATEDB LOGIN REPLICATION BYPASSRLS;
CREATE ROLE supabase_auth_admin;
ALTER ROLE supabase_auth_admin WITH NOSUPERUSER NOINHERIT CREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE supabase_read_only_user;
ALTER ROLE supabase_read_only_user WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION BYPASSRLS;
CREATE ROLE supabase_realtime_admin;
ALTER ROLE supabase_realtime_admin WITH NOSUPERUSER NOINHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE supabase_replication_admin;
ALTER ROLE supabase_replication_admin WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN REPLICATION NOBYPASSRLS;
CREATE ROLE supabase_storage_admin;
ALTER ROLE supabase_storage_admin WITH NOSUPERUSER NOINHERIT CREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;

--
-- User Configurations
--

--
-- User Config "anon"
--

ALTER ROLE anon SET statement_timeout TO '3s';

--
-- User Config "authenticated"
--

ALTER ROLE authenticated SET statement_timeout TO '8s';

--
-- User Config "authenticator"
--

ALTER ROLE authenticator SET session_preload_libraries TO 'safeupdate';
ALTER ROLE authenticator SET statement_timeout TO '8s';
ALTER ROLE authenticator SET lock_timeout TO '8s';

--
-- User Config "postgres"
--

ALTER ROLE postgres SET search_path TO E'\\$user', 'public', 'extensions';

--
-- User Config "supabase_admin"
--

ALTER ROLE supabase_admin SET search_path TO '$user', 'public', 'auth', 'extensions';

--
-- User Config "supabase_auth_admin"
--

ALTER ROLE supabase_auth_admin SET search_path TO 'auth';
ALTER ROLE supabase_auth_admin SET idle_in_transaction_session_timeout TO '60000';

--
-- User Config "supabase_storage_admin"
--

ALTER ROLE supabase_storage_admin SET search_path TO 'storage';


--
-- Role memberships
--

GRANT anon TO authenticator GRANTED BY postgres;
GRANT anon TO postgres GRANTED BY supabase_admin;
GRANT authenticated TO authenticator GRANTED BY postgres;
GRANT authenticated TO postgres GRANTED BY supabase_admin;
GRANT authenticator TO supabase_storage_admin GRANTED BY supabase_admin;
GRANT pg_monitor TO postgres GRANTED BY supabase_admin;
GRANT pg_read_all_data TO postgres GRANTED BY supabase_admin;
GRANT pg_read_all_data TO supabase_read_only_user GRANTED BY postgres;
GRANT pg_signal_backend TO postgres GRANTED BY supabase_admin;
GRANT pgsodium_keyholder TO pgsodium_keymaker GRANTED BY supabase_admin;
GRANT pgsodium_keyholder TO postgres WITH ADMIN OPTION GRANTED BY supabase_admin;
GRANT pgsodium_keyholder TO service_role GRANTED BY supabase_admin;
GRANT pgsodium_keyiduser TO pgsodium_keyholder GRANTED BY supabase_admin;
GRANT pgsodium_keyiduser TO pgsodium_keymaker GRANTED BY supabase_admin;
GRANT pgsodium_keyiduser TO postgres WITH ADMIN OPTION GRANTED BY supabase_admin;
GRANT pgsodium_keymaker TO postgres WITH ADMIN OPTION GRANTED BY supabase_admin;
GRANT service_role TO authenticator GRANTED BY postgres;
GRANT service_role TO postgres GRANTED BY supabase_admin;
GRANT supabase_auth_admin TO postgres GRANTED BY supabase_admin;
GRANT supabase_realtime_admin TO postgres GRANTED BY supabase_admin;
GRANT supabase_storage_admin TO postgres GRANTED BY supabase_admin;






--
-- Databases
--

--
-- Database "template1" dump
--

\connect template1

--
-- PostgreSQL database dump
--

-- Dumped from database version 15.6
-- Dumped by pg_dump version 15.10 (Debian 15.10-1.pgdg120+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- PostgreSQL database dump complete
--

--
-- Database "postgres" dump
--

\connect postgres

--
-- PostgreSQL database dump
--

-- Dumped from database version 15.6
-- Dumped by pg_dump version 15.10 (Debian 15.10-1.pgdg120+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: auth; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA auth;


ALTER SCHEMA auth OWNER TO supabase_admin;

--
-- Name: extensions; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA extensions;


ALTER SCHEMA extensions OWNER TO postgres;

--
-- Name: graphql; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA graphql;


ALTER SCHEMA graphql OWNER TO supabase_admin;

--
-- Name: graphql_public; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA graphql_public;


ALTER SCHEMA graphql_public OWNER TO supabase_admin;

--
-- Name: pgbouncer; Type: SCHEMA; Schema: -; Owner: pgbouncer
--

CREATE SCHEMA pgbouncer;


ALTER SCHEMA pgbouncer OWNER TO pgbouncer;

--
-- Name: pgsodium; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA pgsodium;


ALTER SCHEMA pgsodium OWNER TO supabase_admin;

--
-- Name: pgsodium; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgsodium WITH SCHEMA pgsodium;


--
-- Name: EXTENSION pgsodium; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgsodium IS 'Pgsodium is a modern cryptography library for Postgres.';


--
-- Name: realtime; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA realtime;


ALTER SCHEMA realtime OWNER TO supabase_admin;

--
-- Name: storage; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA storage;


ALTER SCHEMA storage OWNER TO supabase_admin;

--
-- Name: tiger; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA tiger;


ALTER SCHEMA tiger OWNER TO postgres;

--
-- Name: tiger_data; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA tiger_data;


ALTER SCHEMA tiger_data OWNER TO supabase_admin;

--
-- Name: vault; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA vault;


ALTER SCHEMA vault OWNER TO supabase_admin;

--
-- Name: address_standardizer; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS address_standardizer WITH SCHEMA extensions;


--
-- Name: EXTENSION address_standardizer; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION address_standardizer IS 'Used to parse an address into constituent elements. Generally used to support geocoding address normalization step.';


--
-- Name: cube; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS cube WITH SCHEMA extensions;


--
-- Name: EXTENSION cube; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION cube IS 'data type for multidimensional cubes';


--
-- Name: fuzzystrmatch; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS fuzzystrmatch WITH SCHEMA tiger;


--
-- Name: EXTENSION fuzzystrmatch; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION fuzzystrmatch IS 'determine similarities and distance between strings';


--
-- Name: ltree; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS ltree WITH SCHEMA extensions;


--
-- Name: EXTENSION ltree; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION ltree IS 'data type for hierarchical tree-like structures';


--
-- Name: pg_graphql; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_graphql WITH SCHEMA graphql;


--
-- Name: EXTENSION pg_graphql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_graphql IS 'pg_graphql: GraphQL support';


--
-- Name: pg_stat_statements; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_stat_statements WITH SCHEMA extensions;


--
-- Name: EXTENSION pg_stat_statements; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_stat_statements IS 'track planning and execution statistics of all SQL statements executed';


--
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA extensions;


--
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- Name: pgjwt; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgjwt WITH SCHEMA extensions;


--
-- Name: EXTENSION pgjwt; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgjwt IS 'JSON Web Token API for Postgresql';


--
-- Name: postgis; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS postgis WITH SCHEMA extensions;


--
-- Name: EXTENSION postgis; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION postgis IS 'PostGIS geometry and geography spatial types and functions';


--
-- Name: postgis_raster; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS postgis_raster WITH SCHEMA extensions;


--
-- Name: EXTENSION postgis_raster; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION postgis_raster IS 'PostGIS raster types and functions';


--
-- Name: postgis_tiger_geocoder; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS postgis_tiger_geocoder WITH SCHEMA tiger;


--
-- Name: EXTENSION postgis_tiger_geocoder; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION postgis_tiger_geocoder IS 'PostGIS tiger geocoder and reverse geocoder';


--
-- Name: supabase_vault; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS supabase_vault WITH SCHEMA vault;


--
-- Name: EXTENSION supabase_vault; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION supabase_vault IS 'Supabase Vault Extension';


--
-- Name: uuid-ossp; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA extensions;


--
-- Name: EXTENSION "uuid-ossp"; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';


--
-- Name: aal_level; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.aal_level AS ENUM (
    'aal1',
    'aal2',
    'aal3'
);


ALTER TYPE auth.aal_level OWNER TO supabase_auth_admin;

--
-- Name: code_challenge_method; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.code_challenge_method AS ENUM (
    's256',
    'plain'
);


ALTER TYPE auth.code_challenge_method OWNER TO supabase_auth_admin;

--
-- Name: factor_status; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.factor_status AS ENUM (
    'unverified',
    'verified'
);


ALTER TYPE auth.factor_status OWNER TO supabase_auth_admin;

--
-- Name: factor_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.factor_type AS ENUM (
    'totp',
    'webauthn',
    'phone'
);


ALTER TYPE auth.factor_type OWNER TO supabase_auth_admin;

--
-- Name: one_time_token_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.one_time_token_type AS ENUM (
    'confirmation_token',
    'reauthentication_token',
    'recovery_token',
    'email_change_token_new',
    'email_change_token_current',
    'phone_change_token'
);


ALTER TYPE auth.one_time_token_type OWNER TO supabase_auth_admin;

--
-- Name: action; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.action AS ENUM (
    'INSERT',
    'UPDATE',
    'DELETE',
    'TRUNCATE',
    'ERROR'
);


ALTER TYPE realtime.action OWNER TO supabase_admin;

--
-- Name: equality_op; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.equality_op AS ENUM (
    'eq',
    'neq',
    'lt',
    'lte',
    'gt',
    'gte',
    'in'
);


ALTER TYPE realtime.equality_op OWNER TO supabase_admin;

--
-- Name: user_defined_filter; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.user_defined_filter AS (
	column_name text,
	op realtime.equality_op,
	value text
);


ALTER TYPE realtime.user_defined_filter OWNER TO supabase_admin;

--
-- Name: wal_column; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.wal_column AS (
	name text,
	type_name text,
	type_oid oid,
	value jsonb,
	is_pkey boolean,
	is_selectable boolean
);


ALTER TYPE realtime.wal_column OWNER TO supabase_admin;

--
-- Name: wal_rls; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.wal_rls AS (
	wal jsonb,
	is_rls_enabled boolean,
	subscription_ids uuid[],
	errors text[]
);


ALTER TYPE realtime.wal_rls OWNER TO supabase_admin;

--
-- Name: email(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.email() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.email', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'email')
  )::text
$$;


ALTER FUNCTION auth.email() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION email(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.email() IS 'Deprecated. Use auth.jwt() -> ''email'' instead.';


--
-- Name: jwt(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.jwt() RETURNS jsonb
    LANGUAGE sql STABLE
    AS $$
  select 
    coalesce(
        nullif(current_setting('request.jwt.claim', true), ''),
        nullif(current_setting('request.jwt.claims', true), '')
    )::jsonb
$$;


ALTER FUNCTION auth.jwt() OWNER TO supabase_auth_admin;

--
-- Name: role(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.role() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.role', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'role')
  )::text
$$;


ALTER FUNCTION auth.role() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION role(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.role() IS 'Deprecated. Use auth.jwt() -> ''role'' instead.';


--
-- Name: uid(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.uid() RETURNS uuid
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.sub', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'sub')
  )::uuid
$$;


ALTER FUNCTION auth.uid() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION uid(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.uid() IS 'Deprecated. Use auth.jwt() -> ''sub'' instead.';


--
-- Name: grant_pg_cron_access(); Type: FUNCTION; Schema: extensions; Owner: postgres
--

CREATE FUNCTION extensions.grant_pg_cron_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF EXISTS (
    SELECT
    FROM pg_event_trigger_ddl_commands() AS ev
    JOIN pg_extension AS ext
    ON ev.objid = ext.oid
    WHERE ext.extname = 'pg_cron'
  )
  THEN
    grant usage on schema cron to postgres with grant option;

    alter default privileges in schema cron grant all on tables to postgres with grant option;
    alter default privileges in schema cron grant all on functions to postgres with grant option;
    alter default privileges in schema cron grant all on sequences to postgres with grant option;

    alter default privileges for user supabase_admin in schema cron grant all
        on sequences to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on tables to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on functions to postgres with grant option;

    grant all privileges on all tables in schema cron to postgres with grant option;
    revoke all on table cron.job from postgres;
    grant select on table cron.job to postgres with grant option;
  END IF;
END;
$$;


ALTER FUNCTION extensions.grant_pg_cron_access() OWNER TO postgres;

--
-- Name: FUNCTION grant_pg_cron_access(); Type: COMMENT; Schema: extensions; Owner: postgres
--

COMMENT ON FUNCTION extensions.grant_pg_cron_access() IS 'Grants access to pg_cron';


--
-- Name: grant_pg_graphql_access(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.grant_pg_graphql_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
DECLARE
    func_is_graphql_resolve bool;
BEGIN
    func_is_graphql_resolve = (
        SELECT n.proname = 'resolve'
        FROM pg_event_trigger_ddl_commands() AS ev
        LEFT JOIN pg_catalog.pg_proc AS n
        ON ev.objid = n.oid
    );

    IF func_is_graphql_resolve
    THEN
        -- Update public wrapper to pass all arguments through to the pg_graphql resolve func
        DROP FUNCTION IF EXISTS graphql_public.graphql;
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language sql
        as $$
            select graphql.resolve(
                query := query,
                variables := coalesce(variables, '{}'),
                "operationName" := "operationName",
                extensions := extensions
            );
        $$;

        -- This hook executes when `graphql.resolve` is created. That is not necessarily the last
        -- function in the extension so we need to grant permissions on existing entities AND
        -- update default permissions to any others that are created after `graphql.resolve`
        grant usage on schema graphql to postgres, anon, authenticated, service_role;
        grant select on all tables in schema graphql to postgres, anon, authenticated, service_role;
        grant execute on all functions in schema graphql to postgres, anon, authenticated, service_role;
        grant all on all sequences in schema graphql to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on tables to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on functions to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on sequences to postgres, anon, authenticated, service_role;

        -- Allow postgres role to allow granting usage on graphql and graphql_public schemas to custom roles
        grant usage on schema graphql_public to postgres with grant option;
        grant usage on schema graphql to postgres with grant option;
    END IF;

END;
$_$;


ALTER FUNCTION extensions.grant_pg_graphql_access() OWNER TO supabase_admin;

--
-- Name: FUNCTION grant_pg_graphql_access(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.grant_pg_graphql_access() IS 'Grants access to pg_graphql';


--
-- Name: grant_pg_net_access(); Type: FUNCTION; Schema: extensions; Owner: postgres
--

CREATE FUNCTION extensions.grant_pg_net_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF EXISTS (
    SELECT 1
    FROM pg_event_trigger_ddl_commands() AS ev
    JOIN pg_extension AS ext
    ON ev.objid = ext.oid
    WHERE ext.extname = 'pg_net'
  )
  THEN
    IF NOT EXISTS (
      SELECT 1
      FROM pg_roles
      WHERE rolname = 'supabase_functions_admin'
    )
    THEN
      CREATE USER supabase_functions_admin NOINHERIT CREATEROLE LOGIN NOREPLICATION;
    END IF;

    GRANT USAGE ON SCHEMA net TO supabase_functions_admin, postgres, anon, authenticated, service_role;

    ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;
    ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;

    ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;
    ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;

    REVOKE ALL ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;
    REVOKE ALL ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;

    GRANT EXECUTE ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
    GRANT EXECUTE ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
  END IF;
END;
$$;


ALTER FUNCTION extensions.grant_pg_net_access() OWNER TO postgres;

--
-- Name: FUNCTION grant_pg_net_access(); Type: COMMENT; Schema: extensions; Owner: postgres
--

COMMENT ON FUNCTION extensions.grant_pg_net_access() IS 'Grants access to pg_net';


--
-- Name: pgrst_ddl_watch(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.pgrst_ddl_watch() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  cmd record;
BEGIN
  FOR cmd IN SELECT * FROM pg_event_trigger_ddl_commands()
  LOOP
    IF cmd.command_tag IN (
      'CREATE SCHEMA', 'ALTER SCHEMA'
    , 'CREATE TABLE', 'CREATE TABLE AS', 'SELECT INTO', 'ALTER TABLE'
    , 'CREATE FOREIGN TABLE', 'ALTER FOREIGN TABLE'
    , 'CREATE VIEW', 'ALTER VIEW'
    , 'CREATE MATERIALIZED VIEW', 'ALTER MATERIALIZED VIEW'
    , 'CREATE FUNCTION', 'ALTER FUNCTION'
    , 'CREATE TRIGGER'
    , 'CREATE TYPE', 'ALTER TYPE'
    , 'CREATE RULE'
    , 'COMMENT'
    )
    -- don't notify in case of CREATE TEMP table or other objects created on pg_temp
    AND cmd.schema_name is distinct from 'pg_temp'
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION extensions.pgrst_ddl_watch() OWNER TO supabase_admin;

--
-- Name: pgrst_drop_watch(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.pgrst_drop_watch() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  obj record;
BEGIN
  FOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()
  LOOP
    IF obj.object_type IN (
      'schema'
    , 'table'
    , 'foreign table'
    , 'view'
    , 'materialized view'
    , 'function'
    , 'trigger'
    , 'type'
    , 'rule'
    )
    AND obj.is_temporary IS false -- no pg_temp objects
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION extensions.pgrst_drop_watch() OWNER TO supabase_admin;

--
-- Name: set_graphql_placeholder(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.set_graphql_placeholder() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
    DECLARE
    graphql_is_dropped bool;
    BEGIN
    graphql_is_dropped = (
        SELECT ev.schema_name = 'graphql_public'
        FROM pg_event_trigger_dropped_objects() AS ev
        WHERE ev.schema_name = 'graphql_public'
    );

    IF graphql_is_dropped
    THEN
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language plpgsql
        as $$
            DECLARE
                server_version float;
            BEGIN
                server_version = (SELECT (SPLIT_PART((select version()), ' ', 2))::float);

                IF server_version >= 14 THEN
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql extension is not enabled.'
                            )
                        )
                    );
                ELSE
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql is only available on projects running Postgres 14 onwards.'
                            )
                        )
                    );
                END IF;
            END;
        $$;
    END IF;

    END;
$_$;


ALTER FUNCTION extensions.set_graphql_placeholder() OWNER TO supabase_admin;

--
-- Name: FUNCTION set_graphql_placeholder(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.set_graphql_placeholder() IS 'Reintroduces placeholder function for graphql_public.graphql';


--
-- Name: get_auth(text); Type: FUNCTION; Schema: pgbouncer; Owner: postgres
--

CREATE FUNCTION pgbouncer.get_auth(p_usename text) RETURNS TABLE(username text, password text)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    RAISE WARNING 'PgBouncer auth request: %', p_usename;

    RETURN QUERY
    SELECT usename::TEXT, passwd::TEXT FROM pg_catalog.pg_shadow
    WHERE usename = p_usename;
END;
$$;


ALTER FUNCTION pgbouncer.get_auth(p_usename text) OWNER TO postgres;

--
-- Name: apply_rls(jsonb, integer); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer DEFAULT (1024 * 1024)) RETURNS SETOF realtime.wal_rls
    LANGUAGE plpgsql
    AS $$
declare
-- Regclass of the table e.g. public.notes
entity_ regclass = (quote_ident(wal ->> 'schema') || '.' || quote_ident(wal ->> 'table'))::regclass;

-- I, U, D, T: insert, update ...
action realtime.action = (
    case wal ->> 'action'
        when 'I' then 'INSERT'
        when 'U' then 'UPDATE'
        when 'D' then 'DELETE'
        else 'ERROR'
    end
);

-- Is row level security enabled for the table
is_rls_enabled bool = relrowsecurity from pg_class where oid = entity_;

subscriptions realtime.subscription[] = array_agg(subs)
    from
        realtime.subscription subs
    where
        subs.entity = entity_;

-- Subscription vars
roles regrole[] = array_agg(distinct us.claims_role::text)
    from
        unnest(subscriptions) us;

working_role regrole;
claimed_role regrole;
claims jsonb;

subscription_id uuid;
subscription_has_access bool;
visible_to_subscription_ids uuid[] = '{}';

-- structured info for wal's columns
columns realtime.wal_column[];
-- previous identity values for update/delete
old_columns realtime.wal_column[];

error_record_exceeds_max_size boolean = octet_length(wal::text) > max_record_bytes;

-- Primary jsonb output for record
output jsonb;

begin
perform set_config('role', null, true);

columns =
    array_agg(
        (
            x->>'name',
            x->>'type',
            x->>'typeoid',
            realtime.cast(
                (x->'value') #>> '{}',
                coalesce(
                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4
                    (x->>'type')::regtype
                )
            ),
            (pks ->> 'name') is not null,
            true
        )::realtime.wal_column
    )
    from
        jsonb_array_elements(wal -> 'columns') x
        left join jsonb_array_elements(wal -> 'pk') pks
            on (x ->> 'name') = (pks ->> 'name');

old_columns =
    array_agg(
        (
            x->>'name',
            x->>'type',
            x->>'typeoid',
            realtime.cast(
                (x->'value') #>> '{}',
                coalesce(
                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4
                    (x->>'type')::regtype
                )
            ),
            (pks ->> 'name') is not null,
            true
        )::realtime.wal_column
    )
    from
        jsonb_array_elements(wal -> 'identity') x
        left join jsonb_array_elements(wal -> 'pk') pks
            on (x ->> 'name') = (pks ->> 'name');

for working_role in select * from unnest(roles) loop

    -- Update `is_selectable` for columns and old_columns
    columns =
        array_agg(
            (
                c.name,
                c.type_name,
                c.type_oid,
                c.value,
                c.is_pkey,
                pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')
            )::realtime.wal_column
        )
        from
            unnest(columns) c;

    old_columns =
            array_agg(
                (
                    c.name,
                    c.type_name,
                    c.type_oid,
                    c.value,
                    c.is_pkey,
                    pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')
                )::realtime.wal_column
            )
            from
                unnest(old_columns) c;

    if action <> 'DELETE' and count(1) = 0 from unnest(columns) c where c.is_pkey then
        return next (
            jsonb_build_object(
                'schema', wal ->> 'schema',
                'table', wal ->> 'table',
                'type', action
            ),
            is_rls_enabled,
            -- subscriptions is already filtered by entity
            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),
            array['Error 400: Bad Request, no primary key']
        )::realtime.wal_rls;

    -- The claims role does not have SELECT permission to the primary key of entity
    elsif action <> 'DELETE' and sum(c.is_selectable::int) <> count(1) from unnest(columns) c where c.is_pkey then
        return next (
            jsonb_build_object(
                'schema', wal ->> 'schema',
                'table', wal ->> 'table',
                'type', action
            ),
            is_rls_enabled,
            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),
            array['Error 401: Unauthorized']
        )::realtime.wal_rls;

    else
        output = jsonb_build_object(
            'schema', wal ->> 'schema',
            'table', wal ->> 'table',
            'type', action,
            'commit_timestamp', to_char(
                ((wal ->> 'timestamp')::timestamptz at time zone 'utc'),
                'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"'
            ),
            'columns', (
                select
                    jsonb_agg(
                        jsonb_build_object(
                            'name', pa.attname,
                            'type', pt.typname
                        )
                        order by pa.attnum asc
                    )
                from
                    pg_attribute pa
                    join pg_type pt
                        on pa.atttypid = pt.oid
                where
                    attrelid = entity_
                    and attnum > 0
                    and pg_catalog.has_column_privilege(working_role, entity_, pa.attname, 'SELECT')
            )
        )
        -- Add "record" key for insert and update
        || case
            when action in ('INSERT', 'UPDATE') then
                jsonb_build_object(
                    'record',
                    (
                        select
                            jsonb_object_agg(
                                -- if unchanged toast, get column name and value from old record
                                coalesce((c).name, (oc).name),
                                case
                                    when (c).name is null then (oc).value
                                    else (c).value
                                end
                            )
                        from
                            unnest(columns) c
                            full outer join unnest(old_columns) oc
                                on (c).name = (oc).name
                        where
                            coalesce((c).is_selectable, (oc).is_selectable)
                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                    )
                )
            else '{}'::jsonb
        end
        -- Add "old_record" key for update and delete
        || case
            when action = 'UPDATE' then
                jsonb_build_object(
                        'old_record',
                        (
                            select jsonb_object_agg((c).name, (c).value)
                            from unnest(old_columns) c
                            where
                                (c).is_selectable
                                and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                        )
                    )
            when action = 'DELETE' then
                jsonb_build_object(
                    'old_record',
                    (
                        select jsonb_object_agg((c).name, (c).value)
                        from unnest(old_columns) c
                        where
                            (c).is_selectable
                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                            and ( not is_rls_enabled or (c).is_pkey ) -- if RLS enabled, we can't secure deletes so filter to pkey
                    )
                )
            else '{}'::jsonb
        end;

        -- Create the prepared statement
        if is_rls_enabled and action <> 'DELETE' then
            if (select 1 from pg_prepared_statements where name = 'walrus_rls_stmt' limit 1) > 0 then
                deallocate walrus_rls_stmt;
            end if;
            execute realtime.build_prepared_statement_sql('walrus_rls_stmt', entity_, columns);
        end if;

        visible_to_subscription_ids = '{}';

        for subscription_id, claims in (
                select
                    subs.subscription_id,
                    subs.claims
                from
                    unnest(subscriptions) subs
                where
                    subs.entity = entity_
                    and subs.claims_role = working_role
                    and (
                        realtime.is_visible_through_filters(columns, subs.filters)
                        or (
                          action = 'DELETE'
                          and realtime.is_visible_through_filters(old_columns, subs.filters)
                        )
                    )
        ) loop

            if not is_rls_enabled or action = 'DELETE' then
                visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;
            else
                -- Check if RLS allows the role to see the record
                perform
                    -- Trim leading and trailing quotes from working_role because set_config
                    -- doesn't recognize the role as valid if they are included
                    set_config('role', trim(both '"' from working_role::text), true),
                    set_config('request.jwt.claims', claims::text, true);

                execute 'execute walrus_rls_stmt' into subscription_has_access;

                if subscription_has_access then
                    visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;
                end if;
            end if;
        end loop;

        perform set_config('role', null, true);

        return next (
            output,
            is_rls_enabled,
            visible_to_subscription_ids,
            case
                when error_record_exceeds_max_size then array['Error 413: Payload Too Large']
                else '{}'
            end
        )::realtime.wal_rls;

    end if;
end loop;

perform set_config('role', null, true);
end;
$$;


ALTER FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) OWNER TO supabase_admin;

--
-- Name: broadcast_changes(text, text, text, text, text, record, record, text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text DEFAULT 'ROW'::text) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
    -- Declare a variable to hold the JSONB representation of the row
    row_data jsonb := '{}'::jsonb;
BEGIN
    IF level = 'STATEMENT' THEN
        RAISE EXCEPTION 'function can only be triggered for each row, not for each statement';
    END IF;
    -- Check the operation type and handle accordingly
    IF operation = 'INSERT' OR operation = 'UPDATE' OR operation = 'DELETE' THEN
        row_data := jsonb_build_object('old_record', OLD, 'record', NEW, 'operation', operation, 'table', table_name, 'schema', table_schema);
        PERFORM realtime.send (row_data, event_name, topic_name);
    ELSE
        RAISE EXCEPTION 'Unexpected operation type: %', operation;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION 'Failed to process the row: %', SQLERRM;
END;

$$;


ALTER FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text) OWNER TO supabase_admin;

--
-- Name: build_prepared_statement_sql(text, regclass, realtime.wal_column[]); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) RETURNS text
    LANGUAGE sql
    AS $$
      /*
      Builds a sql string that, if executed, creates a prepared statement to
      tests retrive a row from *entity* by its primary key columns.
      Example
          select realtime.build_prepared_statement_sql('public.notes', '{"id"}'::text[], '{"bigint"}'::text[])
      */
          select
      'prepare ' || prepared_statement_name || ' as
          select
              exists(
                  select
                      1
                  from
                      ' || entity || '
                  where
                      ' || string_agg(quote_ident(pkc.name) || '=' || quote_nullable(pkc.value #>> '{}') , ' and ') || '
              )'
          from
              unnest(columns) pkc
          where
              pkc.is_pkey
          group by
              entity
      $$;


ALTER FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) OWNER TO supabase_admin;

--
-- Name: cast(text, regtype); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime."cast"(val text, type_ regtype) RETURNS jsonb
    LANGUAGE plpgsql IMMUTABLE
    AS $$
    declare
      res jsonb;
    begin
      execute format('select to_jsonb(%L::'|| type_::text || ')', val)  into res;
      return res;
    end
    $$;


ALTER FUNCTION realtime."cast"(val text, type_ regtype) OWNER TO supabase_admin;

--
-- Name: check_equality_op(realtime.equality_op, regtype, text, text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) RETURNS boolean
    LANGUAGE plpgsql IMMUTABLE
    AS $$
      /*
      Casts *val_1* and *val_2* as type *type_* and check the *op* condition for truthiness
      */
      declare
          op_symbol text = (
              case
                  when op = 'eq' then '='
                  when op = 'neq' then '!='
                  when op = 'lt' then '<'
                  when op = 'lte' then '<='
                  when op = 'gt' then '>'
                  when op = 'gte' then '>='
                  when op = 'in' then '= any'
                  else 'UNKNOWN OP'
              end
          );
          res boolean;
      begin
          execute format(
              'select %L::'|| type_::text || ' ' || op_symbol
              || ' ( %L::'
              || (
                  case
                      when op = 'in' then type_::text || '[]'
                      else type_::text end
              )
              || ')', val_1, val_2) into res;
          return res;
      end;
      $$;


ALTER FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) OWNER TO supabase_admin;

--
-- Name: is_visible_through_filters(realtime.wal_column[], realtime.user_defined_filter[]); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$
    /*
    Should the record be visible (true) or filtered out (false) after *filters* are applied
    */
        select
            -- Default to allowed when no filters present
            $2 is null -- no filters. this should not happen because subscriptions has a default
            or array_length($2, 1) is null -- array length of an empty array is null
            or bool_and(
                coalesce(
                    realtime.check_equality_op(
                        op:=f.op,
                        type_:=coalesce(
                            col.type_oid::regtype, -- null when wal2json version <= 2.4
                            col.type_name::regtype
                        ),
                        -- cast jsonb to text
                        val_1:=col.value #>> '{}',
                        val_2:=f.value
                    ),
                    false -- if null, filter does not match
                )
            )
        from
            unnest(filters) f
            join unnest(columns) col
                on f.column_name = col.name;
    $_$;


ALTER FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) OWNER TO supabase_admin;

--
-- Name: list_changes(name, name, integer, integer); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) RETURNS SETOF realtime.wal_rls
    LANGUAGE sql
    SET log_min_messages TO 'fatal'
    AS $$
      with pub as (
        select
          concat_ws(
            ',',
            case when bool_or(pubinsert) then 'insert' else null end,
            case when bool_or(pubupdate) then 'update' else null end,
            case when bool_or(pubdelete) then 'delete' else null end
          ) as w2j_actions,
          coalesce(
            string_agg(
              realtime.quote_wal2json(format('%I.%I', schemaname, tablename)::regclass),
              ','
            ) filter (where ppt.tablename is not null and ppt.tablename not like '% %'),
            ''
          ) w2j_add_tables
        from
          pg_publication pp
          left join pg_publication_tables ppt
            on pp.pubname = ppt.pubname
        where
          pp.pubname = publication
        group by
          pp.pubname
        limit 1
      ),
      w2j as (
        select
          x.*, pub.w2j_add_tables
        from
          pub,
          pg_logical_slot_get_changes(
            slot_name, null, max_changes,
            'include-pk', 'true',
            'include-transaction', 'false',
            'include-timestamp', 'true',
            'include-type-oids', 'true',
            'format-version', '2',
            'actions', pub.w2j_actions,
            'add-tables', pub.w2j_add_tables
          ) x
      )
      select
        xyz.wal,
        xyz.is_rls_enabled,
        xyz.subscription_ids,
        xyz.errors
      from
        w2j,
        realtime.apply_rls(
          wal := w2j.data::jsonb,
          max_record_bytes := max_record_bytes
        ) xyz(wal, is_rls_enabled, subscription_ids, errors)
      where
        w2j.w2j_add_tables <> ''
        and xyz.subscription_ids[1] is not null
    $$;


ALTER FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) OWNER TO supabase_admin;

--
-- Name: quote_wal2json(regclass); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.quote_wal2json(entity regclass) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $$
      select
        (
          select string_agg('' || ch,'')
          from unnest(string_to_array(nsp.nspname::text, null)) with ordinality x(ch, idx)
          where
            not (x.idx = 1 and x.ch = '"')
            and not (
              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)
              and x.ch = '"'
            )
        )
        || '.'
        || (
          select string_agg('' || ch,'')
          from unnest(string_to_array(pc.relname::text, null)) with ordinality x(ch, idx)
          where
            not (x.idx = 1 and x.ch = '"')
            and not (
              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)
              and x.ch = '"'
            )
          )
      from
        pg_class pc
        join pg_namespace nsp
          on pc.relnamespace = nsp.oid
      where
        pc.oid = entity
    $$;


ALTER FUNCTION realtime.quote_wal2json(entity regclass) OWNER TO supabase_admin;

--
-- Name: send(jsonb, text, text, boolean); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean DEFAULT true) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  partition_name text;
BEGIN
  partition_name := 'messages_' || to_char(NOW(), 'YYYY_MM_DD');

  IF NOT EXISTS (
    SELECT 1
    FROM pg_class c
    JOIN pg_namespace n ON n.oid = c.relnamespace
    WHERE n.nspname = 'realtime'
    AND c.relname = partition_name
  ) THEN
    EXECUTE format(
      'CREATE TABLE realtime.%I PARTITION OF realtime.messages FOR VALUES FROM (%L) TO (%L)',
      partition_name,
      NOW(),
      (NOW() + interval '1 day')::timestamp
    );
  END IF;

  INSERT INTO realtime.messages (payload, event, topic, private, extension)
  VALUES (payload, event, topic, private, 'broadcast');
END;
$$;


ALTER FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean) OWNER TO supabase_admin;

--
-- Name: subscription_check_filters(); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.subscription_check_filters() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    /*
    Validates that the user defined filters for a subscription:
    - refer to valid columns that the claimed role may access
    - values are coercable to the correct column type
    */
    declare
        col_names text[] = coalesce(
                array_agg(c.column_name order by c.ordinal_position),
                '{}'::text[]
            )
            from
                information_schema.columns c
            where
                format('%I.%I', c.table_schema, c.table_name)::regclass = new.entity
                and pg_catalog.has_column_privilege(
                    (new.claims ->> 'role'),
                    format('%I.%I', c.table_schema, c.table_name)::regclass,
                    c.column_name,
                    'SELECT'
                );
        filter realtime.user_defined_filter;
        col_type regtype;

        in_val jsonb;
    begin
        for filter in select * from unnest(new.filters) loop
            -- Filtered column is valid
            if not filter.column_name = any(col_names) then
                raise exception 'invalid column for filter %', filter.column_name;
            end if;

            -- Type is sanitized and safe for string interpolation
            col_type = (
                select atttypid::regtype
                from pg_catalog.pg_attribute
                where attrelid = new.entity
                      and attname = filter.column_name
            );
            if col_type is null then
                raise exception 'failed to lookup type for column %', filter.column_name;
            end if;

            -- Set maximum number of entries for in filter
            if filter.op = 'in'::realtime.equality_op then
                in_val = realtime.cast(filter.value, (col_type::text || '[]')::regtype);
                if coalesce(jsonb_array_length(in_val), 0) > 100 then
                    raise exception 'too many values for `in` filter. Maximum 100';
                end if;
            else
                -- raises an exception if value is not coercable to type
                perform realtime.cast(filter.value, col_type);
            end if;

        end loop;

        -- Apply consistent order to filters so the unique constraint on
        -- (subscription_id, entity, filters) can't be tricked by a different filter order
        new.filters = coalesce(
            array_agg(f order by f.column_name, f.op, f.value),
            '{}'
        ) from unnest(new.filters) f;

        return new;
    end;
    $$;


ALTER FUNCTION realtime.subscription_check_filters() OWNER TO supabase_admin;

--
-- Name: to_regrole(text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.to_regrole(role_name text) RETURNS regrole
    LANGUAGE sql IMMUTABLE
    AS $$ select role_name::regrole $$;


ALTER FUNCTION realtime.to_regrole(role_name text) OWNER TO supabase_admin;

--
-- Name: topic(); Type: FUNCTION; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE FUNCTION realtime.topic() RETURNS text
    LANGUAGE sql STABLE
    AS $$
select nullif(current_setting('realtime.topic', true), '')::text;
$$;


ALTER FUNCTION realtime.topic() OWNER TO supabase_realtime_admin;

--
-- Name: can_insert_object(text, text, uuid, jsonb); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  INSERT INTO "storage"."objects" ("bucket_id", "name", "owner", "metadata") VALUES (bucketid, name, owner, metadata);
  -- hack to rollback the successful insert
  RAISE sqlstate 'PT200' using
  message = 'ROLLBACK',
  detail = 'rollback successful insert';
END
$$;


ALTER FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) OWNER TO supabase_storage_admin;

--
-- Name: extension(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.extension(name text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
_filename text;
BEGIN
	select string_to_array(name, '/') into _parts;
	select _parts[array_length(_parts,1)] into _filename;
	-- @todo return the last part instead of 2
	return reverse(split_part(reverse(_filename), '.', 1));
END
$$;


ALTER FUNCTION storage.extension(name text) OWNER TO supabase_storage_admin;

--
-- Name: filename(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.filename(name text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[array_length(_parts,1)];
END
$$;


ALTER FUNCTION storage.filename(name text) OWNER TO supabase_storage_admin;

--
-- Name: foldername(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.foldername(name text) RETURNS text[]
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[1:array_length(_parts,1)-1];
END
$$;


ALTER FUNCTION storage.foldername(name text) OWNER TO supabase_storage_admin;

--
-- Name: get_size_by_bucket(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.get_size_by_bucket() RETURNS TABLE(size bigint, bucket_id text)
    LANGUAGE plpgsql
    AS $$
BEGIN
    return query
        select sum((metadata->>'size')::int) as size, obj.bucket_id
        from "storage".objects as obj
        group by obj.bucket_id;
END
$$;


ALTER FUNCTION storage.get_size_by_bucket() OWNER TO supabase_storage_admin;

--
-- Name: list_multipart_uploads_with_delimiter(text, text, text, integer, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, next_key_token text DEFAULT ''::text, next_upload_token text DEFAULT ''::text) RETURNS TABLE(key text, id text, created_at timestamp with time zone)
    LANGUAGE plpgsql
    AS $_$
BEGIN
    RETURN QUERY EXECUTE
        'SELECT DISTINCT ON(key COLLATE "C") * from (
            SELECT
                CASE
                    WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN
                        substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1)))
                    ELSE
                        key
                END AS key, id, created_at
            FROM
                storage.s3_multipart_uploads
            WHERE
                bucket_id = $5 AND
                key ILIKE $1 || ''%'' AND
                CASE
                    WHEN $4 != '''' AND $6 = '''' THEN
                        CASE
                            WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN
                                substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1))) COLLATE "C" > $4
                            ELSE
                                key COLLATE "C" > $4
                            END
                    ELSE
                        true
                END AND
                CASE
                    WHEN $6 != '''' THEN
                        id COLLATE "C" > $6
                    ELSE
                        true
                    END
            ORDER BY
                key COLLATE "C" ASC, created_at ASC) as e order by key COLLATE "C" LIMIT $3'
        USING prefix_param, delimiter_param, max_keys, next_key_token, bucket_id, next_upload_token;
END;
$_$;


ALTER FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, next_key_token text, next_upload_token text) OWNER TO supabase_storage_admin;

--
-- Name: list_objects_with_delimiter(text, text, text, integer, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, start_after text DEFAULT ''::text, next_token text DEFAULT ''::text) RETURNS TABLE(name text, id uuid, metadata jsonb, updated_at timestamp with time zone)
    LANGUAGE plpgsql
    AS $_$
BEGIN
    RETURN QUERY EXECUTE
        'SELECT DISTINCT ON(name COLLATE "C") * from (
            SELECT
                CASE
                    WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN
                        substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1)))
                    ELSE
                        name
                END AS name, id, metadata, updated_at
            FROM
                storage.objects
            WHERE
                bucket_id = $5 AND
                name ILIKE $1 || ''%'' AND
                CASE
                    WHEN $6 != '''' THEN
                    name COLLATE "C" > $6
                ELSE true END
                AND CASE
                    WHEN $4 != '''' THEN
                        CASE
                            WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN
                                substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1))) COLLATE "C" > $4
                            ELSE
                                name COLLATE "C" > $4
                            END
                    ELSE
                        true
                END
            ORDER BY
                name COLLATE "C" ASC) as e order by name COLLATE "C" LIMIT $3'
        USING prefix_param, delimiter_param, max_keys, next_token, bucket_id, start_after;
END;
$_$;


ALTER FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, start_after text, next_token text) OWNER TO supabase_storage_admin;

--
-- Name: operation(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.operation() RETURNS text
    LANGUAGE plpgsql STABLE
    AS $$
BEGIN
    RETURN current_setting('storage.operation', true);
END;
$$;


ALTER FUNCTION storage.operation() OWNER TO supabase_storage_admin;

--
-- Name: search(text, text, integer, integer, integer, text, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.search(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text) RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)
    LANGUAGE plpgsql STABLE
    AS $_$
declare
  v_order_by text;
  v_sort_order text;
begin
  case
    when sortcolumn = 'name' then
      v_order_by = 'name';
    when sortcolumn = 'updated_at' then
      v_order_by = 'updated_at';
    when sortcolumn = 'created_at' then
      v_order_by = 'created_at';
    when sortcolumn = 'last_accessed_at' then
      v_order_by = 'last_accessed_at';
    else
      v_order_by = 'name';
  end case;

  case
    when sortorder = 'asc' then
      v_sort_order = 'asc';
    when sortorder = 'desc' then
      v_sort_order = 'desc';
    else
      v_sort_order = 'asc';
  end case;

  v_order_by = v_order_by || ' ' || v_sort_order;

  return query execute
    'with folders as (
       select path_tokens[$1] as folder
       from storage.objects
         where objects.name ilike $2 || $3 || ''%''
           and bucket_id = $4
           and array_length(objects.path_tokens, 1) <> $1
       group by folder
       order by folder ' || v_sort_order || '
     )
     (select folder as "name",
            null as id,
            null as updated_at,
            null as created_at,
            null as last_accessed_at,
            null as metadata from folders)
     union all
     (select path_tokens[$1] as "name",
            id,
            updated_at,
            created_at,
            last_accessed_at,
            metadata
     from storage.objects
     where objects.name ilike $2 || $3 || ''%''
       and bucket_id = $4
       and array_length(objects.path_tokens, 1) = $1
     order by ' || v_order_by || ')
     limit $5
     offset $6' using levels, prefix, search, bucketname, limits, offsets;
end;
$_$;


ALTER FUNCTION storage.search(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text) OWNER TO supabase_storage_admin;

--
-- Name: update_updated_at_column(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.update_updated_at_column() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW; 
END;
$$;


ALTER FUNCTION storage.update_updated_at_column() OWNER TO supabase_storage_admin;

--
-- Name: secrets_encrypt_secret_secret(); Type: FUNCTION; Schema: vault; Owner: supabase_admin
--

CREATE FUNCTION vault.secrets_encrypt_secret_secret() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
		BEGIN
		        new.secret = CASE WHEN new.secret IS NULL THEN NULL ELSE
			CASE WHEN new.key_id IS NULL THEN NULL ELSE pg_catalog.encode(
			  pgsodium.crypto_aead_det_encrypt(
				pg_catalog.convert_to(new.secret, 'utf8'),
				pg_catalog.convert_to((new.id::text || new.description::text || new.created_at::text || new.updated_at::text)::text, 'utf8'),
				new.key_id::uuid,
				new.nonce
			  ),
				'base64') END END;
		RETURN new;
		END;
		$$;


ALTER FUNCTION vault.secrets_encrypt_secret_secret() OWNER TO supabase_admin;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: audit_log_entries; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.audit_log_entries (
    instance_id uuid,
    id uuid NOT NULL,
    payload json,
    created_at timestamp with time zone,
    ip_address character varying(64) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE auth.audit_log_entries OWNER TO supabase_auth_admin;

--
-- Name: TABLE audit_log_entries; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.audit_log_entries IS 'Auth: Audit trail for user actions.';


--
-- Name: flow_state; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.flow_state (
    id uuid NOT NULL,
    user_id uuid,
    auth_code text NOT NULL,
    code_challenge_method auth.code_challenge_method NOT NULL,
    code_challenge text NOT NULL,
    provider_type text NOT NULL,
    provider_access_token text,
    provider_refresh_token text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    authentication_method text NOT NULL,
    auth_code_issued_at timestamp with time zone
);


ALTER TABLE auth.flow_state OWNER TO supabase_auth_admin;

--
-- Name: TABLE flow_state; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.flow_state IS 'stores metadata for pkce logins';


--
-- Name: identities; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.identities (
    provider_id text NOT NULL,
    user_id uuid NOT NULL,
    identity_data jsonb NOT NULL,
    provider text NOT NULL,
    last_sign_in_at timestamp with time zone,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    email text GENERATED ALWAYS AS (lower((identity_data ->> 'email'::text))) STORED,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE auth.identities OWNER TO supabase_auth_admin;

--
-- Name: TABLE identities; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.identities IS 'Auth: Stores identities associated to a user.';


--
-- Name: COLUMN identities.email; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.identities.email IS 'Auth: Email is a generated column that references the optional email property in the identity_data';


--
-- Name: instances; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.instances (
    id uuid NOT NULL,
    uuid uuid,
    raw_base_config text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone
);


ALTER TABLE auth.instances OWNER TO supabase_auth_admin;

--
-- Name: TABLE instances; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.instances IS 'Auth: Manages users across multiple sites.';


--
-- Name: mfa_amr_claims; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_amr_claims (
    session_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    authentication_method text NOT NULL,
    id uuid NOT NULL
);


ALTER TABLE auth.mfa_amr_claims OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_amr_claims; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_amr_claims IS 'auth: stores authenticator method reference claims for multi factor authentication';


--
-- Name: mfa_challenges; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_challenges (
    id uuid NOT NULL,
    factor_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL,
    verified_at timestamp with time zone,
    ip_address inet NOT NULL,
    otp_code text,
    web_authn_session_data jsonb
);


ALTER TABLE auth.mfa_challenges OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_challenges; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_challenges IS 'auth: stores metadata about challenge requests made';


--
-- Name: mfa_factors; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_factors (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    friendly_name text,
    factor_type auth.factor_type NOT NULL,
    status auth.factor_status NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    secret text,
    phone text,
    last_challenged_at timestamp with time zone,
    web_authn_credential jsonb,
    web_authn_aaguid uuid
);


ALTER TABLE auth.mfa_factors OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_factors; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_factors IS 'auth: stores metadata about factors';


--
-- Name: one_time_tokens; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.one_time_tokens (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    token_type auth.one_time_token_type NOT NULL,
    token_hash text NOT NULL,
    relates_to text NOT NULL,
    created_at timestamp without time zone DEFAULT now() NOT NULL,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    CONSTRAINT one_time_tokens_token_hash_check CHECK ((char_length(token_hash) > 0))
);


ALTER TABLE auth.one_time_tokens OWNER TO supabase_auth_admin;

--
-- Name: refresh_tokens; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.refresh_tokens (
    instance_id uuid,
    id bigint NOT NULL,
    token character varying(255),
    user_id character varying(255),
    revoked boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    parent character varying(255),
    session_id uuid
);


ALTER TABLE auth.refresh_tokens OWNER TO supabase_auth_admin;

--
-- Name: TABLE refresh_tokens; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.refresh_tokens IS 'Auth: Store of tokens used to refresh JWT tokens once they expire.';


--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE; Schema: auth; Owner: supabase_auth_admin
--

CREATE SEQUENCE auth.refresh_tokens_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE auth.refresh_tokens_id_seq OWNER TO supabase_auth_admin;

--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE OWNED BY; Schema: auth; Owner: supabase_auth_admin
--

ALTER SEQUENCE auth.refresh_tokens_id_seq OWNED BY auth.refresh_tokens.id;


--
-- Name: saml_providers; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.saml_providers (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    entity_id text NOT NULL,
    metadata_xml text NOT NULL,
    metadata_url text,
    attribute_mapping jsonb,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    name_id_format text,
    CONSTRAINT "entity_id not empty" CHECK ((char_length(entity_id) > 0)),
    CONSTRAINT "metadata_url not empty" CHECK (((metadata_url = NULL::text) OR (char_length(metadata_url) > 0))),
    CONSTRAINT "metadata_xml not empty" CHECK ((char_length(metadata_xml) > 0))
);


ALTER TABLE auth.saml_providers OWNER TO supabase_auth_admin;

--
-- Name: TABLE saml_providers; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.saml_providers IS 'Auth: Manages SAML Identity Provider connections.';


--
-- Name: saml_relay_states; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.saml_relay_states (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    request_id text NOT NULL,
    for_email text,
    redirect_to text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    flow_state_id uuid,
    CONSTRAINT "request_id not empty" CHECK ((char_length(request_id) > 0))
);


ALTER TABLE auth.saml_relay_states OWNER TO supabase_auth_admin;

--
-- Name: TABLE saml_relay_states; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.saml_relay_states IS 'Auth: Contains SAML Relay State information for each Service Provider initiated login.';


--
-- Name: schema_migrations; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE auth.schema_migrations OWNER TO supabase_auth_admin;

--
-- Name: TABLE schema_migrations; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.schema_migrations IS 'Auth: Manages updates to the auth system.';


--
-- Name: sessions; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sessions (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    factor_id uuid,
    aal auth.aal_level,
    not_after timestamp with time zone,
    refreshed_at timestamp without time zone,
    user_agent text,
    ip inet,
    tag text
);


ALTER TABLE auth.sessions OWNER TO supabase_auth_admin;

--
-- Name: TABLE sessions; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sessions IS 'Auth: Stores session data associated to a user.';


--
-- Name: COLUMN sessions.not_after; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.sessions.not_after IS 'Auth: Not after is a nullable column that contains a timestamp after which the session should be regarded as expired.';


--
-- Name: sso_domains; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sso_domains (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    domain text NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    CONSTRAINT "domain not empty" CHECK ((char_length(domain) > 0))
);


ALTER TABLE auth.sso_domains OWNER TO supabase_auth_admin;

--
-- Name: TABLE sso_domains; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sso_domains IS 'Auth: Manages SSO email address domain mapping to an SSO Identity Provider.';


--
-- Name: sso_providers; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sso_providers (
    id uuid NOT NULL,
    resource_id text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    CONSTRAINT "resource_id not empty" CHECK (((resource_id = NULL::text) OR (char_length(resource_id) > 0)))
);


ALTER TABLE auth.sso_providers OWNER TO supabase_auth_admin;

--
-- Name: TABLE sso_providers; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sso_providers IS 'Auth: Manages SSO identity provider information; see saml_providers for SAML.';


--
-- Name: COLUMN sso_providers.resource_id; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.sso_providers.resource_id IS 'Auth: Uniquely identifies a SSO provider according to a user-chosen resource ID (case insensitive), useful in infrastructure as code.';


--
-- Name: users; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.users (
    instance_id uuid,
    id uuid NOT NULL,
    aud character varying(255),
    role character varying(255),
    email character varying(255),
    encrypted_password character varying(255),
    email_confirmed_at timestamp with time zone,
    invited_at timestamp with time zone,
    confirmation_token character varying(255),
    confirmation_sent_at timestamp with time zone,
    recovery_token character varying(255),
    recovery_sent_at timestamp with time zone,
    email_change_token_new character varying(255),
    email_change character varying(255),
    email_change_sent_at timestamp with time zone,
    last_sign_in_at timestamp with time zone,
    raw_app_meta_data jsonb,
    raw_user_meta_data jsonb,
    is_super_admin boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    phone text DEFAULT NULL::character varying,
    phone_confirmed_at timestamp with time zone,
    phone_change text DEFAULT ''::character varying,
    phone_change_token character varying(255) DEFAULT ''::character varying,
    phone_change_sent_at timestamp with time zone,
    confirmed_at timestamp with time zone GENERATED ALWAYS AS (LEAST(email_confirmed_at, phone_confirmed_at)) STORED,
    email_change_token_current character varying(255) DEFAULT ''::character varying,
    email_change_confirm_status smallint DEFAULT 0,
    banned_until timestamp with time zone,
    reauthentication_token character varying(255) DEFAULT ''::character varying,
    reauthentication_sent_at timestamp with time zone,
    is_sso_user boolean DEFAULT false NOT NULL,
    deleted_at timestamp with time zone,
    is_anonymous boolean DEFAULT false NOT NULL,
    CONSTRAINT users_email_change_confirm_status_check CHECK (((email_change_confirm_status >= 0) AND (email_change_confirm_status <= 2)))
);


ALTER TABLE auth.users OWNER TO supabase_auth_admin;

--
-- Name: TABLE users; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.users IS 'Auth: Stores user login data within a secure schema.';


--
-- Name: COLUMN users.is_sso_user; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.users.is_sso_user IS 'Auth: Set this column to true when the account comes from SSO. These accounts can have duplicate emails.';


--
-- Name: agencias; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.agencias (
    agencia_id bigint NOT NULL,
    nome character varying,
    descricao text,
    nivel_agencia smallint
);


ALTER TABLE public.agencias OWNER TO postgres;

--
-- Name: agencias_agencia_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.agencias ALTER COLUMN agencia_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.agencias_agencia_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: cargos; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.cargos (
    cargo_id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    nome character varying,
    descricao character varying,
    faccao_id bigint
);


ALTER TABLE public.cargos OWNER TO postgres;

--
-- Name: cargos_cargo_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.cargos ALTER COLUMN cargo_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.cargos_cargo_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: faccoes; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.faccoes (
    faccao_id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    nome text,
    descricao text,
    data_criacao date,
    fundadores text[],
    imagem_path text
);


ALTER TABLE public.faccoes OWNER TO postgres;

--
-- Name: count_faccoes_view; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.count_faccoes_view AS
 SELECT count(faccoes.faccao_id) AS total
   FROM public.faccoes;


ALTER TABLE public.count_faccoes_view OWNER TO postgres;

--
-- Name: membros; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.membros (
    membro_id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    nome_completo character varying,
    alcunha character varying[],
    faccao_id bigint,
    fotos_path character varying[],
    funcao_id bigint,
    nacionalidade character varying,
    naturalidade character varying,
    cpf character varying,
    identidade character varying,
    nivel_instrucao character varying,
    filiacao_mae character varying,
    filiacao_pai character varying,
    situacao_mae character varying,
    situacao_pai character varying,
    historico character varying,
    cargo_id bigint,
    cargo_ant_id bigint,
    funcao_ant_id bigint,
    batismo character varying,
    padrinho character varying,
    faccao_integrou bigint,
    faccao_aliada bigint,
    faccao_inimiga bigint,
    faccao_senha character varying,
    membro_endereco character varying[],
    estado_id bigint,
    municipio_id bigint,
    infopen character varying,
    estado_civil character varying,
    batismo_local character varying,
    tres_ultimo_locais_preso character varying[],
    alerta boolean,
    atuacao_crime character varying,
    validacao_precentual real,
    validacoes character varying[],
    coordenadas character varying[],
    validacao_observacao character varying,
    identidade_orgao bigint,
    "membroLngLat" double precision[],
    alerta_observacao character varying
);


ALTER TABLE public.membros OWNER TO postgres;

--
-- Name: count_membros_view; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.count_membros_view AS
 SELECT count(membros.membro_id) AS total
   FROM public.membros;


ALTER TABLE public.count_membros_view OWNER TO postgres;

--
-- Name: usuarios; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.usuarios (
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    nome_completo character varying,
    email character varying,
    user_id uuid NOT NULL,
    usuario_id bigint NOT NULL,
    foto_path text,
    descricao text,
    acesso_at timestamp with time zone DEFAULT now(),
    tipo_usuario_id bigint,
    agencia_id bigint
);


ALTER TABLE public.usuarios OWNER TO postgres;

--
-- Name: count_usuarios_ativos_view; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.count_usuarios_ativos_view AS
 SELECT count(u.usuario_id) AS total
   FROM public.usuarios u
  WHERE (u.tipo_usuario_id <= 8);


ALTER TABLE public.count_usuarios_ativos_view OWNER TO postgres;

--
-- Name: count_usuarios_view; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.count_usuarios_view AS
 SELECT count(usuarios.*) AS total
   FROM public.usuarios;


ALTER TABLE public.count_usuarios_view OWNER TO postgres;

--
-- Name: estados; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.estados (
    estado_id bigint NOT NULL,
    nome character varying,
    sigla character varying,
    id bigint NOT NULL
);


ALTER TABLE public.estados OWNER TO postgres;

--
-- Name: estados_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.estados ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.estados_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: faccoes_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.faccoes ALTER COLUMN faccao_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.faccoes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: faccoes_view; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.faccoes_view AS
 SELECT f.faccao_id,
    f.nome,
    f.descricao,
    f.data_criacao,
    count(m.membro_id) AS total_membros
   FROM (public.faccoes f
     LEFT JOIN public.membros m ON ((f.faccao_id = m.faccao_id)))
  GROUP BY f.faccao_id, f.nome, f.descricao, f.data_criacao;


ALTER TABLE public.faccoes_view OWNER TO postgres;

--
-- Name: funcoes; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.funcoes (
    funcao_id bigint NOT NULL,
    descricao text,
    grau_hierarquico smallint,
    nome character varying,
    faccao_id bigint
);


ALTER TABLE public.funcoes OWNER TO postgres;

--
-- Name: funcoes_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.funcoes ALTER COLUMN funcao_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.funcoes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: grupos; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.grupos (
    grupo_id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    nome character varying,
    descricao text
);


ALTER TABLE public.grupos OWNER TO postgres;

--
-- Name: grupos_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.grupos ALTER COLUMN grupo_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.grupos_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: grupos_membros; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.grupos_membros (
    id bigint NOT NULL,
    grupo_id bigint,
    membro_id bigint
);


ALTER TABLE public.grupos_membros OWNER TO postgres;

--
-- Name: grupos_membros_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.grupos_membros ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.grupos_membros_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: membros_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.membros ALTER COLUMN membro_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.membros_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: membros_view; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.membros_view AS
 SELECT m.membro_id,
    m.created_at,
    m.nome_completo,
    m.alcunha,
    m.faccao_id,
    f.nome AS faccao_nome,
    m.fotos_path,
    m.funcao_id,
    fn.nome AS funcao_nome,
    m.nacionalidade,
    m.naturalidade,
    m.cpf,
    m.identidade,
    m.nivel_instrucao,
    m.filiacao_mae,
    m.filiacao_pai,
    m.situacao_mae,
    m.situacao_pai,
    m.historico,
    m.cargo_id,
    c.nome AS cargo_nome,
    m.cargo_ant_id,
    m.funcao_ant_id,
    m.batismo,
    m.padrinho,
    m.faccao_integrou,
    m.faccao_aliada,
    m.faccao_inimiga,
    m.faccao_senha,
    m.membro_endereco,
    m.estado_id,
    e.nome AS estado_nome,
    m.municipio_id,
    m.infopen,
    m.estado_civil,
    m.batismo_local,
    m.tres_ultimo_locais_preso,
    m.alerta,
    m.alerta_observacao,
    m.atuacao_crime,
    m.validacao_precentual,
    m.validacoes,
    m.coordenadas,
    m.validacao_observacao,
    m.identidade_orgao,
    m."membroLngLat"
   FROM ((((public.membros m
     LEFT JOIN public.estados e ON ((m.estado_id = e.estado_id)))
     LEFT JOIN public.faccoes f ON ((m.faccao_id = f.faccao_id)))
     LEFT JOIN public.cargos c ON ((m.cargo_id = c.cargo_id)))
     LEFT JOIN public.funcoes fn ON ((m.funcao_id = fn.funcao_id)));


ALTER TABLE public.membros_view OWNER TO postgres;

--
-- Name: municipios; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.municipios (
    estado_id bigint,
    municipio_id bigint,
    nome character varying,
    id bigint NOT NULL
);


ALTER TABLE public.municipios OWNER TO postgres;

--
-- Name: municipios_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.municipios ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.municipios_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: procedimentos; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.procedimentos (
    procedimento_id bigint NOT NULL,
    membro_id bigint,
    procedimento_no character varying,
    unidade character varying,
    procedimento_tipo character varying,
    crime character varying,
    data date
);


ALTER TABLE public.procedimentos OWNER TO postgres;

--
-- Name: procedumentos_procedimento_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.procedimentos ALTER COLUMN procedimento_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.procedumentos_procedimento_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: processos; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.processos (
    processo_id bigint NOT NULL,
    membro_id bigint,
    acao_penal_no character varying,
    vara character varying,
    situaco_juridica character varying,
    regime character varying,
    situacao_reu character varying
);


ALTER TABLE public.processos OWNER TO postgres;

--
-- Name: processos_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.processos ALTER COLUMN processo_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.processos_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: relacionamentos_membros; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.relacionamentos_membros (
    id bigint NOT NULL,
    membro_01_id bigint,
    membro_02_ bigint
);


ALTER TABLE public.relacionamentos_membros OWNER TO postgres;

--
-- Name: relacionamentos_membros_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.relacionamentos_membros ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.relacionamentos_membros_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: tipos_usuarios; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.tipos_usuarios (
    tipo_usuario_id bigint NOT NULL,
    descricao text,
    nivel smallint
);


ALTER TABLE public.tipos_usuarios OWNER TO postgres;

--
-- Name: tipos_usuarios_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.tipos_usuarios ALTER COLUMN tipo_usuario_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.tipos_usuarios_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: usuarios_usuario_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.usuarios ALTER COLUMN usuario_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.usuarios_usuario_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: vara; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.vara (
    vara_id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    nome character varying,
    descricao character varying,
    estado_id bigint,
    municipio_id bigint
);


ALTER TABLE public.vara OWNER TO postgres;

--
-- Name: vara_vara_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.vara ALTER COLUMN vara_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.vara_vara_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: wappler_migrations; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.wappler_migrations (
    id integer NOT NULL,
    name character varying(255),
    batch integer,
    migration_time timestamp with time zone
);


ALTER TABLE public.wappler_migrations OWNER TO postgres;

--
-- Name: wappler_migrations_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.wappler_migrations_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.wappler_migrations_id_seq OWNER TO postgres;

--
-- Name: wappler_migrations_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.wappler_migrations_id_seq OWNED BY public.wappler_migrations.id;


--
-- Name: wappler_migrations_lock; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.wappler_migrations_lock (
    index integer NOT NULL,
    is_locked integer
);


ALTER TABLE public.wappler_migrations_lock OWNER TO postgres;

--
-- Name: wappler_migrations_lock_index_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.wappler_migrations_lock_index_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.wappler_migrations_lock_index_seq OWNER TO postgres;

--
-- Name: wappler_migrations_lock_index_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.wappler_migrations_lock_index_seq OWNED BY public.wappler_migrations_lock.index;


--
-- Name: messages; Type: TABLE; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE TABLE realtime.messages (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
)
PARTITION BY RANGE (inserted_at);


ALTER TABLE realtime.messages OWNER TO supabase_realtime_admin;

--
-- Name: messages_2024_11_17; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.messages_2024_11_17 (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE realtime.messages_2024_11_17 OWNER TO supabase_admin;

--
-- Name: messages_2024_11_18; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.messages_2024_11_18 (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE realtime.messages_2024_11_18 OWNER TO supabase_admin;

--
-- Name: messages_2024_11_19; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.messages_2024_11_19 (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE realtime.messages_2024_11_19 OWNER TO supabase_admin;

--
-- Name: messages_2024_11_20; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.messages_2024_11_20 (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE realtime.messages_2024_11_20 OWNER TO supabase_admin;

--
-- Name: messages_2024_11_21; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.messages_2024_11_21 (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE realtime.messages_2024_11_21 OWNER TO supabase_admin;

--
-- Name: messages_2024_11_22; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.messages_2024_11_22 (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE realtime.messages_2024_11_22 OWNER TO supabase_admin;

--
-- Name: messages_2024_11_24; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.messages_2024_11_24 (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE realtime.messages_2024_11_24 OWNER TO supabase_admin;

--
-- Name: messages_2024_11_25; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.messages_2024_11_25 (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE realtime.messages_2024_11_25 OWNER TO supabase_admin;

--
-- Name: messages_2024_11_26; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.messages_2024_11_26 (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE realtime.messages_2024_11_26 OWNER TO supabase_admin;

--
-- Name: messages_2024_11_27; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.messages_2024_11_27 (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE realtime.messages_2024_11_27 OWNER TO supabase_admin;

--
-- Name: messages_2024_11_28; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.messages_2024_11_28 (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE realtime.messages_2024_11_28 OWNER TO supabase_admin;

--
-- Name: messages_2024_11_29; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.messages_2024_11_29 (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE realtime.messages_2024_11_29 OWNER TO supabase_admin;

--
-- Name: messages_2024_12_01; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.messages_2024_12_01 (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE realtime.messages_2024_12_01 OWNER TO supabase_admin;

--
-- Name: messages_2024_12_02; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.messages_2024_12_02 (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE realtime.messages_2024_12_02 OWNER TO supabase_admin;

--
-- Name: messages_2024_12_03; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.messages_2024_12_03 (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE realtime.messages_2024_12_03 OWNER TO supabase_admin;

--
-- Name: messages_2024_12_04; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.messages_2024_12_04 (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE realtime.messages_2024_12_04 OWNER TO supabase_admin;

--
-- Name: messages_2024_12_05; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.messages_2024_12_05 (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE realtime.messages_2024_12_05 OWNER TO supabase_admin;

--
-- Name: messages_2024_12_06; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.messages_2024_12_06 (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE realtime.messages_2024_12_06 OWNER TO supabase_admin;

--
-- Name: messages_2024_12_07; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.messages_2024_12_07 (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE realtime.messages_2024_12_07 OWNER TO supabase_admin;

--
-- Name: messages_2024_12_11; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.messages_2024_12_11 (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE realtime.messages_2024_12_11 OWNER TO supabase_admin;

--
-- Name: messages_2024_12_12; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.messages_2024_12_12 (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE realtime.messages_2024_12_12 OWNER TO supabase_admin;

--
-- Name: messages_2024_12_13; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.messages_2024_12_13 (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE realtime.messages_2024_12_13 OWNER TO supabase_admin;

--
-- Name: schema_migrations; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.schema_migrations (
    version bigint NOT NULL,
    inserted_at timestamp(0) without time zone
);


ALTER TABLE realtime.schema_migrations OWNER TO supabase_admin;

--
-- Name: subscription; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.subscription (
    id bigint NOT NULL,
    subscription_id uuid NOT NULL,
    entity regclass NOT NULL,
    filters realtime.user_defined_filter[] DEFAULT '{}'::realtime.user_defined_filter[] NOT NULL,
    claims jsonb NOT NULL,
    claims_role regrole GENERATED ALWAYS AS (realtime.to_regrole((claims ->> 'role'::text))) STORED NOT NULL,
    created_at timestamp without time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);


ALTER TABLE realtime.subscription OWNER TO supabase_admin;

--
-- Name: subscription_id_seq; Type: SEQUENCE; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE realtime.subscription ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME realtime.subscription_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: buckets; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.buckets (
    id text NOT NULL,
    name text NOT NULL,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    public boolean DEFAULT false,
    avif_autodetection boolean DEFAULT false,
    file_size_limit bigint,
    allowed_mime_types text[],
    owner_id text
);


ALTER TABLE storage.buckets OWNER TO supabase_storage_admin;

--
-- Name: COLUMN buckets.owner; Type: COMMENT; Schema: storage; Owner: supabase_storage_admin
--

COMMENT ON COLUMN storage.buckets.owner IS 'Field is deprecated, use owner_id instead';


--
-- Name: migrations; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.migrations (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    hash character varying(40) NOT NULL,
    executed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE storage.migrations OWNER TO supabase_storage_admin;

--
-- Name: objects; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.objects (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    bucket_id text,
    name text,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    last_accessed_at timestamp with time zone DEFAULT now(),
    metadata jsonb,
    path_tokens text[] GENERATED ALWAYS AS (string_to_array(name, '/'::text)) STORED,
    version text,
    owner_id text,
    user_metadata jsonb
);


ALTER TABLE storage.objects OWNER TO supabase_storage_admin;

--
-- Name: COLUMN objects.owner; Type: COMMENT; Schema: storage; Owner: supabase_storage_admin
--

COMMENT ON COLUMN storage.objects.owner IS 'Field is deprecated, use owner_id instead';


--
-- Name: s3_multipart_uploads; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.s3_multipart_uploads (
    id text NOT NULL,
    in_progress_size bigint DEFAULT 0 NOT NULL,
    upload_signature text NOT NULL,
    bucket_id text NOT NULL,
    key text NOT NULL COLLATE pg_catalog."C",
    version text NOT NULL,
    owner_id text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    user_metadata jsonb
);


ALTER TABLE storage.s3_multipart_uploads OWNER TO supabase_storage_admin;

--
-- Name: s3_multipart_uploads_parts; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.s3_multipart_uploads_parts (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    upload_id text NOT NULL,
    size bigint DEFAULT 0 NOT NULL,
    part_number integer NOT NULL,
    bucket_id text NOT NULL,
    key text NOT NULL COLLATE pg_catalog."C",
    etag text NOT NULL,
    owner_id text,
    version text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE storage.s3_multipart_uploads_parts OWNER TO supabase_storage_admin;

--
-- Name: decrypted_secrets; Type: VIEW; Schema: vault; Owner: supabase_admin
--

CREATE VIEW vault.decrypted_secrets AS
 SELECT secrets.id,
    secrets.name,
    secrets.description,
    secrets.secret,
        CASE
            WHEN (secrets.secret IS NULL) THEN NULL::text
            ELSE
            CASE
                WHEN (secrets.key_id IS NULL) THEN NULL::text
                ELSE convert_from(pgsodium.crypto_aead_det_decrypt(decode(secrets.secret, 'base64'::text), convert_to(((((secrets.id)::text || secrets.description) || (secrets.created_at)::text) || (secrets.updated_at)::text), 'utf8'::name), secrets.key_id, secrets.nonce), 'utf8'::name)
            END
        END AS decrypted_secret,
    secrets.key_id,
    secrets.nonce,
    secrets.created_at,
    secrets.updated_at
   FROM vault.secrets;


ALTER TABLE vault.decrypted_secrets OWNER TO supabase_admin;

--
-- Name: messages_2024_11_17; Type: TABLE ATTACH; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2024_11_17 FOR VALUES FROM ('2024-11-17 00:00:00') TO ('2024-11-18 00:00:00');


--
-- Name: messages_2024_11_18; Type: TABLE ATTACH; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2024_11_18 FOR VALUES FROM ('2024-11-18 00:00:00') TO ('2024-11-19 00:00:00');


--
-- Name: messages_2024_11_19; Type: TABLE ATTACH; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2024_11_19 FOR VALUES FROM ('2024-11-19 00:00:00') TO ('2024-11-20 00:00:00');


--
-- Name: messages_2024_11_20; Type: TABLE ATTACH; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2024_11_20 FOR VALUES FROM ('2024-11-20 00:00:00') TO ('2024-11-21 00:00:00');


--
-- Name: messages_2024_11_21; Type: TABLE ATTACH; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2024_11_21 FOR VALUES FROM ('2024-11-21 00:00:00') TO ('2024-11-22 00:00:00');


--
-- Name: messages_2024_11_22; Type: TABLE ATTACH; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2024_11_22 FOR VALUES FROM ('2024-11-22 00:00:00') TO ('2024-11-23 00:00:00');


--
-- Name: messages_2024_11_24; Type: TABLE ATTACH; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2024_11_24 FOR VALUES FROM ('2024-11-24 00:00:00') TO ('2024-11-25 00:00:00');


--
-- Name: messages_2024_11_25; Type: TABLE ATTACH; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2024_11_25 FOR VALUES FROM ('2024-11-25 00:00:00') TO ('2024-11-26 00:00:00');


--
-- Name: messages_2024_11_26; Type: TABLE ATTACH; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2024_11_26 FOR VALUES FROM ('2024-11-26 00:00:00') TO ('2024-11-27 00:00:00');


--
-- Name: messages_2024_11_27; Type: TABLE ATTACH; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2024_11_27 FOR VALUES FROM ('2024-11-27 00:00:00') TO ('2024-11-28 00:00:00');


--
-- Name: messages_2024_11_28; Type: TABLE ATTACH; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2024_11_28 FOR VALUES FROM ('2024-11-28 00:00:00') TO ('2024-11-29 00:00:00');


--
-- Name: messages_2024_11_29; Type: TABLE ATTACH; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2024_11_29 FOR VALUES FROM ('2024-11-29 00:00:00') TO ('2024-11-30 00:00:00');


--
-- Name: messages_2024_12_01; Type: TABLE ATTACH; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2024_12_01 FOR VALUES FROM ('2024-12-01 00:00:00') TO ('2024-12-02 00:00:00');


--
-- Name: messages_2024_12_02; Type: TABLE ATTACH; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2024_12_02 FOR VALUES FROM ('2024-12-02 00:00:00') TO ('2024-12-03 00:00:00');


--
-- Name: messages_2024_12_03; Type: TABLE ATTACH; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2024_12_03 FOR VALUES FROM ('2024-12-03 00:00:00') TO ('2024-12-04 00:00:00');


--
-- Name: messages_2024_12_04; Type: TABLE ATTACH; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2024_12_04 FOR VALUES FROM ('2024-12-04 00:00:00') TO ('2024-12-05 00:00:00');


--
-- Name: messages_2024_12_05; Type: TABLE ATTACH; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2024_12_05 FOR VALUES FROM ('2024-12-05 00:00:00') TO ('2024-12-06 00:00:00');


--
-- Name: messages_2024_12_06; Type: TABLE ATTACH; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2024_12_06 FOR VALUES FROM ('2024-12-06 00:00:00') TO ('2024-12-07 00:00:00');


--
-- Name: messages_2024_12_07; Type: TABLE ATTACH; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2024_12_07 FOR VALUES FROM ('2024-12-07 00:00:00') TO ('2024-12-08 00:00:00');


--
-- Name: messages_2024_12_11; Type: TABLE ATTACH; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2024_12_11 FOR VALUES FROM ('2024-12-11 00:00:00') TO ('2024-12-12 00:00:00');


--
-- Name: messages_2024_12_12; Type: TABLE ATTACH; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2024_12_12 FOR VALUES FROM ('2024-12-12 00:00:00') TO ('2024-12-13 00:00:00');


--
-- Name: messages_2024_12_13; Type: TABLE ATTACH; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2024_12_13 FOR VALUES FROM ('2024-12-13 00:00:00') TO ('2024-12-14 00:00:00');


--
-- Name: refresh_tokens id; Type: DEFAULT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens ALTER COLUMN id SET DEFAULT nextval('auth.refresh_tokens_id_seq'::regclass);


--
-- Name: wappler_migrations id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.wappler_migrations ALTER COLUMN id SET DEFAULT nextval('public.wappler_migrations_id_seq'::regclass);


--
-- Name: wappler_migrations_lock index; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.wappler_migrations_lock ALTER COLUMN index SET DEFAULT nextval('public.wappler_migrations_lock_index_seq'::regclass);


--
-- Data for Name: audit_log_entries; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.audit_log_entries (instance_id, id, payload, created_at, ip_address) FROM stdin;
00000000-0000-0000-0000-000000000000	9e2edc7e-0ba9-4e11-8bf3-e0a714a880d1	{"action":"user_confirmation_requested","actor_id":"e4612f4e-a31a-4587-a658-72bb72328c13","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-09-24 23:00:11.57641+00	
00000000-0000-0000-0000-000000000000	dcfb1e84-5f1d-4dbb-94c5-58d82c954650	{"action":"user_confirmation_requested","actor_id":"e4612f4e-a31a-4587-a658-72bb72328c13","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-09-24 23:01:18.754785+00	
00000000-0000-0000-0000-000000000000	4fd98c69-cfd1-40b1-b09d-4dd7faec93bb	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"tenroberto2011@gmail.com","user_id":"e4612f4e-a31a-4587-a658-72bb72328c13","user_phone":""}}	2024-09-24 23:18:48.124593+00	
00000000-0000-0000-0000-000000000000	4449b52b-f484-406f-9848-04c64f52ee42	{"action":"user_confirmation_requested","actor_id":"b9f79bb2-c908-490d-9afb-21b7bd27cee3","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-09-25 11:42:50.544883+00	
00000000-0000-0000-0000-000000000000	99fd45e0-d915-4ffc-bd0e-fa769bd4562c	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"tenroberto2011@gmail.com","user_id":"b9f79bb2-c908-490d-9afb-21b7bd27cee3","user_phone":""}}	2024-09-25 11:44:24.847035+00	
00000000-0000-0000-0000-000000000000	92bc7e3f-68c0-4ff7-a124-9b958d18cbe0	{"action":"user_signedup","actor_id":"4a122753-7d2c-403f-b6aa-c6958b87a46c","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-09-25 11:48:37.644697+00	
00000000-0000-0000-0000-000000000000	2868f516-748f-45b9-b1af-6f7e8dd1f459	{"action":"login","actor_id":"4a122753-7d2c-403f-b6aa-c6958b87a46c","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-25 11:48:37.654703+00	
00000000-0000-0000-0000-000000000000	834467b7-95a3-45e4-9c66-346399df2e3b	{"action":"login","actor_id":"4a122753-7d2c-403f-b6aa-c6958b87a46c","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-25 11:49:01.050627+00	
00000000-0000-0000-0000-000000000000	8aa8bafc-940e-41b0-b283-e05b854ea008	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"tenroberto2011@gmail.com","user_id":"4a122753-7d2c-403f-b6aa-c6958b87a46c","user_phone":""}}	2024-09-25 12:05:30.238257+00	
00000000-0000-0000-0000-000000000000	bb5cb040-fedd-49e6-ad74-5813fca76890	{"action":"user_signedup","actor_id":"b9d3e98d-e386-4663-b6b8-1aabacb046b3","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-09-25 13:51:14.408591+00	
00000000-0000-0000-0000-000000000000	ef38095a-796a-4145-8e03-912ee9f9bc55	{"action":"login","actor_id":"b9d3e98d-e386-4663-b6b8-1aabacb046b3","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-25 13:51:14.412501+00	
00000000-0000-0000-0000-000000000000	544bc610-c710-4de4-ae9a-fb8c07d9bd57	{"action":"login","actor_id":"b9d3e98d-e386-4663-b6b8-1aabacb046b3","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-25 13:51:39.967498+00	
00000000-0000-0000-0000-000000000000	7570b3ba-10a2-4184-9316-c8944554b6df	{"action":"logout","actor_id":"b9d3e98d-e386-4663-b6b8-1aabacb046b3","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-09-25 13:53:18.00086+00	
00000000-0000-0000-0000-000000000000	2dafb263-4b89-4771-bb2f-ef9f16436f52	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"tenroberto2011@gmail.com","user_id":"b9d3e98d-e386-4663-b6b8-1aabacb046b3","user_phone":""}}	2024-09-25 14:07:13.737043+00	
00000000-0000-0000-0000-000000000000	68b70214-219a-415d-8aef-17aef1e32ae9	{"action":"user_signedup","actor_id":"723ce56f-1a9f-45d2-9406-6cab2e74b99c","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-09-25 14:30:38.101961+00	
00000000-0000-0000-0000-000000000000	e84779bd-2328-4391-8744-9e6a13c69d28	{"action":"login","actor_id":"723ce56f-1a9f-45d2-9406-6cab2e74b99c","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-25 14:30:38.10541+00	
00000000-0000-0000-0000-000000000000	ed4392c1-e322-4e0e-92f4-759bd21d0fc7	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"tenroberto2011@gmail.com","user_id":"723ce56f-1a9f-45d2-9406-6cab2e74b99c","user_phone":""}}	2024-09-25 14:31:53.62962+00	
00000000-0000-0000-0000-000000000000	e231b17c-d57c-4239-9ab4-306962880449	{"action":"user_signedup","actor_id":"d4e044d5-5049-4218-8d8f-94843e81a3f3","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-09-25 14:40:45.784744+00	
00000000-0000-0000-0000-000000000000	c1976768-13e9-4987-9fbf-30a9b4b95e52	{"action":"login","actor_id":"d4e044d5-5049-4218-8d8f-94843e81a3f3","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-25 14:40:45.789009+00	
00000000-0000-0000-0000-000000000000	e4aaaf94-fb0e-46be-ba81-cfc6c04987ba	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"tenroberto2011@gmail.com","user_id":"d4e044d5-5049-4218-8d8f-94843e81a3f3","user_phone":""}}	2024-09-25 14:41:35.834699+00	
00000000-0000-0000-0000-000000000000	34123a23-9730-4008-844a-883e911facfa	{"action":"user_signedup","actor_id":"5f4f623a-59ba-4d9e-a654-494bdb19b52c","actor_username":"teste@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-09-25 21:03:04.534032+00	
00000000-0000-0000-0000-000000000000	e88194e2-ec9b-4493-a6c1-fd2b9e6981d9	{"action":"login","actor_id":"5f4f623a-59ba-4d9e-a654-494bdb19b52c","actor_username":"teste@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-25 21:03:04.539074+00	
00000000-0000-0000-0000-000000000000	fb8d1baf-89e7-4e5f-a6f8-9dc38ead06d2	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"teste@gmail.com","user_id":"5f4f623a-59ba-4d9e-a654-494bdb19b52c","user_phone":""}}	2024-09-25 21:14:52.313181+00	
00000000-0000-0000-0000-000000000000	6a0b8343-dd4c-46a4-a450-a98a0fb2760b	{"action":"user_signedup","actor_id":"0e192057-6589-4f64-b59a-75783cf7d9f7","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-09-25 21:53:26.316803+00	
00000000-0000-0000-0000-000000000000	b8561de2-b417-44f4-ab20-4f0afd751990	{"action":"login","actor_id":"0e192057-6589-4f64-b59a-75783cf7d9f7","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-25 21:53:26.322268+00	
00000000-0000-0000-0000-000000000000	de3b1b1a-b461-436f-bc54-725922172377	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"tenroberto2011@gmail.com","user_id":"0e192057-6589-4f64-b59a-75783cf7d9f7","user_phone":""}}	2024-09-25 21:54:04.759777+00	
00000000-0000-0000-0000-000000000000	a39ae09e-0e6c-4032-a5ca-a7066cc8cfdf	{"action":"user_signedup","actor_id":"900d55c3-d2ec-45f9-a2c0-7b4284f39acf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-09-25 22:00:35.445756+00	
00000000-0000-0000-0000-000000000000	e34ff626-5853-4530-9402-00f144a223bc	{"action":"login","actor_id":"900d55c3-d2ec-45f9-a2c0-7b4284f39acf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-25 22:00:35.457031+00	
00000000-0000-0000-0000-000000000000	5227dd90-4a1b-4813-8dde-5c75450c3db6	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"tenroberto2011@gmail.com","user_id":"900d55c3-d2ec-45f9-a2c0-7b4284f39acf","user_phone":""}}	2024-09-25 22:01:24.34017+00	
00000000-0000-0000-0000-000000000000	e9c30506-412a-4f80-928f-50938b6218e0	{"action":"user_signedup","actor_id":"69666574-2e73-43de-a0be-009875bfd03c","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-09-25 22:13:12.99674+00	
00000000-0000-0000-0000-000000000000	6477f1cb-0e7d-4afc-bab3-743d11f184e2	{"action":"login","actor_id":"69666574-2e73-43de-a0be-009875bfd03c","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-25 22:13:13.008003+00	
00000000-0000-0000-0000-000000000000	43f7475b-51ba-46f9-8ec7-a3d9fdfc5e0c	{"action":"user_repeated_signup","actor_id":"69666574-2e73-43de-a0be-009875bfd03c","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-09-25 22:49:25.215508+00	
00000000-0000-0000-0000-000000000000	31402305-f6ff-4f53-9cf4-528158afb400	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"tenroberto2011@gmail.com","user_id":"69666574-2e73-43de-a0be-009875bfd03c","user_phone":""}}	2024-09-25 22:51:06.750616+00	
00000000-0000-0000-0000-000000000000	b8d65a49-c281-4b0b-a3f4-f1f021b3f225	{"action":"user_signedup","actor_id":"4a2bf94c-22c9-4f36-95ad-35bccd3e23b5","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-09-25 22:59:57.604838+00	
00000000-0000-0000-0000-000000000000	f5e62dfb-e896-412d-ba7c-05f96d57ee5f	{"action":"login","actor_id":"4a2bf94c-22c9-4f36-95ad-35bccd3e23b5","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-25 22:59:57.608671+00	
00000000-0000-0000-0000-000000000000	7509e276-9ad0-4729-b0f2-e0fc5fb85ea5	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"tenroberto2011@gmail.com","user_id":"4a2bf94c-22c9-4f36-95ad-35bccd3e23b5","user_phone":""}}	2024-09-25 23:00:59.610051+00	
00000000-0000-0000-0000-000000000000	e192d112-ba5a-4990-9b6f-2a8afff85c64	{"action":"user_signedup","actor_id":"70a00a34-3071-499e-9e11-8e24a2229ef3","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-09-25 23:03:11.61274+00	
00000000-0000-0000-0000-000000000000	969fd5cc-6cca-436a-a727-d49bc4e70b24	{"action":"login","actor_id":"70a00a34-3071-499e-9e11-8e24a2229ef3","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-25 23:03:11.618124+00	
00000000-0000-0000-0000-000000000000	b200b282-119e-4827-b493-1db166bc570f	{"action":"user_repeated_signup","actor_id":"70a00a34-3071-499e-9e11-8e24a2229ef3","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-09-25 23:09:35.991792+00	
00000000-0000-0000-0000-000000000000	65d5c23e-9134-45a1-acfa-76e6c601d26d	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"tenroberto2011@gmail.com","user_id":"70a00a34-3071-499e-9e11-8e24a2229ef3","user_phone":""}}	2024-09-25 23:10:17.525706+00	
00000000-0000-0000-0000-000000000000	1008643c-f0fe-4cbf-8264-b5c511d8ed2f	{"action":"user_signedup","actor_id":"cac63089-8ba3-46a6-9101-cee984f02a52","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-09-25 23:20:32.375013+00	
00000000-0000-0000-0000-000000000000	f82ac1e1-1bba-405f-9b67-f6ea876234ee	{"action":"login","actor_id":"cac63089-8ba3-46a6-9101-cee984f02a52","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-25 23:20:32.379507+00	
00000000-0000-0000-0000-000000000000	40bdfcfd-b1e2-4b54-86c7-0c47428dcd06	{"action":"user_signedup","actor_id":"6cf9ecb9-6a44-463a-bbf5-88d3f69dccc2","actor_username":"teste@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-09-25 23:23:33.030407+00	
00000000-0000-0000-0000-000000000000	d08dd175-32b3-43e5-9823-e43913fc28a3	{"action":"login","actor_id":"6cf9ecb9-6a44-463a-bbf5-88d3f69dccc2","actor_username":"teste@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-25 23:23:33.036438+00	
00000000-0000-0000-0000-000000000000	7bda7620-ea56-4fdd-821a-9cfa08f0bebb	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"tenroberto2011@gmail.com","user_id":"cac63089-8ba3-46a6-9101-cee984f02a52","user_phone":""}}	2024-09-25 23:24:18.115576+00	
00000000-0000-0000-0000-000000000000	d60347d3-4176-4a6b-9ef9-bb7326175f4c	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"teste@gmail.com","user_id":"6cf9ecb9-6a44-463a-bbf5-88d3f69dccc2","user_phone":""}}	2024-09-25 23:24:24.501858+00	
00000000-0000-0000-0000-000000000000	9db1cdfe-da42-47a5-95da-b9fc9551c082	{"action":"user_signedup","actor_id":"f130252a-2392-4fa0-8519-888b9e6290b4","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-09-25 23:30:42.539161+00	
00000000-0000-0000-0000-000000000000	13d26c01-a790-4172-8912-ca8f36f12eb5	{"action":"login","actor_id":"f130252a-2392-4fa0-8519-888b9e6290b4","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-25 23:30:42.544598+00	
00000000-0000-0000-0000-000000000000	d343bb74-c652-4ef1-b5ea-667d740f9a3b	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"tenroberto2011@gmail.com","user_id":"f130252a-2392-4fa0-8519-888b9e6290b4","user_phone":""}}	2024-09-25 23:31:42.528944+00	
00000000-0000-0000-0000-000000000000	a95a5d11-d06c-4c90-a91f-0a9c2c22fe2c	{"action":"user_signedup","actor_id":"47246df5-2245-494a-837a-19774ae11f4c","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-09-25 23:38:36.430658+00	
00000000-0000-0000-0000-000000000000	6b101e60-37eb-4dfb-a42a-7c81681ed0cd	{"action":"login","actor_id":"47246df5-2245-494a-837a-19774ae11f4c","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-25 23:38:36.434128+00	
00000000-0000-0000-0000-000000000000	bb0515d0-cd54-4a74-b054-ba98d638ad28	{"action":"user_repeated_signup","actor_id":"47246df5-2245-494a-837a-19774ae11f4c","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-09-25 23:45:58.895085+00	
00000000-0000-0000-0000-000000000000	c6132795-1dd7-4bdf-b131-491de8207844	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"tenroberto2011@gmail.com","user_id":"47246df5-2245-494a-837a-19774ae11f4c","user_phone":""}}	2024-09-25 23:46:36.985169+00	
00000000-0000-0000-0000-000000000000	eb8ea29b-fcae-4536-949a-8b751101ae9e	{"action":"user_signedup","actor_id":"a632c62b-bdb5-4bc0-9d6c-5f38e9cc2242","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-09-25 23:53:14.059701+00	
00000000-0000-0000-0000-000000000000	ae4f0316-6be5-428b-879a-4523b4669c5e	{"action":"login","actor_id":"a632c62b-bdb5-4bc0-9d6c-5f38e9cc2242","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-25 23:53:14.064494+00	
00000000-0000-0000-0000-000000000000	0a7976cc-22b3-47e7-9f12-f32d8850017d	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"tenroberto2011@gmail.com","user_id":"a632c62b-bdb5-4bc0-9d6c-5f38e9cc2242","user_phone":""}}	2024-09-26 00:02:52.216753+00	
00000000-0000-0000-0000-000000000000	e47b2607-df40-4062-8b7e-244e8142f8bc	{"action":"user_signedup","actor_id":"4973e90d-c588-4b76-8397-a9af14def33e","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-09-26 00:39:14.284795+00	
00000000-0000-0000-0000-000000000000	edd6ca7c-478b-4a61-b3d7-8ab3b8734790	{"action":"login","actor_id":"4973e90d-c588-4b76-8397-a9af14def33e","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-26 00:39:14.290092+00	
00000000-0000-0000-0000-000000000000	c9008815-289d-4ee8-8990-87ac0c4e26b7	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"tenroberto2011@gmail.com","user_id":"4973e90d-c588-4b76-8397-a9af14def33e","user_phone":""}}	2024-09-26 00:39:36.287265+00	
00000000-0000-0000-0000-000000000000	c04dcace-755e-41a3-8e03-b5db52bff52c	{"action":"user_signedup","actor_id":"fd5476f8-4ed6-4a6d-bfc3-1d516cb250fa","actor_username":"tenroberto2022@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-09-26 14:25:03.242491+00	
00000000-0000-0000-0000-000000000000	2c25352b-f3d7-427b-b083-c21109b32b7f	{"action":"login","actor_id":"fd5476f8-4ed6-4a6d-bfc3-1d516cb250fa","actor_username":"tenroberto2022@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-26 14:25:03.253621+00	
00000000-0000-0000-0000-000000000000	af703c99-2766-426a-bc0f-367a9ab1826a	{"action":"logout","actor_id":"fd5476f8-4ed6-4a6d-bfc3-1d516cb250fa","actor_username":"tenroberto2022@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-09-26 14:25:13.114081+00	
00000000-0000-0000-0000-000000000000	7fbf0030-af80-4a58-be1a-aaaf5549a0aa	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"tenroberto2022@gmail.com","user_id":"fd5476f8-4ed6-4a6d-bfc3-1d516cb250fa","user_phone":""}}	2024-09-26 14:38:35.965632+00	
00000000-0000-0000-0000-000000000000	887c5126-63b4-42ff-8e80-3d25683615fb	{"action":"user_signedup","actor_id":"74a4b90e-fea4-4bd3-a62d-7cb88da436af","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-09-26 15:00:32.170531+00	
00000000-0000-0000-0000-000000000000	802a29ec-9233-4ebb-b0ad-6a567343c41e	{"action":"login","actor_id":"74a4b90e-fea4-4bd3-a62d-7cb88da436af","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-26 15:00:32.176019+00	
00000000-0000-0000-0000-000000000000	1dbe73cc-923d-456b-b0e0-2fe204817dcd	{"action":"logout","actor_id":"74a4b90e-fea4-4bd3-a62d-7cb88da436af","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-09-26 15:01:48.890862+00	
00000000-0000-0000-0000-000000000000	b175eacc-773a-422d-a800-3da4fa74e479	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"tenroberto2011@gmail.com","user_id":"74a4b90e-fea4-4bd3-a62d-7cb88da436af","user_phone":""}}	2024-09-26 15:05:00.544488+00	
00000000-0000-0000-0000-000000000000	1cf8f6ee-9ea9-4155-8b06-d5ef05bd9c26	{"action":"user_signedup","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-09-26 18:06:51.390059+00	
00000000-0000-0000-0000-000000000000	0f527fe0-cd2f-4efe-b506-c4cd9e0efffb	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-26 18:06:51.40098+00	
00000000-0000-0000-0000-000000000000	7d49d21a-c4fe-4203-bf32-7b0a61219ec0	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-09-26 18:08:01.443648+00	
00000000-0000-0000-0000-000000000000	87d6035c-a7f3-4ebc-8658-e4ec29fafdf6	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-26 18:08:21.441317+00	
00000000-0000-0000-0000-000000000000	6eeacef5-a59a-4961-9448-a134fa595084	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-09-26 18:16:41.72496+00	
00000000-0000-0000-0000-000000000000	01147b0e-89b6-43cd-a9d1-380c3edb53de	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-26 18:16:58.918095+00	
00000000-0000-0000-0000-000000000000	4de10fee-8de9-4500-a9a9-df3dd94969f0	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-09-26 18:24:46.494028+00	
00000000-0000-0000-0000-000000000000	fdff4762-0fb0-4f6f-b509-f2bff3077419	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-26 18:56:27.259394+00	
00000000-0000-0000-0000-000000000000	fe9ae508-f3f6-43d1-b828-0d3fb7bb8792	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-09-26 18:57:50.07451+00	
00000000-0000-0000-0000-000000000000	c629d903-6f81-4f36-90fe-559cad83535b	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-26 19:06:33.670997+00	
00000000-0000-0000-0000-000000000000	701b6ae3-ad7b-4ad1-9fc8-0481a346fbcf	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-09-26 19:16:15.706643+00	
00000000-0000-0000-0000-000000000000	1bee48a2-c3e4-42ba-a380-9ea61a5b3b0a	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-26 19:50:31.816767+00	
00000000-0000-0000-0000-000000000000	ff150577-048b-4356-8511-ee75cc160903	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-26 20:40:31.322018+00	
00000000-0000-0000-0000-000000000000	2cc2b24e-9d3e-443a-afb5-5b4029c83d08	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-09-26 20:53:27.466354+00	
00000000-0000-0000-0000-000000000000	765159f6-579b-4f13-b256-29fc4d68eed7	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-09-26 20:53:27.467299+00	
00000000-0000-0000-0000-000000000000	4c79ac4d-5122-40b4-9b7b-7dafefef2e42	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-09-26 20:54:24.989536+00	
00000000-0000-0000-0000-000000000000	3ddd4034-c1da-454e-9943-97b324bd7014	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-26 21:02:21.336662+00	
00000000-0000-0000-0000-000000000000	14309004-b5d1-4727-852c-b979a2a3d879	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-09-26 22:44:22.783419+00	
00000000-0000-0000-0000-000000000000	3ed14cf3-1aba-4efe-aceb-aa98d47fbbc0	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-09-26 22:44:22.784435+00	
00000000-0000-0000-0000-000000000000	fc5286bd-3430-4d77-a913-6da015a4c4c7	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-09-26 22:59:28.825225+00	
00000000-0000-0000-0000-000000000000	91a8079b-c309-4b9f-bf62-65589692f554	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-26 23:03:35.206501+00	
00000000-0000-0000-0000-000000000000	02e41ea3-3c2b-4348-8202-ef7cd415ec76	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-09-26 23:35:17.290143+00	
00000000-0000-0000-0000-000000000000	063512b2-d18e-4289-b91e-87750aebca04	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-27 00:21:44.409004+00	
00000000-0000-0000-0000-000000000000	20305e2e-2762-46c8-9a8b-5fe5ad6cb330	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-09-27 01:20:45.204041+00	
00000000-0000-0000-0000-000000000000	f741e561-6b4e-406b-8d3b-db85f297c005	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-09-27 01:20:45.206657+00	
00000000-0000-0000-0000-000000000000	02f855fd-7d29-48cb-83d9-b6f3bf5d9d44	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-09-27 01:20:45.315717+00	
00000000-0000-0000-0000-000000000000	cd91ed3e-a42a-4676-9129-fb2cd3c8c3ea	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-27 14:11:37.929041+00	
00000000-0000-0000-0000-000000000000	aec45ffc-849b-4f30-95fb-e765f6fd1239	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-27 14:17:35.73992+00	
00000000-0000-0000-0000-000000000000	2c3578ce-d9fe-4b7d-89ce-5fee5a7fe438	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-09-27 22:24:14.580777+00	
00000000-0000-0000-0000-000000000000	7e761c11-eb4f-4093-a994-5956315882db	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-09-27 22:24:14.582199+00	
00000000-0000-0000-0000-000000000000	e3799432-199b-4712-91eb-ee2ae2f46d75	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-09-28 12:48:43.028917+00	
00000000-0000-0000-0000-000000000000	a40d57c1-a024-4a5f-91af-155d73b72c44	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-09-28 12:48:43.03895+00	
00000000-0000-0000-0000-000000000000	20e1fa39-1130-4032-8c19-f02c1d9eab76	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-09-28 13:17:01.437596+00	
00000000-0000-0000-0000-000000000000	5067d766-95d2-4ace-9c73-cb7d1996f6d8	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-09-28 13:17:01.444245+00	
00000000-0000-0000-0000-000000000000	75265069-3327-45fe-b567-b8f229e2610f	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-09-28 13:32:45.555988+00	
00000000-0000-0000-0000-000000000000	914ccb95-608d-4f3f-9129-6d5c335fee78	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-09-28 13:32:45.558344+00	
00000000-0000-0000-0000-000000000000	a9ad38a7-d4a7-4603-9458-103e2e4c4ca4	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-09-28 13:33:08.010457+00	
00000000-0000-0000-0000-000000000000	d39378bc-8ea1-4975-8994-57fee2a32320	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-28 13:33:58.299384+00	
00000000-0000-0000-0000-000000000000	07dcdd43-1d3e-4aeb-be8a-c07d96defadc	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-28 14:22:31.258051+00	
00000000-0000-0000-0000-000000000000	4ab2c52a-63f2-4268-9231-fe86c05104a6	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-09-28 19:11:17.628401+00	
00000000-0000-0000-0000-000000000000	3ade923c-ec4f-4b8d-b95b-c2324e1614fc	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-09-28 19:11:17.646184+00	
00000000-0000-0000-0000-000000000000	fa7e089f-5ac0-4e09-94e0-c8915bdad467	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-09-28 19:47:18.667758+00	
00000000-0000-0000-0000-000000000000	abc5be0b-abee-4de5-ab16-c595a1b9b531	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-09-28 19:47:18.66946+00	
00000000-0000-0000-0000-000000000000	27fca82e-5cf8-45da-b65c-81ea1101bf7a	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-09-28 20:11:14.568888+00	
00000000-0000-0000-0000-000000000000	afa7bd72-a52a-494f-8e00-bd98f46139ba	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-09-28 20:11:14.572739+00	
00000000-0000-0000-0000-000000000000	448eaad8-90cd-4d3d-a19a-8e7e2fda8e40	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-09-28 21:37:40.592192+00	
00000000-0000-0000-0000-000000000000	d44a850b-ed18-46e7-ae65-48f6ba615ee7	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-09-28 21:37:40.593573+00	
00000000-0000-0000-0000-000000000000	487fea3f-f335-440e-a91d-8ab20998a2b4	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-09-28 22:39:04.168987+00	
00000000-0000-0000-0000-000000000000	5fe5e321-7dc8-4e14-8880-222c00e89da9	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-09-28 22:39:04.170333+00	
00000000-0000-0000-0000-000000000000	eb0082f7-4bfc-459a-be2b-74a96b2b88f9	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-09-29 10:56:48.624899+00	
00000000-0000-0000-0000-000000000000	ee79227c-2f99-4c25-939f-56abf4447568	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-09-29 10:56:48.638981+00	
00000000-0000-0000-0000-000000000000	ccc32f53-5b23-47f9-bed3-f4eda354b81b	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-09-30 10:31:35.5426+00	
00000000-0000-0000-0000-000000000000	bc86bf6f-025e-479b-939e-a0a8a99ce2e2	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-09-30 11:38:02.009811+00	
00000000-0000-0000-0000-000000000000	2d6506a3-3321-4463-afee-311612f42b8e	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-09-30 11:38:02.012073+00	
00000000-0000-0000-0000-000000000000	5e4a0c36-cb69-4f6b-a6bc-2faf861d9b84	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-09-30 12:37:02.809649+00	
00000000-0000-0000-0000-000000000000	b094bd79-8cc7-4e00-80d8-a3a6577f8c05	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-09-30 12:37:02.811808+00	
00000000-0000-0000-0000-000000000000	b9289152-e46e-46a4-b87f-dff6b118bfe6	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-09-30 14:47:35.930496+00	
00000000-0000-0000-0000-000000000000	c011758b-1dca-4678-b574-fc9d74184699	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-09-30 14:47:35.933507+00	
00000000-0000-0000-0000-000000000000	601b83e3-e809-4544-bf0d-17c2babe98b1	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-01 11:31:19.509828+00	
00000000-0000-0000-0000-000000000000	f8dca21d-06e9-4dfc-8959-08f0b26ae3a5	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-01 11:31:19.524389+00	
00000000-0000-0000-0000-000000000000	c35e03db-8515-4546-83eb-e5766bf37aa6	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-01 11:33:54.418285+00	
00000000-0000-0000-0000-000000000000	1d41495d-8699-4fdc-8c47-2542209307b4	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-01 11:38:36.71486+00	
00000000-0000-0000-0000-000000000000	a9814b91-97af-4729-8b3a-6e953d380115	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-01 11:40:32.76614+00	
00000000-0000-0000-0000-000000000000	56ffedfd-f7af-4428-a8e0-c389f2893339	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-01 12:42:45.9708+00	
00000000-0000-0000-0000-000000000000	10738b37-7f84-40cc-9bf6-18e61eb2c2d1	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-01 12:45:32.358779+00	
00000000-0000-0000-0000-000000000000	4653ee52-36de-4ead-ab9e-4a3a6572797f	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-01 12:50:38.938873+00	
00000000-0000-0000-0000-000000000000	e72a4e14-05f0-462d-b370-f3ed286283b6	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-01 13:42:43.439695+00	
00000000-0000-0000-0000-000000000000	43344227-ea73-4e2d-ba3c-34e2ea5de742	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-01 13:48:36.896216+00	
00000000-0000-0000-0000-000000000000	503b9943-5900-4967-9f53-8565b156395d	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-01 13:50:06.155556+00	
00000000-0000-0000-0000-000000000000	5a16c8ea-aab2-4f1a-ad82-41fc1bae0327	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-03 22:41:22.239474+00	
00000000-0000-0000-0000-000000000000	5d3058ad-fbaf-453c-be5c-8c5387052afa	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-04 09:49:12.090965+00	
00000000-0000-0000-0000-000000000000	644dceec-14b1-4c00-9b4a-713172802e6d	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-04 09:49:12.105414+00	
00000000-0000-0000-0000-000000000000	db6896c3-b65e-4cc9-8791-b5f4dcc1ea87	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-04 09:49:15.342879+00	
00000000-0000-0000-0000-000000000000	47607ca2-b506-4eae-a5dd-7c13ba5f87fb	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-04 10:25:30.575742+00	
00000000-0000-0000-0000-000000000000	2c3eadd4-caaf-4292-8a0e-11074321d913	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-04 10:48:16.356453+00	
00000000-0000-0000-0000-000000000000	7cdf31a0-6818-4c40-ab20-af47d7a21784	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-04 10:48:16.357929+00	
00000000-0000-0000-0000-000000000000	28750130-0771-4254-af45-a274c6259fff	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-04 11:24:30.262775+00	
00000000-0000-0000-0000-000000000000	c8085397-f997-4675-b504-0cfe3a794a1c	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-04 11:24:30.264161+00	
00000000-0000-0000-0000-000000000000	dc2305c1-360d-47ff-8078-390fcde878ee	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-04 11:47:17.102868+00	
00000000-0000-0000-0000-000000000000	6230fed3-8295-4875-8b67-7236bd7415c6	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-04 11:47:17.103974+00	
00000000-0000-0000-0000-000000000000	2742836a-da77-4d39-acc1-7e185f96d079	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-04 12:23:31.250745+00	
00000000-0000-0000-0000-000000000000	a2354e2f-51b7-4afe-ab28-9fbe7cb8a9e9	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-04 12:23:31.256503+00	
00000000-0000-0000-0000-000000000000	ad452670-28f2-498f-b5e0-48e897d1b4bc	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-04 12:46:16.841826+00	
00000000-0000-0000-0000-000000000000	6ccf6646-d5d1-4e5d-a37c-586242da2632	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-04 12:46:16.844245+00	
00000000-0000-0000-0000-000000000000	86304744-9042-4351-83e0-e878e2b0f5a5	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-04 13:22:32.11872+00	
00000000-0000-0000-0000-000000000000	99b1416f-6d28-485a-84be-719f4536be80	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-04 13:22:32.121011+00	
00000000-0000-0000-0000-000000000000	0100cdf3-dcb0-4aa5-93bc-a960945eee80	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-04 13:45:16.633072+00	
00000000-0000-0000-0000-000000000000	9663412d-3a34-4a2b-8a53-f52fa007dabf	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-04 13:45:16.634869+00	
00000000-0000-0000-0000-000000000000	c51efc99-9b44-4922-8043-c324f839970b	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-04 14:21:32.757746+00	
00000000-0000-0000-0000-000000000000	33af688e-baae-4ba4-8a20-c64cd891b821	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-04 14:21:32.760617+00	
00000000-0000-0000-0000-000000000000	4e1e5b23-3370-411b-84d2-c3cf02df28bf	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-04 14:44:16.794064+00	
00000000-0000-0000-0000-000000000000	c4f20227-4531-4dcc-8263-ec7e378aedfe	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-04 14:44:16.797827+00	
00000000-0000-0000-0000-000000000000	25bb4f9a-db6c-446d-a892-741043f87c24	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-04 15:03:20.80308+00	
00000000-0000-0000-0000-000000000000	876d5085-5cff-41d9-975c-94f22f15149e	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-04 15:03:47.583448+00	
00000000-0000-0000-0000-000000000000	4c5dff9c-6790-426e-95c0-83b3fabcd9f2	{"action":"user_signedup","actor_id":"d180ee38-ca01-4021-98b6-a7a11a9de3c5","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-10-04 20:26:51.235084+00	
00000000-0000-0000-0000-000000000000	9ff90bad-6626-43be-9583-1e347ded2c4b	{"action":"login","actor_id":"d180ee38-ca01-4021-98b6-a7a11a9de3c5","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-04 20:26:51.245757+00	
00000000-0000-0000-0000-000000000000	e2696fdb-6c27-41f5-a972-a34ec62cd653	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-04 22:13:25.825599+00	
00000000-0000-0000-0000-000000000000	eed0f7f2-4729-4ab9-84c9-1d847673fca6	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-04 22:16:02.507378+00	
00000000-0000-0000-0000-000000000000	508c1019-a44f-4f5d-8ee1-3cdd9a5b883a	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-04 23:15:02.17048+00	
00000000-0000-0000-0000-000000000000	a2e90080-f86e-4f7c-9124-0c38b6d279fe	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-04 23:15:02.176386+00	
00000000-0000-0000-0000-000000000000	e1dd2765-1711-4474-8f1a-e74f6ec2ea63	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-04 23:20:41.249134+00	
00000000-0000-0000-0000-000000000000	5c4f4f4c-3585-4e37-82b7-aa867930c398	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-04 23:20:41.250791+00	
00000000-0000-0000-0000-000000000000	7b278d29-d4b4-487c-abea-600475040b3f	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-05 12:44:02.564093+00	
00000000-0000-0000-0000-000000000000	00351291-d789-49de-b695-4b44b636ab66	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-05 12:44:02.57256+00	
00000000-0000-0000-0000-000000000000	b570a958-99ce-4fe3-bda7-424982de586e	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-06 11:24:03.710316+00	
00000000-0000-0000-0000-000000000000	54250032-fb10-4142-8152-ab7080221d00	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-06 11:24:03.721767+00	
00000000-0000-0000-0000-000000000000	6d14fa90-a4c9-41a1-919e-6559dada3b09	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-06 11:26:04.786964+00	
00000000-0000-0000-0000-000000000000	f638cf51-3a49-4102-8d20-507d22b15378	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-06 11:26:17.469468+00	
00000000-0000-0000-0000-000000000000	6c826538-ae31-46fa-84bd-c136e408542a	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-06 11:41:23.194044+00	
00000000-0000-0000-0000-000000000000	dfa3f42e-3ba2-41cd-97a9-a2af240992d4	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-06 11:41:45.776201+00	
00000000-0000-0000-0000-000000000000	20eb1688-4760-47a3-83f9-9c9ea9a20311	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-06 11:43:59.559864+00	
00000000-0000-0000-0000-000000000000	f32e1e4c-e2c2-4b37-bd08-375d60e07cbc	{"action":"login","actor_id":"d180ee38-ca01-4021-98b6-a7a11a9de3c5","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-06 11:44:15.187205+00	
00000000-0000-0000-0000-000000000000	49095654-8827-40f8-8e04-c3a7fffff289	{"action":"logout","actor_id":"d180ee38-ca01-4021-98b6-a7a11a9de3c5","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-06 11:44:16.264909+00	
00000000-0000-0000-0000-000000000000	66d58b62-a0f5-4ccd-bae3-4484fe8244a5	{"action":"login","actor_id":"d180ee38-ca01-4021-98b6-a7a11a9de3c5","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-06 11:47:50.775561+00	
00000000-0000-0000-0000-000000000000	43722176-d91e-4b6e-9c4b-eb16d728e538	{"action":"logout","actor_id":"d180ee38-ca01-4021-98b6-a7a11a9de3c5","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-06 11:47:52.571888+00	
00000000-0000-0000-0000-000000000000	dc3a8ef3-14a8-4dc9-8397-1122158efb5b	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-06 11:55:34.506683+00	
00000000-0000-0000-0000-000000000000	96b6607c-9ed0-4b6c-983f-fe73017bc6f9	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-06 11:55:36.550862+00	
00000000-0000-0000-0000-000000000000	eb9cfbba-3b87-4c5e-9059-1a1ab50f075c	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-06 11:57:39.792229+00	
00000000-0000-0000-0000-000000000000	cd4168fd-56c9-463c-8cc6-84c6894911ca	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-06 11:57:40.690511+00	
00000000-0000-0000-0000-000000000000	24c385b7-b1c2-4877-b83c-1398f6ba05c8	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-06 12:03:04.309968+00	
00000000-0000-0000-0000-000000000000	0e0a2014-4ab4-4754-9744-4eb9785aa778	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-06 12:04:50.780298+00	
00000000-0000-0000-0000-000000000000	ae82fa63-74d8-4889-af8c-7426813e09bb	{"action":"login","actor_id":"d180ee38-ca01-4021-98b6-a7a11a9de3c5","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-06 12:05:10.992017+00	
00000000-0000-0000-0000-000000000000	75d9a20d-4ded-4484-ba45-1d8cd390cf44	{"action":"logout","actor_id":"d180ee38-ca01-4021-98b6-a7a11a9de3c5","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-06 12:05:11.795411+00	
00000000-0000-0000-0000-000000000000	e902a165-43ec-4e9d-aeb6-917625996537	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-06 12:08:08.397289+00	
00000000-0000-0000-0000-000000000000	2c639eb0-ba72-424e-8077-3f06ccda24f6	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-06 12:08:12.083767+00	
00000000-0000-0000-0000-000000000000	854dd539-afee-4a2d-a55a-6c1eb6433aaf	{"action":"login","actor_id":"d180ee38-ca01-4021-98b6-a7a11a9de3c5","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-06 12:10:23.444669+00	
00000000-0000-0000-0000-000000000000	f4553611-7d55-4481-b8a8-6efb327ccaab	{"action":"logout","actor_id":"d180ee38-ca01-4021-98b6-a7a11a9de3c5","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-06 12:10:24.366963+00	
00000000-0000-0000-0000-000000000000	ed318ba0-993e-4271-8117-5010f3564dbb	{"action":"login","actor_id":"d180ee38-ca01-4021-98b6-a7a11a9de3c5","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-06 12:13:49.309478+00	
00000000-0000-0000-0000-000000000000	6fc40a69-cd8a-4c3a-b545-c34d1f36b109	{"action":"logout","actor_id":"d180ee38-ca01-4021-98b6-a7a11a9de3c5","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-06 12:13:50.08246+00	
00000000-0000-0000-0000-000000000000	84af8e3e-f265-45c7-94bc-84eed6e37e0c	{"action":"login","actor_id":"d180ee38-ca01-4021-98b6-a7a11a9de3c5","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-06 12:19:37.518567+00	
00000000-0000-0000-0000-000000000000	b63352e6-33d0-4171-a6ab-9a0ee03d99f6	{"action":"logout","actor_id":"d180ee38-ca01-4021-98b6-a7a11a9de3c5","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-06 12:19:38.434991+00	
00000000-0000-0000-0000-000000000000	ef47b79a-b40a-473b-b066-4b7607f43f88	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-06 12:20:05.232939+00	
00000000-0000-0000-0000-000000000000	d9aa0b79-3f04-4bb1-abe7-4fbe734c1d99	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-06 12:21:08.161745+00	
00000000-0000-0000-0000-000000000000	b5bc641c-f743-443f-814d-2a8e3872a979	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-06 12:21:23.072804+00	
00000000-0000-0000-0000-000000000000	4c6903a4-e895-47bd-bd18-cbc0287d9e74	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-06 12:34:02.503819+00	
00000000-0000-0000-0000-000000000000	88291d1b-38e5-43bc-bf7f-e7daad43640e	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-06 12:35:11.983312+00	
00000000-0000-0000-0000-000000000000	a438d6e5-3c89-4fbd-9e91-5d228b4f21db	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-06 12:35:17.30758+00	
00000000-0000-0000-0000-000000000000	9fc8903c-658a-415b-8b0d-ba29d676dcb1	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-06 12:36:27.624249+00	
00000000-0000-0000-0000-000000000000	6be57bba-6008-4be4-aa33-dc7b683f7b8e	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-06 13:09:18.390985+00	
00000000-0000-0000-0000-000000000000	df2262d2-ff6f-44b9-9585-b2d7dadccc35	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-06 14:08:18.854408+00	
00000000-0000-0000-0000-000000000000	134d8678-7d88-43e6-bc11-1a71399136ec	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-06 14:08:18.857119+00	
00000000-0000-0000-0000-000000000000	e73205bc-0d17-4c13-9bc7-4b1b1723fc7a	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-06 14:16:56.807383+00	
00000000-0000-0000-0000-000000000000	01f510b0-2eb2-44ae-854c-4259b51ed02a	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-07 10:32:54.814558+00	
00000000-0000-0000-0000-000000000000	20cd4334-3772-4685-94b4-2ceda489e277	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-07 11:31:54.111157+00	
00000000-0000-0000-0000-000000000000	1b2dcba3-320d-4f9d-b391-cd75ef545671	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-07 11:31:54.114982+00	
00000000-0000-0000-0000-000000000000	22a698d0-ab5f-44f9-9022-6d3a95ced636	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-07 12:09:07.019526+00	
00000000-0000-0000-0000-000000000000	03b501fc-a481-463b-9885-ba903bee41f4	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-07 12:30:54.908596+00	
00000000-0000-0000-0000-000000000000	7c4d0467-9b49-40be-ac20-c74cad7cd6fd	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-07 12:30:54.910811+00	
00000000-0000-0000-0000-000000000000	9cbd7c45-c673-49ac-997e-205345a7a5c6	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-07 12:48:00.261109+00	
00000000-0000-0000-0000-000000000000	5d9fdd6d-f0f6-490c-8186-b5e822c5fc31	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-07 13:13:36.221818+00	
00000000-0000-0000-0000-000000000000	9f4c646a-d9b0-4fcb-ab1a-91ada9fd0780	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-07 13:35:15.056483+00	
00000000-0000-0000-0000-000000000000	d5556ca9-79b0-44b9-85c7-e2ee14c67346	{"action":"login","actor_id":"d180ee38-ca01-4021-98b6-a7a11a9de3c5","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-07 13:56:32.245043+00	
00000000-0000-0000-0000-000000000000	2d94503f-60e5-4083-9950-8f27abaad9a4	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-07 14:01:44.692703+00	
00000000-0000-0000-0000-000000000000	de67ac00-5917-422c-8811-70a1270759e5	{"action":"login","actor_id":"d180ee38-ca01-4021-98b6-a7a11a9de3c5","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-07 14:02:08.496913+00	
00000000-0000-0000-0000-000000000000	3c90a84b-913c-4670-9fd2-bb24a2353ef7	{"action":"login","actor_id":"d180ee38-ca01-4021-98b6-a7a11a9de3c5","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-07 14:05:34.631022+00	
00000000-0000-0000-0000-000000000000	dd017c82-2376-466e-97dd-87ec24e344b6	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-07 14:06:40.726982+00	
00000000-0000-0000-0000-000000000000	6d8e91ed-1dde-4154-bd50-2489732aba5f	{"action":"login","actor_id":"d180ee38-ca01-4021-98b6-a7a11a9de3c5","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-07 14:06:56.789126+00	
00000000-0000-0000-0000-000000000000	2bd0589d-85a6-4482-a1ff-0497b8d37cdf	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-07 14:07:25.808715+00	
00000000-0000-0000-0000-000000000000	4e5d6ac2-09e6-43f9-a10e-705273fffce5	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-07 14:18:08.891973+00	
00000000-0000-0000-0000-000000000000	c6e10e23-cee2-4e1d-8c3c-4240a43076e1	{"action":"user_repeated_signup","actor_id":"d180ee38-ca01-4021-98b6-a7a11a9de3c5","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-10-07 19:08:33.848811+00	
00000000-0000-0000-0000-000000000000	21ea4da7-1ce3-45a6-93b3-2c4ab8de8d04	{"action":"user_signedup","actor_id":"cbadc58c-de3e-400a-aac3-fb7624e006cb","actor_username":"carlos.roberto.ti.phd@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-10-07 19:18:13.384951+00	
00000000-0000-0000-0000-000000000000	5775b6e6-704c-47ca-b96c-d2ff8f28dd84	{"action":"login","actor_id":"cbadc58c-de3e-400a-aac3-fb7624e006cb","actor_username":"carlos.roberto.ti.phd@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-07 19:18:13.394948+00	
00000000-0000-0000-0000-000000000000	95d60d18-49cd-48b2-961f-0a9040125fe2	{"action":"login","actor_id":"cbadc58c-de3e-400a-aac3-fb7624e006cb","actor_username":"carlos.roberto.ti.phd@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-07 19:25:03.710338+00	
00000000-0000-0000-0000-000000000000	8968229d-a80c-4541-bf8e-7963026be6c4	{"action":"user_signedup","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-10-07 19:59:22.141398+00	
00000000-0000-0000-0000-000000000000	8ccca817-2be4-458d-a648-136a6571ba0d	{"action":"login","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-07 19:59:22.14703+00	
00000000-0000-0000-0000-000000000000	40c3675a-91f3-4000-a083-31ae7bb4e106	{"action":"login","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-07 20:00:07.89992+00	
00000000-0000-0000-0000-000000000000	40c7a45b-3e86-4eb5-b38c-0f0bb03d8f37	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-07 20:04:24.035313+00	
00000000-0000-0000-0000-000000000000	aea617df-5d3f-4dd3-a541-a8676112ef83	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-07 20:26:06.449788+00	
00000000-0000-0000-0000-000000000000	a67cad81-db9b-491e-8ec4-43da7feac6b3	{"action":"user_signedup","actor_id":"440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-10-07 20:31:26.120747+00	
00000000-0000-0000-0000-000000000000	62a7c7f5-be53-4cb7-a857-fe2c2b30af6b	{"action":"login","actor_id":"440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-07 20:31:26.131035+00	
00000000-0000-0000-0000-000000000000	70174166-1853-4f52-a94c-1822af270234	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-07 20:37:23.563132+00	
00000000-0000-0000-0000-000000000000	e7d36727-ef51-4a88-9a8a-8b7a7ec963b0	{"action":"login","actor_id":"440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-07 20:37:41.293339+00	
00000000-0000-0000-0000-000000000000	1208d14b-266c-4e2f-818b-b8dd0c460ac9	{"action":"token_refreshed","actor_id":"440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-07 21:36:42.547513+00	
00000000-0000-0000-0000-000000000000	38866c6c-ff18-42b1-94c7-e15ddaa6c246	{"action":"token_revoked","actor_id":"440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-07 21:36:42.551756+00	
00000000-0000-0000-0000-000000000000	9dabb7b1-f644-43e4-809f-67af30482e4c	{"action":"token_refreshed","actor_id":"440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-07 21:58:46.505508+00	
00000000-0000-0000-0000-000000000000	45a445d9-f89d-40a9-94a1-eed0a0fed5e8	{"action":"token_revoked","actor_id":"440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-07 21:58:46.508474+00	
00000000-0000-0000-0000-000000000000	c8361c8a-4a38-465b-b5e1-cc89198b3fb3	{"action":"token_refreshed","actor_id":"440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-07 22:35:43.167372+00	
00000000-0000-0000-0000-000000000000	95a0ab7b-0ee2-4016-a385-cd0faf40be58	{"action":"token_revoked","actor_id":"440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-07 22:35:43.171967+00	
00000000-0000-0000-0000-000000000000	24a9839a-224a-44a4-a0fa-a555dacbb2b8	{"action":"token_refreshed","actor_id":"440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-07 22:35:43.404613+00	
00000000-0000-0000-0000-000000000000	db62167e-e849-405b-a44b-5f97dee71121	{"action":"token_refreshed","actor_id":"440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-07 22:35:43.681583+00	
00000000-0000-0000-0000-000000000000	061d56fc-18b8-4a28-ba01-2ddfce72ce8a	{"action":"token_refreshed","actor_id":"440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-07 22:57:46.553816+00	
00000000-0000-0000-0000-000000000000	69cc8621-d890-45a1-83a1-fc731aaa18f8	{"action":"token_revoked","actor_id":"440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-07 22:57:46.556792+00	
00000000-0000-0000-0000-000000000000	15f99961-4890-4c09-ba3d-dc2c63c5a012	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-08 11:05:49.636104+00	
00000000-0000-0000-0000-000000000000	5b69b4c0-89f7-4047-89fd-47960650c8ab	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-08 11:31:50.185544+00	
00000000-0000-0000-0000-000000000000	52d5b2a1-70d4-497e-ba00-ff321132b7ba	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-08 12:04:50.007045+00	
00000000-0000-0000-0000-000000000000	8118d722-49ab-4ddc-8619-43371cd07ddd	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-08 12:04:50.010328+00	
00000000-0000-0000-0000-000000000000	44d993b0-596a-42c9-9002-472ee7508ad9	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-08 12:31:50.309519+00	
00000000-0000-0000-0000-000000000000	e63b062e-747a-4c0b-be6f-d847e3368ea6	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-08 12:31:50.313105+00	
00000000-0000-0000-0000-000000000000	fcf0cccb-4979-4afe-9351-6f5a1ea905ec	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-08 13:03:51.604782+00	
00000000-0000-0000-0000-000000000000	311b57aa-c717-4783-b03f-57061fd4eb6a	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-08 13:03:51.607751+00	
00000000-0000-0000-0000-000000000000	da463a9d-badd-4a76-b3a7-2d5181b51de5	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-08 13:30:51.560488+00	
00000000-0000-0000-0000-000000000000	fdf22d51-5810-4eba-935c-473df197428d	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-08 13:30:51.566807+00	
00000000-0000-0000-0000-000000000000	6aab1bf6-25b1-4717-9970-eb1d5f293f02	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-08 13:37:35.886913+00	
00000000-0000-0000-0000-000000000000	686dae63-1275-4a5a-aeab-7d59e3ea3fa9	{"action":"login","actor_id":"440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-08 13:37:53.851674+00	
00000000-0000-0000-0000-000000000000	85fb0d65-fb6b-471a-ab48-56d11325491e	{"action":"logout","actor_id":"440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-08 13:38:16.407011+00	
00000000-0000-0000-0000-000000000000	66a235d8-9ca0-47ab-9bcf-f2fc12fa18c7	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-08 13:38:51.64386+00	
00000000-0000-0000-0000-000000000000	2277296e-b7d6-4729-a10f-109b866fc9c3	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-08 14:37:51.72285+00	
00000000-0000-0000-0000-000000000000	62806350-fe01-4729-a1bc-a4f6e4c1063b	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-08 14:37:51.727737+00	
00000000-0000-0000-0000-000000000000	be6b14d8-3daa-48f0-aa42-670577b75992	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-08 14:44:55.817556+00	
00000000-0000-0000-0000-000000000000	2a02627e-562c-4264-ad4b-bc26007ac7c0	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-08 15:24:40.973116+00	
00000000-0000-0000-0000-000000000000	41c8ade8-06b4-4ef4-93fb-e38feabf5ed9	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-08 15:25:56.283876+00	
00000000-0000-0000-0000-000000000000	ff707f92-bf04-490b-bf91-f689abcf04b9	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-08 18:00:16.986682+00	
00000000-0000-0000-0000-000000000000	837d103c-4856-46f8-94d4-b5608c6f86aa	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-08 18:00:16.995154+00	
00000000-0000-0000-0000-000000000000	b0129cec-8f3c-4bc2-b7a2-c6b4b1992d78	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-08 18:04:30.55487+00	
00000000-0000-0000-0000-000000000000	2f11c93a-8b76-4cb5-b09a-8755e8163d2e	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-08 18:04:30.557575+00	
00000000-0000-0000-0000-000000000000	26528e51-0685-4c47-bd12-e621d089b02a	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-08 18:59:17.559568+00	
00000000-0000-0000-0000-000000000000	33d76e99-d5e9-4b19-880e-1bdfc6cf1d48	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-08 18:59:17.561765+00	
00000000-0000-0000-0000-000000000000	1f47f9a6-3039-4eb1-8b67-34ff97ec9586	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-08 19:03:30.381403+00	
00000000-0000-0000-0000-000000000000	37ec6bad-a099-426e-8f1a-7f509e0b516e	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-08 19:03:30.38437+00	
00000000-0000-0000-0000-000000000000	62b80877-eca9-435c-9280-a76abea8c783	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-08 19:58:18.581059+00	
00000000-0000-0000-0000-000000000000	d7941886-58d1-4189-a017-d2417ae5b109	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-08 19:58:18.585147+00	
00000000-0000-0000-0000-000000000000	4ef28b06-00a5-43e1-9caf-dc66757d17d3	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-08 20:02:31.86449+00	
00000000-0000-0000-0000-000000000000	f56026fb-0171-4f47-a7f2-a8f7af674bf6	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-08 20:02:31.867636+00	
00000000-0000-0000-0000-000000000000	717d5d3f-dc01-4f06-9d5a-815d014320bf	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-08 20:57:20.320457+00	
00000000-0000-0000-0000-000000000000	e316f75d-3f66-4ec0-8228-b0c4878f3aba	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-08 20:57:20.323493+00	
00000000-0000-0000-0000-000000000000	43861cdc-5029-4bd3-a60f-cf00970df5c1	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-08 21:01:31.954757+00	
00000000-0000-0000-0000-000000000000	d625b08c-7cb6-4006-b521-7be044e23ddd	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-08 21:01:31.960156+00	
00000000-0000-0000-0000-000000000000	2a29cb75-369e-412f-a583-9f30ceed86cc	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-09 09:19:05.490526+00	
00000000-0000-0000-0000-000000000000	f1799ea6-36c8-4b5e-afcd-f610aca4559e	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-09 09:48:39.205761+00	
00000000-0000-0000-0000-000000000000	0ee7f10a-609c-4c65-b084-eb7f90d09deb	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-09 10:17:47.516596+00	
00000000-0000-0000-0000-000000000000	0f34854e-ecda-45aa-8cda-715ebe96b72c	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-09 10:18:04.870679+00	
00000000-0000-0000-0000-000000000000	7fd8e2f7-8140-4ed2-8bcc-79fe485d32c5	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-09 10:18:04.873571+00	
00000000-0000-0000-0000-000000000000	bcb0bf30-8f5c-4982-8dfc-f960b51d2030	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-09 10:35:22.90494+00	
00000000-0000-0000-0000-000000000000	5c5cca91-2ecb-4326-be45-180301ca521b	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-09 10:37:01.147375+00	
00000000-0000-0000-0000-000000000000	404deda4-24b4-466c-9561-70b1ed452f0c	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-09 10:47:39.059859+00	
00000000-0000-0000-0000-000000000000	33b36e19-0586-4893-a53f-9114dd294569	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-09 10:47:39.062024+00	
00000000-0000-0000-0000-000000000000	4aa197e4-0a03-4155-b642-503b6b5d137e	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-09 11:09:21.607686+00	
00000000-0000-0000-0000-000000000000	d5c35c47-181a-4447-944e-856a05921483	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-09 11:46:40.284786+00	
00000000-0000-0000-0000-000000000000	3d036220-04fe-4cec-8e4f-31ae774dbe38	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-09 11:46:40.287494+00	
00000000-0000-0000-0000-000000000000	755567cd-914b-4786-b5fb-a025222cb6f3	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-09 12:29:09.450624+00	
00000000-0000-0000-0000-000000000000	08a741b2-70f6-47ac-9f18-a838026b2cca	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-09 12:29:09.452554+00	
00000000-0000-0000-0000-000000000000	72d46a0a-fa5e-46e5-a48d-b2a9d854f62f	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-09 12:45:40.469374+00	
00000000-0000-0000-0000-000000000000	ba2d5ca0-995d-4b79-a36d-cef0863cff41	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-09 12:45:40.472151+00	
00000000-0000-0000-0000-000000000000	97dbe803-62a1-45ea-8bd2-18e0d8814b7f	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-09 13:44:41.42695+00	
00000000-0000-0000-0000-000000000000	4b2a799d-62b2-4ca5-8e15-ad7f07252e9e	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-09 13:44:41.430006+00	
00000000-0000-0000-0000-000000000000	547a7924-b46a-44fa-859b-5540fb1c3cce	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-09 14:43:40.944058+00	
00000000-0000-0000-0000-000000000000	6ebaa21e-35fe-47c0-9e47-3055f6ae6ad2	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-09 14:43:40.946254+00	
00000000-0000-0000-0000-000000000000	6cf08767-1807-476e-9fd3-934a14ea8373	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-09 14:43:41.745326+00	
00000000-0000-0000-0000-000000000000	6d15a7d9-8aad-436b-87c2-41102ea80693	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-09 19:43:38.801089+00	
00000000-0000-0000-0000-000000000000	624a2d51-59c6-45d1-984d-bdf16758b555	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-09 19:43:38.805028+00	
00000000-0000-0000-0000-000000000000	4720880f-7440-4b85-ab40-3b3f6c64d870	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-09 20:03:54.377135+00	
00000000-0000-0000-0000-000000000000	d09d2644-883c-4d0e-b944-436b145dcd0a	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-09 20:03:54.395278+00	
00000000-0000-0000-0000-000000000000	959e74c1-25bc-4bc6-9741-2b485353c4ee	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-09 21:02:54.512096+00	
00000000-0000-0000-0000-000000000000	d1804dbd-434e-4938-950d-3580199b8c8e	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-09 21:02:54.516688+00	
00000000-0000-0000-0000-000000000000	4889efa8-2eb3-4309-b5a9-c247962fcd0d	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-09 22:01:55.359144+00	
00000000-0000-0000-0000-000000000000	24919d38-56c3-4d96-ad27-547d020c9735	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-09 22:01:55.360781+00	
00000000-0000-0000-0000-000000000000	077e3a28-f7f2-4672-91db-688f8761dc21	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-10 09:12:15.965199+00	
00000000-0000-0000-0000-000000000000	2a82df3a-40f4-4990-8ef8-70d6171a6d04	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-10 09:12:15.98122+00	
00000000-0000-0000-0000-000000000000	666bbc35-c8a8-4342-a5a8-bde55284afee	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-10 10:38:06.175342+00	
00000000-0000-0000-0000-000000000000	54cf0716-34d8-48d2-9edd-738a5401c9fc	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-10 10:38:06.177496+00	
00000000-0000-0000-0000-000000000000	be11e81d-cc50-4c64-9cfb-69d2a8c5b16c	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-10 11:42:47.757426+00	
00000000-0000-0000-0000-000000000000	429abb73-8baa-4f23-bcc1-08bdc0fbdec1	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-10 11:42:47.764967+00	
00000000-0000-0000-0000-000000000000	34ce482c-6b71-4411-9f2a-2a41a1406978	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-10 12:41:47.932657+00	
00000000-0000-0000-0000-000000000000	2bfbec34-8fb2-44d6-8f98-140ca290d594	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-10 12:41:47.937263+00	
00000000-0000-0000-0000-000000000000	c53b2b10-03c3-4937-955a-d27e3fad6a06	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-10 13:40:47.054919+00	
00000000-0000-0000-0000-000000000000	b6070978-d0c8-4062-8691-9cad51c3618d	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-10 13:40:47.057295+00	
00000000-0000-0000-0000-000000000000	e7ec3055-fb37-43f8-b128-c10d32fe2608	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-10 14:39:47.769129+00	
00000000-0000-0000-0000-000000000000	1904b846-0f79-45eb-a812-46f94e3d6565	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-10 14:39:47.771404+00	
00000000-0000-0000-0000-000000000000	77287d11-c380-4d28-8688-ded9ee123b6c	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-10 19:17:16.846119+00	
00000000-0000-0000-0000-000000000000	8ac8a876-b1df-4370-94cc-4c7630f0c2f1	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-10 20:11:28.702252+00	
00000000-0000-0000-0000-000000000000	b5eb423d-6a19-44c5-8224-eecbe9792b74	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-10 20:11:28.7075+00	
00000000-0000-0000-0000-000000000000	4d2369a8-20a2-4bfd-8952-03be71679c11	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-10 20:23:47.154601+00	
00000000-0000-0000-0000-000000000000	c7674baa-b3c7-42e3-aaeb-becefa914462	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-10 20:23:47.156667+00	
00000000-0000-0000-0000-000000000000	586cfdc0-369e-491a-a186-98b5ae3e9e01	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-10 21:07:59.413351+00	
00000000-0000-0000-0000-000000000000	9cd1e0c1-d241-4dae-9030-b881a08cc3d6	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-10 21:10:35.723348+00	
00000000-0000-0000-0000-000000000000	e6d6ccf3-586e-4a20-84f9-67303f6c86c6	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-10 21:29:18.007358+00	
00000000-0000-0000-0000-000000000000	2edaabda-127d-4c45-8f24-5698dfddac21	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-10 21:38:49.45421+00	
00000000-0000-0000-0000-000000000000	4efc4795-8325-4b80-a41a-3869bc69ba11	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-10 21:53:08.443418+00	
00000000-0000-0000-0000-000000000000	32d42bd7-1b12-4097-8cd8-a57b99d260d9	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-10 21:58:44.125039+00	
00000000-0000-0000-0000-000000000000	86cc26f8-cb5c-4665-9735-67b3db662f6e	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-10 22:09:35.472621+00	
00000000-0000-0000-0000-000000000000	e7cc46c3-c6dc-49c9-a81d-5b6f7687aede	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-10 22:09:35.474148+00	
00000000-0000-0000-0000-000000000000	f50c43ec-eeb2-457a-b4b3-4e4f128877b0	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-10 22:12:55.327677+00	
00000000-0000-0000-0000-000000000000	100598d8-15ae-46ad-bede-1af949183277	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-10 22:25:46.75518+00	
00000000-0000-0000-0000-000000000000	c7a06ab4-5019-4ac2-9e41-6ad8706ce0f5	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-10 22:37:00.297021+00	
00000000-0000-0000-0000-000000000000	91181c9e-6b7b-4acd-ab7f-82a4a4e018a1	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-10 22:45:23.688841+00	
00000000-0000-0000-0000-000000000000	1ade3fc0-0b00-43b6-b4a9-4c77f47554f0	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-10 22:55:49.929463+00	
00000000-0000-0000-0000-000000000000	14a9a689-e9df-4ee1-8d5b-fe247115f7ee	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-10 23:06:56.37537+00	
00000000-0000-0000-0000-000000000000	d295e2f3-3dec-4e59-8f86-07488eccfe89	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-10 23:08:35.367196+00	
00000000-0000-0000-0000-000000000000	a8e5cdca-d0cc-4120-a8e9-4fec9853cddb	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-10 23:08:35.368642+00	
00000000-0000-0000-0000-000000000000	f75a3ad6-e170-4c67-9f86-5312b6d76a56	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-10 23:10:21.048208+00	
00000000-0000-0000-0000-000000000000	beb84021-a701-4a7f-ad98-5e688af2dabe	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-10 23:13:02.692561+00	
00000000-0000-0000-0000-000000000000	57f744eb-d5a5-4dff-884b-a92e1a930008	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-10 23:17:02.241337+00	
00000000-0000-0000-0000-000000000000	282383e2-dd9e-471a-8d2c-b26ab899c431	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-10 23:20:35.49002+00	
00000000-0000-0000-0000-000000000000	84fd9e0f-1c55-40fc-992b-3727a0e71f0c	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-10 23:28:23.761853+00	
00000000-0000-0000-0000-000000000000	494f55c8-0580-4d62-822f-b6fccb16f38a	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-10 23:39:53.358479+00	
00000000-0000-0000-0000-000000000000	4a099009-7d57-424f-80dd-28327bd3bb50	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-10 23:43:20.687855+00	
00000000-0000-0000-0000-000000000000	2e774afd-3c4e-4357-bb82-9ce43b85a0ae	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-10 23:46:11.29458+00	
00000000-0000-0000-0000-000000000000	14c4e0fd-2887-4a8a-a7fe-905017fc98d6	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-10 23:53:17.947152+00	
00000000-0000-0000-0000-000000000000	34da52e7-ae48-4625-9ef4-878cfcc0d67b	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-10 23:59:25.57699+00	
00000000-0000-0000-0000-000000000000	3cc0fff7-fd75-41b8-a698-5c1681ccfab9	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-11 00:04:56.402961+00	
00000000-0000-0000-0000-000000000000	892ef7fb-7ca4-4c77-9f4a-31a50fbdbc76	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-11 10:45:38.649846+00	
00000000-0000-0000-0000-000000000000	dd2525b0-1c15-4f3d-baaf-216b71f97ef5	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-11 10:45:38.66637+00	
00000000-0000-0000-0000-000000000000	ba0b765a-4804-4292-a226-82cf0e7875f5	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-11 10:47:11.797523+00	
00000000-0000-0000-0000-000000000000	0970edf7-d497-498c-82ef-ecd01ea5f330	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-11 10:47:30.648871+00	
00000000-0000-0000-0000-000000000000	e958cdfa-8c5e-43b2-999a-377aae657a6b	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-11 10:47:33.523733+00	
00000000-0000-0000-0000-000000000000	4486a51c-db95-4b2c-b45f-a6124070b2c1	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-11 10:47:34.841998+00	
00000000-0000-0000-0000-000000000000	0c0dc465-5a32-4642-a96a-a7f502dbc6e8	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-11 10:47:35.906386+00	
00000000-0000-0000-0000-000000000000	ef1233f5-d28a-4147-9355-179623fad9ce	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-11 10:47:36.947742+00	
00000000-0000-0000-0000-000000000000	2591bf33-e9f3-470c-a3e6-9e7fb848eff2	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-11 10:47:55.686326+00	
00000000-0000-0000-0000-000000000000	777b8783-a544-47be-b98b-1ac1d6e6cac2	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-11 10:54:37.551823+00	
00000000-0000-0000-0000-000000000000	d227684e-649c-4d91-aa6c-d86b280fc557	{"action":"user_signedup","actor_id":"2c55478c-78d1-4d1f-ae4a-12072d933119","actor_username":"joaojose@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-10-11 10:55:12.706645+00	
00000000-0000-0000-0000-000000000000	7d11a9b9-7c27-4663-9a30-f03bac3e578f	{"action":"login","actor_id":"2c55478c-78d1-4d1f-ae4a-12072d933119","actor_username":"joaojose@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-11 10:55:12.712605+00	
00000000-0000-0000-0000-000000000000	e51517dc-9cb3-45c8-90fc-2248ae274d2c	{"action":"login","actor_id":"2c55478c-78d1-4d1f-ae4a-12072d933119","actor_username":"joaojose@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-11 10:55:37.989708+00	
00000000-0000-0000-0000-000000000000	56e39a97-2b0c-497f-9c7d-de73ff0df8e8	{"action":"logout","actor_id":"2c55478c-78d1-4d1f-ae4a-12072d933119","actor_username":"joaojose@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-11 10:55:41.776949+00	
00000000-0000-0000-0000-000000000000	bed3aa98-b101-4929-95e4-d20239b68d88	{"action":"login","actor_id":"2c55478c-78d1-4d1f-ae4a-12072d933119","actor_username":"joaojose@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-11 10:57:17.933028+00	
00000000-0000-0000-0000-000000000000	7938d288-f4c4-496f-b41e-b494992da400	{"action":"logout","actor_id":"2c55478c-78d1-4d1f-ae4a-12072d933119","actor_username":"joaojose@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-11 10:57:20.317401+00	
00000000-0000-0000-0000-000000000000	659e41ef-0cac-43a1-a901-bef1ecb86c65	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-11 11:18:48.3243+00	
00000000-0000-0000-0000-000000000000	306873d6-9812-4cf6-b573-d31a2325d8cd	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-11 13:07:30.121913+00	
00000000-0000-0000-0000-000000000000	62a19996-b9ba-4200-81c6-3020514ae28b	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-11 14:02:54.836528+00	
00000000-0000-0000-0000-000000000000	9726a7f2-355f-4950-95f5-ae8d3ef5118e	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-11 14:06:30.590965+00	
00000000-0000-0000-0000-000000000000	dd9a870d-a802-431d-9bb2-b0f2d8e1ffd3	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-11 14:06:30.592568+00	
00000000-0000-0000-0000-000000000000	aef3a746-6cc0-4617-9ae7-e4c2d93ef2ff	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-11 14:07:14.669948+00	
00000000-0000-0000-0000-000000000000	1b8022ad-a00d-498e-8c72-4883ee48f302	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-11 14:10:47.436399+00	
00000000-0000-0000-0000-000000000000	74ab8822-45b4-494e-b845-643073ff42ec	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-11 14:17:09.466911+00	
00000000-0000-0000-0000-000000000000	839e5afb-6e4a-4328-80f2-ac2cecb466f9	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-11 14:19:11.571419+00	
00000000-0000-0000-0000-000000000000	173ccb95-ca70-4aaf-a44a-4065688c0262	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-11 14:23:21.733528+00	
00000000-0000-0000-0000-000000000000	786e7286-0e0b-452a-a3c0-18971480e428	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-11 14:26:30.85187+00	
00000000-0000-0000-0000-000000000000	da5e1922-15d8-432a-92a5-628b92633c91	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-11 14:38:03.357953+00	
00000000-0000-0000-0000-000000000000	b3797b37-0bc5-4cb0-844e-7f8e0575d243	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-11 14:42:14.73454+00	
00000000-0000-0000-0000-000000000000	d20e1668-f8a8-47da-b275-469fc1214277	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-11 14:47:11.062413+00	
00000000-0000-0000-0000-000000000000	c05782a5-9a6b-4075-b667-27ec9ec73731	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-11 14:58:49.554217+00	
00000000-0000-0000-0000-000000000000	7de6a720-a04e-4691-9957-c145271e0a1c	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-11 15:00:41.144436+00	
00000000-0000-0000-0000-000000000000	30cf3aa1-be31-4335-92bc-a9d843590acb	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-11 15:04:32.48841+00	
00000000-0000-0000-0000-000000000000	f0633f5c-6878-45c9-86c6-d4e8bc74e13c	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-11 15:10:15.998006+00	
00000000-0000-0000-0000-000000000000	78cddefd-bc9a-4302-99fb-31b7903d7d9a	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-11 15:14:31.814298+00	
00000000-0000-0000-0000-000000000000	e80e9ee7-1cc3-4ce1-b5aa-8787fff8797f	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-11 20:06:40.99351+00	
00000000-0000-0000-0000-000000000000	a92b1de8-7de7-48a4-9850-71692f2a035a	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-11 20:15:17.866012+00	
00000000-0000-0000-0000-000000000000	0cb1e28d-9825-4df2-8c71-7cbf7ba1b05f	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-14 13:30:15.925736+00	
00000000-0000-0000-0000-000000000000	82d38771-68e0-489b-802d-7e6cc6666a9d	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-14 14:29:15.171543+00	
00000000-0000-0000-0000-000000000000	11520ea7-7101-4627-9dc0-35ee79d5a085	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-14 14:29:15.178826+00	
00000000-0000-0000-0000-000000000000	d95b133f-cf51-40d5-be0a-d49017ddf88e	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-14 14:29:15.202785+00	
00000000-0000-0000-0000-000000000000	0bbdfcaf-ccea-4b0b-950e-75e1bcc798d4	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-14 18:32:48.663447+00	
00000000-0000-0000-0000-000000000000	0be96f99-fb3a-4c73-88f7-e380531eb9ed	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-14 19:31:49.98765+00	
00000000-0000-0000-0000-000000000000	bc30f641-e103-4067-bc79-9662342f5949	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-14 19:31:49.994009+00	
00000000-0000-0000-0000-000000000000	264a16d2-139c-46e7-a8e0-3d5215456542	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-14 21:05:22.293435+00	
00000000-0000-0000-0000-000000000000	4e396315-ed89-49a1-b274-2752bc641c1b	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-14 21:30:51.039338+00	
00000000-0000-0000-0000-000000000000	61fef0e0-1163-466c-a3f2-8a34a6118792	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-14 22:29:52.310725+00	
00000000-0000-0000-0000-000000000000	3ad8e1c4-e862-49fc-b4ad-6dd46538b8ca	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-14 22:29:52.314602+00	
00000000-0000-0000-0000-000000000000	0de835bf-f7c1-46df-afd6-3b780b30713b	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-14 22:56:21.607458+00	
00000000-0000-0000-0000-000000000000	b25b4028-4efc-4e66-9e5e-b1b3301f6efd	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-14 22:56:21.610296+00	
00000000-0000-0000-0000-000000000000	064e1283-79e5-4c3b-9887-88bc35fc2841	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-15 10:59:43.476824+00	
00000000-0000-0000-0000-000000000000	025b6e1f-e85f-4a0c-92df-80b7f8cbeaf6	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-15 10:59:43.491709+00	
00000000-0000-0000-0000-000000000000	e510102a-3482-4441-b457-3cb14cff81e2	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-15 11:20:46.753956+00	
00000000-0000-0000-0000-000000000000	25424f45-9fab-47d8-b502-c98c6060ddbe	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-15 11:20:46.756927+00	
00000000-0000-0000-0000-000000000000	0ab30a2c-87b3-4c0c-a89b-843d66b96848	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-15 11:20:46.902759+00	
00000000-0000-0000-0000-000000000000	a544cb9f-fbac-415e-9e81-66ddc51339b9	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-15 18:36:03.952954+00	
00000000-0000-0000-0000-000000000000	220b12b1-4421-49bc-ac8d-0bb309a9a34f	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-15 18:36:03.956069+00	
00000000-0000-0000-0000-000000000000	7c92c23f-ea79-4382-9b1b-c27e893fb657	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-15 19:42:27.905465+00	
00000000-0000-0000-0000-000000000000	2c8981ae-38bd-4101-a449-2ec2a5126df7	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-15 19:42:27.908086+00	
00000000-0000-0000-0000-000000000000	31158c0f-a8dc-4270-a787-2d9b6ebb3efd	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-15 20:43:50.738225+00	
00000000-0000-0000-0000-000000000000	f7870af8-63a1-4320-8423-d5e4ce21f851	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-15 20:43:50.741419+00	
00000000-0000-0000-0000-000000000000	b19b48cc-4beb-4cd8-b6b6-1c868669b6d4	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-15 20:52:01.898975+00	
00000000-0000-0000-0000-000000000000	d85cc756-30c8-4264-b942-1a83d7f98df2	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-16 10:46:24.654342+00	
00000000-0000-0000-0000-000000000000	021cbbf1-1e42-45e6-ba96-7dc63f5276b0	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-16 10:46:24.666488+00	
00000000-0000-0000-0000-000000000000	239daf01-32d7-489f-9e0e-921320fc6d07	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-16 12:27:42.406496+00	
00000000-0000-0000-0000-000000000000	e3bea639-7b83-4363-b73e-5227cfcdcf24	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-16 12:27:42.411392+00	
00000000-0000-0000-0000-000000000000	fcf2dbac-80da-4dd2-8b31-364c4b8d00d9	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-16 15:05:03.052546+00	
00000000-0000-0000-0000-000000000000	ebcd4625-cd58-4168-a591-8f4107bcfa45	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-16 15:05:03.058497+00	
00000000-0000-0000-0000-000000000000	3a0800f0-c5f0-4a48-91fb-6dcbd831a925	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-16 18:21:21.525279+00	
00000000-0000-0000-0000-000000000000	126dedf3-7427-406d-83ec-ce588bc6733f	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-16 18:21:21.53023+00	
00000000-0000-0000-0000-000000000000	c6a6b954-2910-4874-b58b-9546c4f88d73	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-16 22:07:55.735988+00	
00000000-0000-0000-0000-000000000000	68543520-239f-4569-bf53-4854409df100	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-17 10:00:04.907826+00	
00000000-0000-0000-0000-000000000000	f87b462d-651e-4b20-8fe0-d4173a988860	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-17 10:04:39.800817+00	
00000000-0000-0000-0000-000000000000	e03e1423-554a-40de-9a24-cff1c5f5cc14	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-17 10:04:39.805295+00	
00000000-0000-0000-0000-000000000000	9ad88cfe-8db0-4eb4-873a-698cad824c24	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-17 10:45:37.373537+00	
00000000-0000-0000-0000-000000000000	ec28f8ee-f5b4-4be4-b438-02b1d44e5c05	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-17 11:28:19.262128+00	
00000000-0000-0000-0000-000000000000	1bf09f79-6f60-406c-92b7-22f63b4c2b69	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-17 13:42:01.416513+00	
00000000-0000-0000-0000-000000000000	f72b1134-e146-4b04-83c2-ef2b579c17d6	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-17 13:42:01.420236+00	
00000000-0000-0000-0000-000000000000	e08edfbf-fd40-4152-befb-9fb4e938c920	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-17 17:38:04.41596+00	
00000000-0000-0000-0000-000000000000	bbc0c711-c132-473e-8a79-20b50e7e1f80	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-17 17:38:04.417905+00	
00000000-0000-0000-0000-000000000000	27eb9a38-0abd-4c08-b82f-c5dd8cab3bec	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-17 19:25:41.9078+00	
00000000-0000-0000-0000-000000000000	4781c89f-ed6d-48af-9c51-914f558e49a0	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-17 19:25:41.920962+00	
00000000-0000-0000-0000-000000000000	f0c3806d-731b-45eb-876f-6e43adac6553	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-17 19:31:36.473639+00	
00000000-0000-0000-0000-000000000000	9cce1005-0f0c-45bc-a77e-71a5f68ee46f	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-17 19:31:36.475677+00	
00000000-0000-0000-0000-000000000000	06a7ba89-c13c-4c98-a69f-369d82454a76	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-17 19:40:06.102214+00	
00000000-0000-0000-0000-000000000000	7d8848fd-6c80-4aec-b9a1-b3750c913cae	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-17 19:50:28.242854+00	
00000000-0000-0000-0000-000000000000	da20c25c-56d0-4c9b-b566-f6b4100605d5	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-17 19:55:54.297883+00	
00000000-0000-0000-0000-000000000000	ed3f6143-46db-47ed-8bdb-2a7b0481ba85	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-17 19:58:39.041984+00	
00000000-0000-0000-0000-000000000000	521b0852-bcea-486a-8f20-e197b3604b40	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-17 20:03:39.41544+00	
00000000-0000-0000-0000-000000000000	6ef85efb-4bbb-4682-90e6-6ba577fdc60f	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-17 20:06:34.218778+00	
00000000-0000-0000-0000-000000000000	49d0d3da-7e9d-43c0-be16-f63a14957f01	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-17 20:06:34.220226+00	
00000000-0000-0000-0000-000000000000	20d0feb8-f1fb-45d4-8bf8-1a6d156c9c4a	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-19 14:00:45.949026+00	
00000000-0000-0000-0000-000000000000	869c9f4b-c611-477d-8fe2-20d581ee4585	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-19 14:00:45.958346+00	
00000000-0000-0000-0000-000000000000	90f04b5c-c4f6-41a6-a589-e03876b466e5	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-19 15:37:34.659974+00	
00000000-0000-0000-0000-000000000000	8882eda9-7749-47ae-ad03-80175a95ce0a	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-19 15:37:34.663987+00	
00000000-0000-0000-0000-000000000000	28ba883d-169c-4d95-8e32-f84b00e95668	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-19 16:36:34.511704+00	
00000000-0000-0000-0000-000000000000	b482284e-43e0-4124-9e7c-d890ca14d51b	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-19 16:36:34.516019+00	
00000000-0000-0000-0000-000000000000	79860532-025f-47f3-8b9d-d36ffb2f71f5	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-19 20:20:58.469493+00	
00000000-0000-0000-0000-000000000000	e08d9599-d255-47bb-b675-f91df19ff0a9	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-19 20:20:58.477781+00	
00000000-0000-0000-0000-000000000000	51db05e8-2fea-40b3-a008-8001dca4c38e	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-19 21:19:58.922983+00	
00000000-0000-0000-0000-000000000000	500eeb8e-3b53-4925-81e6-479e1d9e591c	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-19 21:19:58.925706+00	
00000000-0000-0000-0000-000000000000	a34190f3-9c8a-44aa-8c31-21b26f52e1be	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-19 22:49:29.705372+00	
00000000-0000-0000-0000-000000000000	ffa108c7-2de4-404f-b724-f297f4ca4701	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-19 22:49:29.710557+00	
00000000-0000-0000-0000-000000000000	b8ee3e4e-914a-4709-9a5e-724d68ebc6e1	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-19 22:49:29.745378+00	
00000000-0000-0000-0000-000000000000	19e97aa9-1356-4a7c-bf3f-698ebaaf8019	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-20 09:24:43.575044+00	
00000000-0000-0000-0000-000000000000	d36c2a9a-a363-4b72-9b41-3619b546e93b	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-20 09:24:43.585435+00	
00000000-0000-0000-0000-000000000000	14401712-e2b6-43fc-92d7-4a01067f0427	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-20 12:03:00.790776+00	
00000000-0000-0000-0000-000000000000	abee4051-c965-4bdb-bf64-99c0f4b2a9f8	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-20 12:03:00.796282+00	
00000000-0000-0000-0000-000000000000	d3ad1774-dc98-455c-823d-7c23f6566be9	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-21 09:44:28.125136+00	
00000000-0000-0000-0000-000000000000	23963534-da82-4ad4-8281-89c82c8ce887	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-21 09:44:28.136286+00	
00000000-0000-0000-0000-000000000000	2a6f0677-54ef-4fd2-a5bc-4b65792b6341	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-21 10:06:43.941738+00	
00000000-0000-0000-0000-000000000000	9f30dfa4-7bb8-407d-9cc4-62e5b7c1b499	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-21 10:06:43.943599+00	
00000000-0000-0000-0000-000000000000	c13b4ffe-2f7a-45c6-a7b3-4748946f33d9	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-21 11:07:57.482094+00	
00000000-0000-0000-0000-000000000000	0bcc9611-b01f-4259-8b93-8ec7653077ac	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-21 11:07:57.485752+00	
00000000-0000-0000-0000-000000000000	21a89ae4-70e5-49bd-a12a-343df0d2297e	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-21 11:09:30.367959+00	
00000000-0000-0000-0000-000000000000	5cac9412-69a1-423d-967e-7ee2c0be8780	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-21 11:09:30.368853+00	
00000000-0000-0000-0000-000000000000	fc07c417-b06b-4b93-a10b-2ddc68a3eb19	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-21 12:08:31.542157+00	
00000000-0000-0000-0000-000000000000	a8d29fe1-f57b-4217-93a1-97807f03f4c7	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-21 12:08:31.54457+00	
00000000-0000-0000-0000-000000000000	a7f96a9f-d802-4425-9e49-da9e8868671b	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-21 13:07:30.912802+00	
00000000-0000-0000-0000-000000000000	ce9e8d28-d624-4092-a584-aecd387d0885	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-21 13:07:30.916532+00	
00000000-0000-0000-0000-000000000000	be3fb3bd-57e3-44f5-af6c-5d5bb4055035	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-21 14:06:30.595808+00	
00000000-0000-0000-0000-000000000000	816700ad-0566-40f3-a6b7-4d0f739a24d1	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-21 14:06:30.598888+00	
00000000-0000-0000-0000-000000000000	570e9291-6376-44e2-92f1-b1e1f7ec71fe	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-21 15:05:32.307288+00	
00000000-0000-0000-0000-000000000000	e420de0b-4941-45e9-93c6-c5fc7bb26927	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-21 15:05:32.313026+00	
00000000-0000-0000-0000-000000000000	7cb08254-d7e2-4ed5-8151-e055ab95b50a	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-21 15:20:36.271967+00	
00000000-0000-0000-0000-000000000000	8552919f-29bb-4ae5-b7ba-6da09bed32cf	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-21 15:20:36.276196+00	
00000000-0000-0000-0000-000000000000	dd468149-fb85-4b34-8f30-3298b89ef1d1	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-21 19:31:17.020279+00	
00000000-0000-0000-0000-000000000000	936f7659-24d9-4ab8-9650-7581f47d1135	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-21 20:31:20.237306+00	
00000000-0000-0000-0000-000000000000	7d40bac0-ebca-4054-ac70-cf01cb37d32a	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-21 20:31:20.242514+00	
00000000-0000-0000-0000-000000000000	18adafd1-3b54-43be-b75f-73e7dd8f0029	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-21 21:37:34.136808+00	
00000000-0000-0000-0000-000000000000	56170f5a-3406-4dbd-b3d6-66d3ce73160c	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-21 21:37:34.149819+00	
00000000-0000-0000-0000-000000000000	6c0b2834-3d87-419b-a1c1-10683df2db05	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-22 11:57:55.564042+00	
00000000-0000-0000-0000-000000000000	20a1605c-aeff-4dc9-a0a4-9bf47efe482d	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-22 11:57:55.577507+00	
00000000-0000-0000-0000-000000000000	ae8cfd56-d971-4b5c-a9c5-6f1df6322e9f	{"action":"login","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-22 12:17:33.744321+00	
00000000-0000-0000-0000-000000000000	ece41a3d-73cb-401c-8125-5426c01c79ca	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-22 12:57:57.924242+00	
00000000-0000-0000-0000-000000000000	7558c593-10ee-4143-8543-a681b081595c	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-22 12:57:57.927591+00	
00000000-0000-0000-0000-000000000000	aa9a18cf-5d6d-454b-a3cf-df5ad37df512	{"action":"login","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-22 12:59:09.569876+00	
00000000-0000-0000-0000-000000000000	b8c3d558-d525-4de2-9d55-8efa2f4669b8	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-22 13:00:19.095264+00	
00000000-0000-0000-0000-000000000000	a0d3b0d3-b65f-4b25-bc94-cf9b616784e8	{"action":"logout","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-22 13:02:22.62028+00	
00000000-0000-0000-0000-000000000000	fdd0d34f-6e9a-4859-a29c-69892a95cc02	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-22 19:39:27.939954+00	
00000000-0000-0000-0000-000000000000	0884c005-faa7-4fae-81e8-5588abae3be3	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-22 19:39:27.942627+00	
00000000-0000-0000-0000-000000000000	b220782c-ee0a-49c9-a134-12acc9163a70	{"action":"login","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-22 19:51:04.729142+00	
00000000-0000-0000-0000-000000000000	cabad0b7-201d-4ac6-970e-837b685cef21	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-22 20:12:45.419992+00	
00000000-0000-0000-0000-000000000000	8a34d2bb-7ec4-432d-aee6-f17a661449eb	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-22 20:12:45.422953+00	
00000000-0000-0000-0000-000000000000	d56711ea-8816-4d1d-8d12-d9571f6a6a21	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-22 21:33:38.294541+00	
00000000-0000-0000-0000-000000000000	4139f544-1099-450e-a5ca-6279462e484a	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-22 21:33:38.304356+00	
00000000-0000-0000-0000-000000000000	4f9b2ab2-e017-4c13-b80e-7e586c55eae7	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-23 08:47:18.035293+00	
00000000-0000-0000-0000-000000000000	75aa4132-c0a8-4e5a-84c9-187a6afe506b	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-23 10:55:31.809379+00	
00000000-0000-0000-0000-000000000000	87b190d3-0656-4b35-a1f5-b112a8edcdd6	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-23 10:55:31.814755+00	
00000000-0000-0000-0000-000000000000	6d2aa741-d197-437b-a134-a4fac25db0da	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-23 11:17:20.690775+00	
00000000-0000-0000-0000-000000000000	506cb648-607e-4fce-8e0e-2333f6833828	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-23 12:16:28.172068+00	
00000000-0000-0000-0000-000000000000	40dba8fc-a8a8-4be0-8ff1-261b9788b4ef	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-23 12:16:28.175392+00	
00000000-0000-0000-0000-000000000000	0c995556-b6cf-4bfb-9182-f0747a64d762	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-23 12:20:04.901568+00	
00000000-0000-0000-0000-000000000000	c674e49a-3820-4b69-ba82-69d87102a73d	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-23 12:20:04.906519+00	
00000000-0000-0000-0000-000000000000	d94f310d-fcb5-4bf5-abae-8b4f487479fe	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-23 12:25:09.864778+00	
00000000-0000-0000-0000-000000000000	4a5b083c-a58a-4b64-a142-21f4124d9452	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-23 12:25:09.867335+00	
00000000-0000-0000-0000-000000000000	edc94462-357f-43d0-904a-af4b76db5f57	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-23 13:26:12.249335+00	
00000000-0000-0000-0000-000000000000	352b33ab-4902-47b9-8709-0a6b9fa2a0ac	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-23 13:26:12.262596+00	
00000000-0000-0000-0000-000000000000	b2ff124a-7bd2-4728-8e04-6381c5842478	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-23 15:47:36.458389+00	
00000000-0000-0000-0000-000000000000	b5c38ad1-9704-4a2a-8450-3aec0f5bcddc	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-23 15:47:36.46061+00	
00000000-0000-0000-0000-000000000000	c206ad7b-45f5-427d-aba0-3aa9e01c70fb	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-23 15:47:36.809467+00	
00000000-0000-0000-0000-000000000000	abc66812-5806-410f-aa93-532303021183	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-23 18:27:44.234269+00	
00000000-0000-0000-0000-000000000000	a33a99e2-853a-4c6b-9fbb-3b18a0b0ece6	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-23 18:27:44.236768+00	
00000000-0000-0000-0000-000000000000	9abeeb32-284a-4e5c-a595-c98e197f9add	{"action":"login","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-23 20:02:20.641904+00	
00000000-0000-0000-0000-000000000000	1c670da8-8c3d-4742-bb4e-4855372d3545	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-24 09:54:11.434721+00	
00000000-0000-0000-0000-000000000000	3f0345f6-ad38-402f-8bac-4a04c8a6c0c0	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-24 09:54:11.448455+00	
00000000-0000-0000-0000-000000000000	2740875f-7c99-4396-8510-8342079ed2eb	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-24 10:25:58.960394+00	
00000000-0000-0000-0000-000000000000	556df9b1-1ae0-4d7f-bbad-4cf3d4e8a01f	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-24 10:30:26.036926+00	
00000000-0000-0000-0000-000000000000	cca6e933-65ad-4e70-8965-44cacc96acf4	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-24 10:30:26.038825+00	
00000000-0000-0000-0000-000000000000	9646b906-bfb5-4ac5-b954-d155d5cec76e	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-24 11:29:26.945431+00	
00000000-0000-0000-0000-000000000000	f8cc08c4-7e6f-43e7-99fd-054823e2365a	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-24 11:29:26.947461+00	
00000000-0000-0000-0000-000000000000	8f05a758-5b76-4621-b728-8d1349bbea31	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-24 12:30:14.025753+00	
00000000-0000-0000-0000-000000000000	26e7d850-0513-4ebd-810d-6e794ced4b06	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-24 12:30:14.031524+00	
00000000-0000-0000-0000-000000000000	e0709cfa-9307-46f0-9b63-4396b5425127	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-24 13:30:13.369564+00	
00000000-0000-0000-0000-000000000000	1f29406d-9443-4c91-86cf-d668ef7dd46c	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-24 13:30:13.373369+00	
00000000-0000-0000-0000-000000000000	28eeb701-c09a-4f9d-8cb9-3c7aa88daa74	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-24 14:41:56.470875+00	
00000000-0000-0000-0000-000000000000	212c3b5f-467e-4147-9c66-7cab033584e5	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-24 14:41:56.473839+00	
00000000-0000-0000-0000-000000000000	822531fe-4852-4ab7-be6c-8d8dbc7bfea8	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-24 18:58:38.901667+00	
00000000-0000-0000-0000-000000000000	57462025-d661-44bf-adf7-6e57b02150aa	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-24 18:58:38.907482+00	
00000000-0000-0000-0000-000000000000	56547729-99f1-4f14-8535-93582a3087f0	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-24 19:57:39.750155+00	
00000000-0000-0000-0000-000000000000	3f1aa2f6-f1b6-4f54-99b3-b5f747a5a3e1	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-24 19:57:39.765895+00	
00000000-0000-0000-0000-000000000000	34e65e32-cdf5-4bad-9907-fe20acf6b5dc	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-24 20:56:39.392656+00	
00000000-0000-0000-0000-000000000000	4090bb83-5a93-4bd7-8e6c-d24e7f8b88ff	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-24 20:56:39.393674+00	
00000000-0000-0000-0000-000000000000	90fde6dc-de0f-4cad-b85f-c2e7257f9b4c	{"action":"token_refreshed","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-24 21:41:08.385918+00	
00000000-0000-0000-0000-000000000000	fc8048ce-c7d2-4efa-a8bb-d22cc6c61b3d	{"action":"token_revoked","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-24 21:41:08.388373+00	
00000000-0000-0000-0000-000000000000	0da4efd6-74c1-43c3-bf84-ec051f224817	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-24 21:55:39.865201+00	
00000000-0000-0000-0000-000000000000	986c2f98-a542-456f-a785-359016b3601d	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-24 21:55:39.867866+00	
00000000-0000-0000-0000-000000000000	6df9835f-5fb5-4c0a-a277-12d1244a5e63	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-24 23:53:42.276859+00	
00000000-0000-0000-0000-000000000000	a882d274-9cf5-430a-a78d-ef5eb6b98b73	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-24 23:53:42.279111+00	
00000000-0000-0000-0000-000000000000	ce716fc3-9624-46e4-bb26-753a5045a391	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-25 12:02:32.229348+00	
00000000-0000-0000-0000-000000000000	569c7823-1869-499e-b618-9db68383873d	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-25 12:02:32.247643+00	
00000000-0000-0000-0000-000000000000	c8938046-3346-4aa2-96f3-23f60ae58461	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-25 13:01:32.775199+00	
00000000-0000-0000-0000-000000000000	078c5b2f-893f-46b0-8790-b2a2d86d65c8	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-25 13:01:32.782238+00	
00000000-0000-0000-0000-000000000000	635c7710-5fc5-4da2-a19a-a42a46ff6ff0	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-25 14:00:32.689868+00	
00000000-0000-0000-0000-000000000000	b679cb06-5568-40a8-a8b0-ef322d6656df	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-25 14:00:32.696479+00	
00000000-0000-0000-0000-000000000000	beeaacf1-06f6-458d-b88c-cf50e4fcd2b9	{"action":"token_refreshed","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-25 20:30:54.187559+00	
00000000-0000-0000-0000-000000000000	d4b2a40d-25e8-411c-84a1-a4761bde888d	{"action":"token_revoked","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-25 20:30:54.195769+00	
00000000-0000-0000-0000-000000000000	15cfe32a-9c86-441a-8608-d7f945dfa076	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-29 10:21:56.941858+00	
00000000-0000-0000-0000-000000000000	1948b35b-60e0-4d29-ad58-57c9668232aa	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-29 10:21:56.958137+00	
00000000-0000-0000-0000-000000000000	c667db77-53f2-4ba4-8bbc-445eb91ca90f	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-29 11:20:57.047265+00	
00000000-0000-0000-0000-000000000000	40dfd482-a632-411b-8e47-3392d1b65388	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-29 11:20:57.058185+00	
00000000-0000-0000-0000-000000000000	f80db66c-9d55-430d-be46-785f0b976583	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-29 12:19:58.178821+00	
00000000-0000-0000-0000-000000000000	66de7951-7096-4f45-b2bb-ca574c180003	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-29 12:19:58.181553+00	
00000000-0000-0000-0000-000000000000	45be1861-d74b-4a01-8de7-ac4baed315be	{"action":"login","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-29 12:36:27.3772+00	
00000000-0000-0000-0000-000000000000	1144e992-5d4f-4ab9-9536-28a0156d9a1d	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-29 13:20:16.619267+00	
00000000-0000-0000-0000-000000000000	99a48e1c-18d8-420b-a09d-c743d01e568f	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-29 13:20:16.621577+00	
00000000-0000-0000-0000-000000000000	342a941a-b965-4534-9aa6-94cbe5b662cf	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-29 13:22:50.864319+00	
00000000-0000-0000-0000-000000000000	0170e375-ccb8-4679-bb22-ab023bac3827	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-29 13:22:50.865731+00	
00000000-0000-0000-0000-000000000000	511b1399-1fe0-4ea0-95f3-efa9c9fbfc35	{"action":"token_refreshed","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-29 13:35:28.180128+00	
00000000-0000-0000-0000-000000000000	e64fe1aa-5c83-462d-9f74-fdc7ddfb9a77	{"action":"token_revoked","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-29 13:35:28.193767+00	
00000000-0000-0000-0000-000000000000	c9ed4d06-1cf1-4a1d-98a3-eecca63dc5e0	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-29 14:20:23.791816+00	
00000000-0000-0000-0000-000000000000	099b977a-b0e7-48f1-ab9c-fb1de20236b8	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-29 14:20:23.795909+00	
00000000-0000-0000-0000-000000000000	04e01156-4e37-4747-9b06-725b22180cc6	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-29 18:07:51.509703+00	
00000000-0000-0000-0000-000000000000	71e6a63f-6b10-4d93-979e-17f50044dea5	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-29 18:07:51.51963+00	
00000000-0000-0000-0000-000000000000	788bc08c-469d-4dce-a211-42828206d261	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-29 19:09:05.968582+00	
00000000-0000-0000-0000-000000000000	a6f6e6c8-188d-4fe8-b20a-3340e8955c40	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-29 19:09:05.976423+00	
00000000-0000-0000-0000-000000000000	5004c8b5-c64c-41f1-a1a0-cfe40236ce0c	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-29 20:08:07.271002+00	
00000000-0000-0000-0000-000000000000	408e2c53-4297-4834-a5b4-c1fe7c565d6e	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-29 20:08:07.273681+00	
00000000-0000-0000-0000-000000000000	8589f3fa-1ab6-43d5-b374-6f0d97e0e664	{"action":"login","actor_id":"440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-30 09:56:44.453379+00	
00000000-0000-0000-0000-000000000000	c92a8dd4-d8e8-4f21-ab75-7de8355ad688	{"action":"token_refreshed","actor_id":"440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-30 10:55:46.125961+00	
00000000-0000-0000-0000-000000000000	1087d530-217f-44d7-bddc-eb0bdb3b5ba6	{"action":"token_revoked","actor_id":"440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-30 10:55:46.138287+00	
00000000-0000-0000-0000-000000000000	cc918756-59aa-4bd0-bd46-9f8fc0ef46ca	{"action":"token_refreshed","actor_id":"440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-30 11:54:46.239994+00	
00000000-0000-0000-0000-000000000000	73394b72-1b6b-42cf-829c-1cf1c397f603	{"action":"token_revoked","actor_id":"440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-30 11:54:46.241089+00	
00000000-0000-0000-0000-000000000000	214520e4-b56b-42c7-860f-e0841224c769	{"action":"token_refreshed","actor_id":"440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-30 11:54:47.220639+00	
00000000-0000-0000-0000-000000000000	82c7bcc1-4713-4c4d-b4bf-b04a2653d099	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-30 12:17:20.066832+00	
00000000-0000-0000-0000-000000000000	fcf72bea-c6d6-4077-b2d2-6e61cb79ff4e	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-30 12:17:20.069744+00	
00000000-0000-0000-0000-000000000000	e5852e32-457f-4a30-8d37-015d3946b738	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-30 13:16:21.623202+00	
00000000-0000-0000-0000-000000000000	4ab71278-8490-4dbc-ab40-5816ba01584b	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-30 13:16:21.625756+00	
00000000-0000-0000-0000-000000000000	1ccaa479-acb4-4933-8600-7c5fc106600c	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-30 14:15:22.151381+00	
00000000-0000-0000-0000-000000000000	a957e6d5-5ddd-4c1d-9b6d-e761326068e1	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-30 14:15:22.154666+00	
00000000-0000-0000-0000-000000000000	da1f6eab-faae-4db3-8e08-8e96cf9051ed	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-30 19:23:07.345882+00	
00000000-0000-0000-0000-000000000000	d029cf61-727b-4b51-93fd-e3b1349ccdad	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-30 19:23:07.357325+00	
00000000-0000-0000-0000-000000000000	96f50b8f-51f5-491d-90b5-57c7b180e893	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-31 10:34:13.173863+00	
00000000-0000-0000-0000-000000000000	4c947530-dbeb-4c54-a448-55a022850155	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-31 10:34:13.200129+00	
00000000-0000-0000-0000-000000000000	b67ecaac-ef9d-4c35-8775-d6cf48df52da	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-31 11:33:14.463989+00	
00000000-0000-0000-0000-000000000000	215d8f03-ca8c-49b8-9dcb-8fa89b3e869e	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-31 11:33:14.466509+00	
00000000-0000-0000-0000-000000000000	513735f9-931b-47ba-b505-a9a9cfabd6a9	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-31 12:32:15.493436+00	
00000000-0000-0000-0000-000000000000	551f14e1-52fe-4836-ac39-38e0b86e3b19	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-31 12:32:15.496325+00	
00000000-0000-0000-0000-000000000000	f255d52b-c424-4d5e-a770-d4eec20aa349	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-31 13:31:16.541673+00	
00000000-0000-0000-0000-000000000000	3133c790-e5d4-4a3d-8a87-ba27403c9fcf	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-31 13:31:16.54467+00	
00000000-0000-0000-0000-000000000000	aeb7edf0-52f1-4043-8e12-be718ecbc275	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-31 14:38:39.218307+00	
00000000-0000-0000-0000-000000000000	57de70ed-5012-47d9-a6db-26cbe3f14b6f	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-31 14:38:39.222634+00	
00000000-0000-0000-0000-000000000000	ab831534-25a5-404b-8352-ff15935d5f39	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-10-31 18:15:52.656131+00	
00000000-0000-0000-0000-000000000000	cbc04cf3-390c-47a2-ac04-ed633dabd0d7	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-31 18:19:49.790579+00	
00000000-0000-0000-0000-000000000000	a108854c-75c1-4a76-a748-a034983eb73f	{"action":"token_refreshed","actor_id":"440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-31 18:24:37.520511+00	
00000000-0000-0000-0000-000000000000	1c9cbbe5-6781-4e05-b5b7-2c26302f97ca	{"action":"token_revoked","actor_id":"440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-10-31 18:24:37.527323+00	
00000000-0000-0000-0000-000000000000	9df54e36-3776-4046-bacb-387ed54a38b7	{"action":"logout","actor_id":"440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8","actor_username":"carlos.roberto.devops@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-10-31 18:24:43.382336+00	
00000000-0000-0000-0000-000000000000	95c5aea4-e5fb-4cdb-8cfe-91e2cb1cdbf8	{"action":"login","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-01 11:38:31.329872+00	
00000000-0000-0000-0000-000000000000	07a60919-446c-469b-8996-2de4087c3910	{"action":"token_refreshed","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-01 12:37:31.668314+00	
00000000-0000-0000-0000-000000000000	0b41f4c2-5190-4096-a08d-5a13b0f4baa2	{"action":"token_revoked","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-01 12:37:31.675688+00	
00000000-0000-0000-0000-000000000000	6d0c27c4-6781-435a-a6da-b4f71ed3878a	{"action":"token_refreshed","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-01 13:36:31.695978+00	
00000000-0000-0000-0000-000000000000	45ea4057-e242-4a94-8a52-2a5f2c5c1721	{"action":"token_revoked","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-01 13:36:31.698533+00	
00000000-0000-0000-0000-000000000000	310c086a-2408-42c9-ba59-c2bc25461bdb	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-02 09:41:18.043831+00	
00000000-0000-0000-0000-000000000000	1f1b2dab-dc43-421b-8c21-82e26451569e	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-11-02 09:43:21.762381+00	
00000000-0000-0000-0000-000000000000	14db4b2f-3549-4437-ba93-b73dc77aeffc	{"action":"user_signedup","actor_id":"7bf56a2f-8b26-44e0-8ce4-242cd59ce105","actor_username":"carlos.roberto.ti.dr@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-11-02 09:45:37.54025+00	
00000000-0000-0000-0000-000000000000	95819696-fb41-432f-8db6-5039873fb12e	{"action":"login","actor_id":"7bf56a2f-8b26-44e0-8ce4-242cd59ce105","actor_username":"carlos.roberto.ti.dr@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-02 09:45:37.55577+00	
00000000-0000-0000-0000-000000000000	850eac7b-e974-4e92-8ea0-156e7b97ced3	{"action":"logout","actor_id":"7bf56a2f-8b26-44e0-8ce4-242cd59ce105","actor_username":"carlos.roberto.ti.dr@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-11-02 09:48:38.007804+00	
00000000-0000-0000-0000-000000000000	2380ce0b-e531-4a22-b727-c327e31c82ed	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-02 09:48:58.729375+00	
00000000-0000-0000-0000-000000000000	46b96cba-8321-48b6-ae58-a7b8a136278a	{"action":"user_repeated_signup","actor_id":"7bf56a2f-8b26-44e0-8ce4-242cd59ce105","actor_username":"carlos.roberto.ti.dr@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-11-02 10:32:41.81496+00	
00000000-0000-0000-0000-000000000000	303f860a-1679-4289-ac88-48a1a4ca2bae	{"action":"user_signedup","actor_id":"6fdd341a-52fd-4797-9445-beb42e9edcba","actor_username":"carlos.roberto.ufal.gov.br@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-11-02 10:33:24.210374+00	
00000000-0000-0000-0000-000000000000	155ceac5-ff84-4bcd-aa11-2d9fa31f893d	{"action":"login","actor_id":"6fdd341a-52fd-4797-9445-beb42e9edcba","actor_username":"carlos.roberto.ufal.gov.br@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-02 10:33:24.21346+00	
00000000-0000-0000-0000-000000000000	134ea6ac-4134-4937-97d5-98f995d1589e	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"carlos.roberto.ufal.gov.br@gmail.com","user_id":"6fdd341a-52fd-4797-9445-beb42e9edcba","user_phone":""}}	2024-11-02 10:35:04.030967+00	
00000000-0000-0000-0000-000000000000	0156241c-5ffa-403f-8c97-20e89d2ff55c	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"carlos.roberto.ti.dr@gmail.com","user_id":"7bf56a2f-8b26-44e0-8ce4-242cd59ce105","user_phone":""}}	2024-11-02 10:35:13.679891+00	
00000000-0000-0000-0000-000000000000	9b8fe208-111e-4b07-990f-0ee69ecafc98	{"action":"user_signedup","actor_id":"3e6de0bf-a62f-4337-b327-811bed21de38","actor_username":"carlos.roberto.ti.dr@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-11-02 10:44:36.965519+00	
00000000-0000-0000-0000-000000000000	37438459-3290-4b86-a1bf-43d230d8addb	{"action":"login","actor_id":"3e6de0bf-a62f-4337-b327-811bed21de38","actor_username":"carlos.roberto.ti.dr@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-02 10:44:36.975617+00	
00000000-0000-0000-0000-000000000000	640102e2-81eb-4712-8aca-fe8f5f8a5a75	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"carlos.roberto.ti.dr@gmail.com","user_id":"3e6de0bf-a62f-4337-b327-811bed21de38","user_phone":""}}	2024-11-02 10:45:18.702198+00	
00000000-0000-0000-0000-000000000000	43cbf882-94b0-4a43-a47a-c2cf8dcc12a6	{"action":"user_signedup","actor_id":"495db7a6-cb44-4f1b-94c0-82329f12468b","actor_username":"carlos.roberto.ti.dr@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-11-02 11:33:43.705412+00	
00000000-0000-0000-0000-000000000000	65cbd798-5912-48e8-8b7a-52fc9664cbe8	{"action":"login","actor_id":"495db7a6-cb44-4f1b-94c0-82329f12468b","actor_username":"carlos.roberto.ti.dr@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-02 11:33:43.71018+00	
00000000-0000-0000-0000-000000000000	ab792409-1d9f-49f8-8d30-bce9c34f6e83	{"action":"logout","actor_id":"495db7a6-cb44-4f1b-94c0-82329f12468b","actor_username":"carlos.roberto.ti.dr@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-11-02 11:51:44.982096+00	
00000000-0000-0000-0000-000000000000	1f865047-b8bb-4c9a-a80a-5d8d2ddfd021	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-02 11:52:01.248753+00	
00000000-0000-0000-0000-000000000000	358e37c8-ebaf-4059-a784-de5eeb0e5d86	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"carlos.roberto.ti.dr@gmail.com","user_id":"495db7a6-cb44-4f1b-94c0-82329f12468b","user_phone":""}}	2024-11-02 12:25:12.229018+00	
00000000-0000-0000-0000-000000000000	71463b22-d8c2-4fb2-afdd-19d0a649e8cb	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-02 13:10:32.08471+00	
00000000-0000-0000-0000-000000000000	9665675c-4fd4-4f1d-bc1b-4d3bf142d494	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-02 13:10:32.087241+00	
00000000-0000-0000-0000-000000000000	0fa0fef9-7394-433a-8e0e-9a94b3f82d23	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-11-02 13:11:11.416549+00	
00000000-0000-0000-0000-000000000000	991b23bb-229b-4218-a95c-70dd114bda94	{"action":"user_signedup","actor_id":"acde2e88-e77f-4323-944c-0f4fd438daa9","actor_username":"carlos.roberto.ti.dr@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-11-02 13:11:47.137903+00	
00000000-0000-0000-0000-000000000000	4efed375-7985-4671-88c0-28f620fb8e1a	{"action":"login","actor_id":"acde2e88-e77f-4323-944c-0f4fd438daa9","actor_username":"carlos.roberto.ti.dr@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-02 13:11:47.14199+00	
00000000-0000-0000-0000-000000000000	7a7d895e-3023-44a7-85e9-d2dae38f42de	{"action":"logout","actor_id":"acde2e88-e77f-4323-944c-0f4fd438daa9","actor_username":"carlos.roberto.ti.dr@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-11-02 13:11:48.315085+00	
00000000-0000-0000-0000-000000000000	b7a1c108-dca6-4c1b-9dd7-f62206190c1d	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"carlos.roberto.ti.dr@gmail.com","user_id":"acde2e88-e77f-4323-944c-0f4fd438daa9","user_phone":""}}	2024-11-02 13:17:29.610136+00	
00000000-0000-0000-0000-000000000000	0b8688c8-2ca9-4cfc-877a-6d6fcc84662c	{"action":"user_signedup","actor_id":"3ba44702-59e6-4ef9-8de4-64c6ba70175d","actor_username":"carlos.roberto.ti.dr@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-11-02 13:25:22.174275+00	
00000000-0000-0000-0000-000000000000	94579c47-2041-4145-9d60-99c5c32be1c5	{"action":"login","actor_id":"3ba44702-59e6-4ef9-8de4-64c6ba70175d","actor_username":"carlos.roberto.ti.dr@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-02 13:25:22.179176+00	
00000000-0000-0000-0000-000000000000	6ee7b61c-ff13-42ba-9a82-f776e3f1a7d2	{"action":"logout","actor_id":"3ba44702-59e6-4ef9-8de4-64c6ba70175d","actor_username":"carlos.roberto.ti.dr@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-11-02 14:05:43.829414+00	
00000000-0000-0000-0000-000000000000	44d6ce82-fb83-4ecc-8fc1-8511f8f361a0	{"action":"user_repeated_signup","actor_id":"3ba44702-59e6-4ef9-8de4-64c6ba70175d","actor_username":"carlos.roberto.ti.dr@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-11-02 20:49:14.372367+00	
00000000-0000-0000-0000-000000000000	3ce4e485-4801-4aee-8474-efadc41ee0f4	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"carlos.roberto.ti.dr@gmail.com","user_id":"3ba44702-59e6-4ef9-8de4-64c6ba70175d","user_phone":""}}	2024-11-02 20:50:37.418111+00	
00000000-0000-0000-0000-000000000000	e21b984c-c7b5-4588-a7da-3f7f04ffffb4	{"action":"user_signedup","actor_id":"10449460-bb00-49c2-bea8-50d5488d5620","actor_username":"carlos.roberto.ti.d@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-11-02 20:51:05.834943+00	
00000000-0000-0000-0000-000000000000	c8659782-8935-4846-8443-c00583599c78	{"action":"login","actor_id":"10449460-bb00-49c2-bea8-50d5488d5620","actor_username":"carlos.roberto.ti.d@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-02 20:51:05.838829+00	
00000000-0000-0000-0000-000000000000	9ff12064-3df8-4dcd-a7e5-b54976aea3e2	{"action":"logout","actor_id":"10449460-bb00-49c2-bea8-50d5488d5620","actor_username":"carlos.roberto.ti.d@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-11-02 20:51:21.226125+00	
00000000-0000-0000-0000-000000000000	7b26ce36-5f11-4d3d-9a19-a03f8a35e1ec	{"action":"user_repeated_signup","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-11-02 21:14:12.315878+00	
00000000-0000-0000-0000-000000000000	ac02ae61-cf02-456b-910a-eceeda462c88	{"action":"user_repeated_signup","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-11-02 21:14:20.417725+00	
00000000-0000-0000-0000-000000000000	6cefa913-d7c3-4822-a651-8c1b12585860	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"carlos.roberto.ti.d@gmail.com","user_id":"10449460-bb00-49c2-bea8-50d5488d5620","user_phone":""}}	2024-11-02 22:04:25.168802+00	
00000000-0000-0000-0000-000000000000	c033ec04-65af-4bac-8542-01339c0700fc	{"action":"user_signedup","actor_id":"426b149c-8829-413b-a7ea-62f2f603fab9","actor_username":"carlos.roberto.ti.dr@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-11-02 22:08:18.813721+00	
00000000-0000-0000-0000-000000000000	f69eb1db-84e8-40d3-b6d8-b444d55fbf48	{"action":"login","actor_id":"426b149c-8829-413b-a7ea-62f2f603fab9","actor_username":"carlos.roberto.ti.dr@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-02 22:08:18.81925+00	
00000000-0000-0000-0000-000000000000	29372b58-7f4e-423d-aa8d-7d67c807bb04	{"action":"logout","actor_id":"426b149c-8829-413b-a7ea-62f2f603fab9","actor_username":"carlos.roberto.ti.dr@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-11-02 22:08:25.979283+00	
00000000-0000-0000-0000-000000000000	74ed259d-55f1-420a-b3d0-9e72cdfec83b	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-02 22:09:29.440959+00	
00000000-0000-0000-0000-000000000000	ed9479f0-1b36-4dd3-bef9-b56d013b380f	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-11-02 22:11:10.61629+00	
00000000-0000-0000-0000-000000000000	fa903b9e-22f4-453e-8451-f9c3c8f58cf0	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-03 10:43:05.663657+00	
00000000-0000-0000-0000-000000000000	cf2ed7bc-0550-4740-a2e1-71c8203b9fc8	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-03 11:42:12.359469+00	
00000000-0000-0000-0000-000000000000	299485f3-f908-4c04-bd0e-fc23a4e86c0e	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-03 11:42:12.369448+00	
00000000-0000-0000-0000-000000000000	2d354a07-1736-4795-92cc-b9b6f50b797e	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-03 11:42:12.391945+00	
00000000-0000-0000-0000-000000000000	7fbd66ce-cb74-421d-8102-c207b72c590a	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-03 12:41:18.261233+00	
00000000-0000-0000-0000-000000000000	7fb7c28e-d412-42a1-9905-e851fece8605	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-03 12:41:18.263189+00	
00000000-0000-0000-0000-000000000000	6ec3eb31-2368-4894-a758-91b7ce85e7c2	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-03 13:43:14.001136+00	
00000000-0000-0000-0000-000000000000	51168c69-5164-4d78-a948-8b43c0c394f8	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-03 13:43:14.003613+00	
00000000-0000-0000-0000-000000000000	4b56e8c7-5b4a-415f-9b26-489741a06a12	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-11-03 13:45:29.457079+00	
00000000-0000-0000-0000-000000000000	8c3aa9b2-7d30-43dd-974a-bc0892fd5aca	{"action":"user_repeated_signup","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-11-03 19:26:03.151692+00	
00000000-0000-0000-0000-000000000000	5bda399a-4d2b-49c5-bee2-a68d89655d40	{"action":"user_signedup","actor_id":"0bb6fdf0-cf4e-4819-8511-783e05f40cb2","actor_username":"carlos.roberto.ti.phd@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-11-03 19:26:57.946509+00	
00000000-0000-0000-0000-000000000000	978c411f-54f1-41da-b327-43b4f505a983	{"action":"login","actor_id":"0bb6fdf0-cf4e-4819-8511-783e05f40cb2","actor_username":"carlos.roberto.ti.phd@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-03 19:26:57.952993+00	
00000000-0000-0000-0000-000000000000	72de8035-3961-4c10-9212-032f435da13f	{"action":"logout","actor_id":"0bb6fdf0-cf4e-4819-8511-783e05f40cb2","actor_username":"carlos.roberto.ti.phd@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-11-03 19:27:02.911605+00	
00000000-0000-0000-0000-000000000000	9d2b9176-715d-4c14-93b6-c796604e3792	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-03 19:27:23.370943+00	
00000000-0000-0000-0000-000000000000	f02aef5a-2606-42e0-82c8-d0e793e10efb	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-03 22:59:36.703402+00	
00000000-0000-0000-0000-000000000000	c515eeb1-5b68-4a0c-a235-970ad27b0d2b	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-03 22:59:36.706775+00	
00000000-0000-0000-0000-000000000000	030da103-bc98-4535-a8cf-1f3a8e6da819	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-03 22:59:36.748175+00	
00000000-0000-0000-0000-000000000000	585bc222-5f78-433e-aa20-9910d87c14d0	{"action":"user_signedup","actor_id":"aaf972d2-3bfa-48b1-822c-208e4c12ac44","actor_username":"danilorlsa@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-11-04 13:36:32.223829+00	
00000000-0000-0000-0000-000000000000	7f4b150b-af0f-4ff1-a9ed-784dcfde24ec	{"action":"login","actor_id":"aaf972d2-3bfa-48b1-822c-208e4c12ac44","actor_username":"danilorlsa@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-04 13:36:32.249374+00	
00000000-0000-0000-0000-000000000000	0e2d7068-ec27-4068-a266-38f1c500a990	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-04 13:59:06.766446+00	
00000000-0000-0000-0000-000000000000	71369230-5e9c-454e-a70f-8310b61bb299	{"action":"token_refreshed","actor_id":"aaf972d2-3bfa-48b1-822c-208e4c12ac44","actor_username":"danilorlsa@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-04 14:35:32.307356+00	
00000000-0000-0000-0000-000000000000	dd0106e6-f57b-43d3-94c6-5e208b34d37b	{"action":"token_revoked","actor_id":"aaf972d2-3bfa-48b1-822c-208e4c12ac44","actor_username":"danilorlsa@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-04 14:35:32.31322+00	
00000000-0000-0000-0000-000000000000	84442a31-a5c0-4d2c-b480-de1ed04a8ade	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-05 11:09:34.14905+00	
00000000-0000-0000-0000-000000000000	f8c54bc8-1b17-46b2-9f10-1a0153e51bed	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-11-05 11:14:34.098968+00	
00000000-0000-0000-0000-000000000000	c10939dc-2e69-43bb-a95c-af26fe627c4c	{"action":"user_signedup","actor_id":"65ef475c-beff-46a3-b81b-ad117a5e0be9","actor_username":"djalmatorquato@hotmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-11-05 11:33:13.050753+00	
00000000-0000-0000-0000-000000000000	9f17ff87-e6c6-4648-9407-ba3b9e8fe9cc	{"action":"login","actor_id":"65ef475c-beff-46a3-b81b-ad117a5e0be9","actor_username":"djalmatorquato@hotmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-05 11:33:13.061501+00	
00000000-0000-0000-0000-000000000000	3d4c6fc7-56d9-4bcc-be9f-b1d0a2e0ef5c	{"action":"logout","actor_id":"65ef475c-beff-46a3-b81b-ad117a5e0be9","actor_username":"djalmatorquato@hotmail.com","actor_via_sso":false,"log_type":"account"}	2024-11-05 11:33:20.671482+00	
00000000-0000-0000-0000-000000000000	65453802-b1a4-4216-af83-6a21c91acff6	{"action":"login","actor_id":"65ef475c-beff-46a3-b81b-ad117a5e0be9","actor_username":"djalmatorquato@hotmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-05 11:33:56.110697+00	
00000000-0000-0000-0000-000000000000	1f2f9b84-91d9-4343-8ae7-2ca91d47c76a	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-05 11:35:14.292413+00	
00000000-0000-0000-0000-000000000000	886da20c-c783-4463-897d-ad8c414dbd02	{"action":"login","actor_id":"65ef475c-beff-46a3-b81b-ad117a5e0be9","actor_username":"djalmatorquato@hotmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-05 11:37:53.695984+00	
00000000-0000-0000-0000-000000000000	8aa9591a-5048-4932-bf26-34a70298b49d	{"action":"user_signedup","actor_id":"8642fe0a-1c60-4873-a874-d91409a11165","actor_username":"genival.silva@seds.al.gov.br","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-11-05 13:26:12.430659+00	
00000000-0000-0000-0000-000000000000	5d359878-881d-49dc-867d-f9bc0b02417b	{"action":"login","actor_id":"8642fe0a-1c60-4873-a874-d91409a11165","actor_username":"genival.silva@seds.al.gov.br","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-05 13:26:12.437496+00	
00000000-0000-0000-0000-000000000000	5ca05fa0-7dad-42f2-8e42-09f6ecc2ce0d	{"action":"logout","actor_id":"8642fe0a-1c60-4873-a874-d91409a11165","actor_username":"genival.silva@seds.al.gov.br","actor_via_sso":false,"log_type":"account"}	2024-11-05 13:26:18.027638+00	
00000000-0000-0000-0000-000000000000	e158ea87-207a-4677-a413-ae6c3bb4be59	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-05 13:27:58.455778+00	
00000000-0000-0000-0000-000000000000	378c524c-bfa1-4f5f-93ad-a13c68edfc50	{"action":"login","actor_id":"8642fe0a-1c60-4873-a874-d91409a11165","actor_username":"genival.silva@seds.al.gov.br","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-05 13:31:25.801935+00	
00000000-0000-0000-0000-000000000000	dc1ae683-a429-4b1a-9cb4-0ac3c664e224	{"action":"logout","actor_id":"8642fe0a-1c60-4873-a874-d91409a11165","actor_username":"genival.silva@seds.al.gov.br","actor_via_sso":false,"log_type":"account"}	2024-11-05 13:39:50.980303+00	
00000000-0000-0000-0000-000000000000	b109ce25-c34d-4565-bf75-cb18457e132c	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-05 14:39:48.373516+00	
00000000-0000-0000-0000-000000000000	108bd1b6-1b7a-4116-8210-89d7a5ae8278	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-05 14:39:48.375688+00	
00000000-0000-0000-0000-000000000000	c459d653-a878-41b8-974a-b6108d2ddad6	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-05 18:43:03.710634+00	
00000000-0000-0000-0000-000000000000	fd018c5a-d7f2-4112-b579-85e16996136f	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-05 18:43:03.723791+00	
00000000-0000-0000-0000-000000000000	2bbe96f5-9942-4177-95e6-492b91fb1e33	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-05 19:43:02.531847+00	
00000000-0000-0000-0000-000000000000	59d87870-caf9-4e92-a4e4-66afb89a4124	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-05 19:43:02.533746+00	
00000000-0000-0000-0000-000000000000	ad21334f-2234-42a6-a85e-b1ed4fd18853	{"action":"login","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-05 19:47:29.04938+00	
00000000-0000-0000-0000-000000000000	58cc364f-9542-4599-a934-4591f1ccd452	{"action":"login","actor_id":"8642fe0a-1c60-4873-a874-d91409a11165","actor_username":"genival.silva@seds.al.gov.br","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-05 20:01:39.074237+00	
00000000-0000-0000-0000-000000000000	cd3c15da-655f-4c8c-b221-13398f0fb31a	{"action":"logout","actor_id":"8642fe0a-1c60-4873-a874-d91409a11165","actor_username":"genival.silva@seds.al.gov.br","actor_via_sso":false,"log_type":"account"}	2024-11-05 20:06:53.170775+00	
00000000-0000-0000-0000-000000000000	e87f6650-5992-4471-b473-5269a149f269	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-11-05 20:11:48.655684+00	
00000000-0000-0000-0000-000000000000	51fa898c-1359-4bcb-bba9-a5e07a509ccc	{"action":"logout","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"account"}	2024-11-05 20:22:38.847005+00	
00000000-0000-0000-0000-000000000000	82d77fe0-fd1f-4e89-8ed2-b62bcda4e9c8	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-06 10:34:24.807461+00	
00000000-0000-0000-0000-000000000000	602d0c79-6acb-4735-bdbd-a04675de5652	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-06 11:33:24.457975+00	
00000000-0000-0000-0000-000000000000	fa59e3fb-dbee-4f78-aee1-0bb64738cc3c	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-06 11:33:24.473386+00	
00000000-0000-0000-0000-000000000000	b8b772a1-ec7c-4c2a-b66e-774fb1545969	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"carlos.roberto.ti.phd@gmail.com","user_id":"0bb6fdf0-cf4e-4819-8511-783e05f40cb2","user_phone":""}}	2024-11-06 13:38:36.831252+00	
00000000-0000-0000-0000-000000000000	0333b983-86f2-4584-ab6e-040b9ffeaf9d	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"carlos.roberto.devops@gmail.com","user_id":"440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8","user_phone":""}}	2024-11-06 13:38:45.496477+00	
00000000-0000-0000-0000-000000000000	3783c6c5-f85e-4fb7-adff-d792fabd0585	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"carlos.roberto.ti.dr@gmail.com","user_id":"426b149c-8829-413b-a7ea-62f2f603fab9","user_phone":""}}	2024-11-06 13:39:05.163117+00	
00000000-0000-0000-0000-000000000000	1492d4e2-3a38-482a-bfee-21ed3c6ba118	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"joaojose@gmail.com","user_id":"2c55478c-78d1-4d1f-ae4a-12072d933119","user_phone":""}}	2024-11-06 13:39:41.84274+00	
00000000-0000-0000-0000-000000000000	36c78548-e555-4781-bf67-3203fe84e014	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-06 14:17:52.461607+00	
00000000-0000-0000-0000-000000000000	911e75be-1885-4999-983b-18090b0f8b9b	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-06 14:17:52.464505+00	
00000000-0000-0000-0000-000000000000	1b389043-b900-4e63-9d62-eb250b975bbe	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-06 18:01:33.762413+00	
00000000-0000-0000-0000-000000000000	0ecb7751-87ec-40be-9e45-5621069365b9	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-06 18:01:33.79123+00	
00000000-0000-0000-0000-000000000000	70a43d91-9234-4799-9f45-fa5020ee01e2	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-11-06 18:04:51.818366+00	
00000000-0000-0000-0000-000000000000	47c0b8b8-78ed-4166-b0cd-b1889d802b0e	{"action":"user_signedup","actor_id":"fe8199d7-c809-4d51-896f-75626d52f935","actor_username":"carlos.roberto.ti.dr@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-11-06 18:06:20.368825+00	
00000000-0000-0000-0000-000000000000	adb354d9-6962-4947-9515-271b96c0d4a3	{"action":"login","actor_id":"fe8199d7-c809-4d51-896f-75626d52f935","actor_username":"carlos.roberto.ti.dr@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-06 18:06:20.377716+00	
00000000-0000-0000-0000-000000000000	95906734-c0cb-4c8d-bd21-9989dd9d3524	{"action":"logout","actor_id":"fe8199d7-c809-4d51-896f-75626d52f935","actor_username":"carlos.roberto.ti.dr@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-11-06 18:06:27.7433+00	
00000000-0000-0000-0000-000000000000	253052cd-30b9-42b1-8d90-4864a5e53640	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-06 18:06:47.386023+00	
00000000-0000-0000-0000-000000000000	9d9fae0c-514f-423a-838c-aa16b1482cc4	{"action":"login","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-06 20:28:31.945191+00	
00000000-0000-0000-0000-000000000000	1f517b7c-9d67-4642-ad60-3ac08a9ad9a1	{"action":"token_refreshed","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-06 21:27:33.104701+00	
00000000-0000-0000-0000-000000000000	58224070-5b08-446b-9374-554881d4daf5	{"action":"token_revoked","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-06 21:27:33.108891+00	
00000000-0000-0000-0000-000000000000	0dc47ce6-855b-419b-814f-d809190c4e77	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-07 11:28:33.426458+00	
00000000-0000-0000-0000-000000000000	33f2fa54-3dfe-4dd7-b1e4-4398d763c91a	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-07 13:04:33.802702+00	
00000000-0000-0000-0000-000000000000	afb0dfbb-26db-40f4-aea1-97fd7aae51e7	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-07 13:04:33.854866+00	
00000000-0000-0000-0000-000000000000	00d5c5f9-1a67-40fb-959a-77a44ad56596	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-07 14:03:34.349178+00	
00000000-0000-0000-0000-000000000000	9f27e438-187d-424b-9610-27ac4f57ccdf	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-07 14:03:34.351664+00	
00000000-0000-0000-0000-000000000000	656b421a-3cd3-4e2e-8258-f1b588a11be4	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-07 16:56:36.017864+00	
00000000-0000-0000-0000-000000000000	0a7671be-1c2d-4227-9f71-3aee68d5a653	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-07 16:56:36.025363+00	
00000000-0000-0000-0000-000000000000	11c39b82-5898-491e-aff7-01bebe7c098d	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-07 18:30:15.037341+00	
00000000-0000-0000-0000-000000000000	7d6c3c19-17aa-4ed2-b698-3051ac246050	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-07 18:30:15.039415+00	
00000000-0000-0000-0000-000000000000	037f21a3-6150-4256-b8fb-1410fac059ec	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-07 19:50:50.327131+00	
00000000-0000-0000-0000-000000000000	ed795f97-e435-440b-bd08-728de5b357aa	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-07 19:50:50.329118+00	
00000000-0000-0000-0000-000000000000	3f3ed2b9-64c8-4cec-b0be-b393a5855181	{"action":"token_refreshed","actor_id":"aaf972d2-3bfa-48b1-822c-208e4c12ac44","actor_username":"danilorlsa@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-07 20:22:43.124347+00	
00000000-0000-0000-0000-000000000000	60b493ce-24c6-4d5f-a96e-75bdc477445d	{"action":"token_revoked","actor_id":"aaf972d2-3bfa-48b1-822c-208e4c12ac44","actor_username":"danilorlsa@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-07 20:22:43.128168+00	
00000000-0000-0000-0000-000000000000	f61d04a4-881c-44a2-84d8-f9bde5657abd	{"action":"token_refreshed","actor_id":"aaf972d2-3bfa-48b1-822c-208e4c12ac44","actor_username":"danilorlsa@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-07 20:22:43.156631+00	
00000000-0000-0000-0000-000000000000	1c3ef06b-6644-4a86-aa81-c5576e8a6ad4	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-07 20:53:25.343459+00	
00000000-0000-0000-0000-000000000000	f98a493f-140e-4813-be2f-2a4b63d60d24	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-07 20:53:25.351574+00	
00000000-0000-0000-0000-000000000000	2fe48e9e-614d-4a83-bc3e-3cb3ee3a96b1	{"action":"login","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-07 20:57:33.007228+00	
00000000-0000-0000-0000-000000000000	7d752da8-9612-46bd-a08c-8d34fb09409f	{"action":"logout","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"account"}	2024-11-07 20:58:27.729961+00	
00000000-0000-0000-0000-000000000000	5941e93c-eddf-440a-ae8f-af57d055bb64	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-11-07 21:41:29.547588+00	
00000000-0000-0000-0000-000000000000	53bc224a-ccab-458b-9e05-477ce82dfb8d	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-08 11:58:06.787447+00	
00000000-0000-0000-0000-000000000000	ec21e19a-5dfa-40bd-aba0-193e2cf9313a	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-08 12:57:07.062591+00	
00000000-0000-0000-0000-000000000000	bb1bd081-883c-48c2-af74-d4717c83be9e	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-08 12:57:07.066212+00	
00000000-0000-0000-0000-000000000000	87ea8368-52da-4981-a402-9426f27f4103	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-08 13:56:07.49026+00	
00000000-0000-0000-0000-000000000000	74f65f97-50e3-45ea-9815-5ea7d5f47754	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-08 13:56:07.494876+00	
00000000-0000-0000-0000-000000000000	047fdb9a-ab32-4a7c-af6e-b4404cfbf9de	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-11 12:07:47.229898+00	
00000000-0000-0000-0000-000000000000	7da615eb-5392-4bc2-8727-43cfbc7bd651	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-11 13:06:47.55538+00	
00000000-0000-0000-0000-000000000000	ebb6bc8a-475f-43e5-8cdb-c89d91d38c5e	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-11 13:06:47.559294+00	
00000000-0000-0000-0000-000000000000	6ec941f0-4cac-438f-a99d-061ef8efa89f	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-11 13:06:48.230278+00	
00000000-0000-0000-0000-000000000000	797c5c21-1d4c-4e8b-8836-5c1a17362af2	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-11 14:05:48.471961+00	
00000000-0000-0000-0000-000000000000	6f616898-d2fe-4c3d-a877-4eca466dd9e2	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-11 14:05:48.475006+00	
00000000-0000-0000-0000-000000000000	31569028-d7ff-4f9f-8bfc-018060325cd9	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-11 15:20:49.056733+00	
00000000-0000-0000-0000-000000000000	4e645fcd-5d81-4400-91c0-90edb6ddfcbb	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-11 15:20:49.059708+00	
00000000-0000-0000-0000-000000000000	c63ea731-971b-4468-8a00-1b886d115bd7	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-11 21:34:58.273767+00	
00000000-0000-0000-0000-000000000000	682c7c71-808e-4fc6-b981-d53986bc05c6	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-11 21:34:58.277278+00	
00000000-0000-0000-0000-000000000000	ab9e296c-7a3e-41b7-a78a-cf217e4461ba	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-11 22:34:00.037425+00	
00000000-0000-0000-0000-000000000000	f0f62b3d-5f1c-4261-9352-0044e7a68c73	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-11 22:34:00.047243+00	
00000000-0000-0000-0000-000000000000	5c3f3841-6d9f-4c45-bf48-c1aecabbd1fe	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-12 14:09:41.072474+00	
00000000-0000-0000-0000-000000000000	5088e84d-b735-46fb-ae11-da51fef513bd	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-12 14:09:41.095791+00	
00000000-0000-0000-0000-000000000000	9032d5fe-3171-4742-b7fc-09d3d63355c9	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-12 15:10:24.369507+00	
00000000-0000-0000-0000-000000000000	5e404fa4-f070-467a-a9df-0b48f9c8d759	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-12 15:10:24.375465+00	
00000000-0000-0000-0000-000000000000	df123ad0-c66e-49c7-bcf1-7a8b1ccf24d6	{"action":"login","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-12 16:47:48.71727+00	
00000000-0000-0000-0000-000000000000	700f5813-89c2-40ba-99a8-afcb54da3a51	{"action":"token_refreshed","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-12 17:46:50.18025+00	
00000000-0000-0000-0000-000000000000	3efa9da8-bfec-44b4-8458-1ee61079c492	{"action":"token_revoked","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-12 17:46:50.184057+00	
00000000-0000-0000-0000-000000000000	a7342b2a-de5d-4cfd-b067-caede33c6af0	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-12 18:44:04.797325+00	
00000000-0000-0000-0000-000000000000	d15c40f1-6be5-491a-af16-1e017d8f9b36	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-12 18:44:04.800036+00	
00000000-0000-0000-0000-000000000000	0933b364-101d-4e87-a49d-eabe7bec7a26	{"action":"token_refreshed","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-12 18:45:52.247212+00	
00000000-0000-0000-0000-000000000000	8b7af5e9-f576-436e-b105-4ab0fbd14325	{"action":"token_revoked","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-12 18:45:52.25576+00	
00000000-0000-0000-0000-000000000000	af576483-9fb6-4214-8108-f8d93a035d71	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-12 19:43:04.92107+00	
00000000-0000-0000-0000-000000000000	80299a61-bd69-40c1-9317-b2afda57f202	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-12 19:43:04.923452+00	
00000000-0000-0000-0000-000000000000	5adf3534-5a48-47d1-afed-b35865740046	{"action":"token_refreshed","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-12 19:44:54.090765+00	
00000000-0000-0000-0000-000000000000	af1f5f3a-951d-4cc9-9f18-05e05cca69c4	{"action":"token_revoked","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-12 19:44:54.092365+00	
00000000-0000-0000-0000-000000000000	e760c0ae-058f-4f23-875b-c9b666881b95	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-12 20:42:04.827261+00	
00000000-0000-0000-0000-000000000000	c84a03cb-c99b-4273-96e3-358c2cd3c704	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-12 20:42:04.830402+00	
00000000-0000-0000-0000-000000000000	053a4db6-b6bb-4449-9b22-b42cecb93c7f	{"action":"token_refreshed","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-12 20:43:56.114034+00	
00000000-0000-0000-0000-000000000000	d8c56b3c-6125-472b-aadc-5ba479a75b3e	{"action":"token_revoked","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-12 20:43:56.115633+00	
00000000-0000-0000-0000-000000000000	5b57f3b7-6b74-4a54-b36a-7465151cf729	{"action":"token_refreshed","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-12 20:43:56.546534+00	
00000000-0000-0000-0000-000000000000	5ead5466-c8cc-4122-acc3-0189c38427cd	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-11-12 21:19:44.931498+00	
00000000-0000-0000-0000-000000000000	3363724e-d1b6-47df-9221-e6e0f5db0a38	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-12 21:20:08.653172+00	
00000000-0000-0000-0000-000000000000	34dd4017-9a51-4328-8f69-f544699616a7	{"action":"token_refreshed","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-12 21:42:58.237409+00	
00000000-0000-0000-0000-000000000000	9c192cd9-7bba-45ea-97e4-833084b33515	{"action":"token_revoked","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-12 21:42:58.239577+00	
00000000-0000-0000-0000-000000000000	4c709076-6948-443d-aa70-2c2b395629f2	{"action":"login","actor_id":"8642fe0a-1c60-4873-a874-d91409a11165","actor_username":"genival.silva@seds.al.gov.br","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-12 22:08:13.56606+00	
00000000-0000-0000-0000-000000000000	62821f47-78c6-4f9f-bc9c-47cee4fe0bf1	{"action":"logout","actor_id":"8642fe0a-1c60-4873-a874-d91409a11165","actor_username":"genival.silva@seds.al.gov.br","actor_via_sso":false,"log_type":"account"}	2024-11-12 22:08:32.789725+00	
00000000-0000-0000-0000-000000000000	d9906080-dccf-4ff0-9c39-b1a34fec984b	{"action":"login","actor_id":"8642fe0a-1c60-4873-a874-d91409a11165","actor_username":"genival.silva@seds.al.gov.br","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-12 22:11:22.395055+00	
00000000-0000-0000-0000-000000000000	f875d6f7-d63d-4c5a-af54-a9082c7028ac	{"action":"logout","actor_id":"8642fe0a-1c60-4873-a874-d91409a11165","actor_username":"genival.silva@seds.al.gov.br","actor_via_sso":false,"log_type":"account"}	2024-11-12 22:12:14.067124+00	
00000000-0000-0000-0000-000000000000	41bea639-e049-4a5c-82c5-b62389150967	{"action":"login","actor_id":"8642fe0a-1c60-4873-a874-d91409a11165","actor_username":"genival.silva@seds.al.gov.br","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-12 22:12:44.762507+00	
00000000-0000-0000-0000-000000000000	f4dac207-179a-43e8-b474-206784c833a6	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-12 22:19:09.95225+00	
00000000-0000-0000-0000-000000000000	445ac1b1-e3c3-4908-84ac-a359ad046665	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-12 22:19:09.954179+00	
00000000-0000-0000-0000-000000000000	3d569e60-4f0c-49c7-9342-0d06cfaa2973	{"action":"logout","actor_id":"8642fe0a-1c60-4873-a874-d91409a11165","actor_username":"genival.silva@seds.al.gov.br","actor_via_sso":false,"log_type":"account"}	2024-11-12 22:36:07.314103+00	
00000000-0000-0000-0000-000000000000	d8a09635-7d6b-4f27-a3b1-72f8ed0cf496	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-12 23:18:09.631512+00	
00000000-0000-0000-0000-000000000000	46081c69-056c-4b1d-a4a6-f353789185db	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-12 23:18:09.636571+00	
00000000-0000-0000-0000-000000000000	2fb70079-1b86-4c2d-aacc-f7344841e62c	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-13 09:35:41.30541+00	
00000000-0000-0000-0000-000000000000	7de74551-0c9a-4b49-a7c2-58be21ba56b1	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-13 09:35:41.32997+00	
00000000-0000-0000-0000-000000000000	06edf628-ca7e-4653-b6fe-29f9641b9cbc	{"action":"token_refreshed","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-13 12:08:26.65454+00	
00000000-0000-0000-0000-000000000000	9a0febbb-3dbc-469a-8b34-b4b1ce5e4110	{"action":"token_revoked","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-13 12:08:26.657609+00	
00000000-0000-0000-0000-000000000000	586d05f8-2bcf-485a-8787-e780f9ff956e	{"action":"token_refreshed","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-13 13:07:29.873951+00	
00000000-0000-0000-0000-000000000000	22626e6a-1efd-45bf-a5d8-de4c9b8abcf6	{"action":"token_revoked","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-13 13:07:29.880573+00	
00000000-0000-0000-0000-000000000000	025a647f-8c39-4d00-ae7b-8771f37511fa	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-13 19:54:39.788104+00	
00000000-0000-0000-0000-000000000000	0fa48957-4274-4ec7-a041-4edbc96d8240	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-14 11:38:15.205259+00	
00000000-0000-0000-0000-000000000000	d7cfd9f4-f4c6-4672-b07d-34c733763096	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-14 12:41:31.884032+00	
00000000-0000-0000-0000-000000000000	37b723b9-dce8-497f-b908-fe970ad94c21	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-14 12:41:31.907798+00	
00000000-0000-0000-0000-000000000000	334a2690-3d82-4cad-9045-7e304dbb690f	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-14 14:53:49.153791+00	
00000000-0000-0000-0000-000000000000	fac5d453-a79c-4669-8df5-396db36218cb	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-14 14:53:49.17005+00	
00000000-0000-0000-0000-000000000000	7d4c5b54-2ea8-4b3e-8c36-a78ef05cadc8	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-14 18:06:24.327089+00	
00000000-0000-0000-0000-000000000000	db1e585b-0da9-469b-a0da-06165eb8c1fd	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-14 18:06:24.351743+00	
00000000-0000-0000-0000-000000000000	849d93c0-3e42-43f3-b1b4-0ad443e04cdf	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-14 19:38:01.696879+00	
00000000-0000-0000-0000-000000000000	715d1c1d-1fb3-4b18-9c19-d1b6ca3baf51	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-14 19:38:01.700014+00	
00000000-0000-0000-0000-000000000000	804056c0-9cb3-4c65-9a67-90a8d8b74b1e	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-14 21:56:45.963577+00	
00000000-0000-0000-0000-000000000000	248f8bfe-726e-4758-b83d-ea5e8de547f3	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-14 21:56:45.965543+00	
00000000-0000-0000-0000-000000000000	5878515d-ed7b-4534-8766-bee6373bae6e	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-14 23:23:41.133474+00	
00000000-0000-0000-0000-000000000000	fe8a46e4-fb05-4902-a4e3-2dae846a1c22	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-14 23:23:41.135402+00	
00000000-0000-0000-0000-000000000000	48609d77-0b31-4ca9-bac4-ffe847f7bafc	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-11-14 23:24:41.99302+00	
00000000-0000-0000-0000-000000000000	7ee16eeb-4ac8-4091-a173-103002277c34	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-14 23:25:02.270256+00	
00000000-0000-0000-0000-000000000000	461d9d0a-c1e2-4247-b987-4963c03a7870	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-15 00:25:53.747138+00	
00000000-0000-0000-0000-000000000000	0227fc27-5307-4ccf-b091-af7412cdc3fb	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-15 00:25:53.748954+00	
00000000-0000-0000-0000-000000000000	a7268ddd-ac7c-4f19-b923-4fa787a109eb	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-15 11:00:17.855138+00	
00000000-0000-0000-0000-000000000000	6cb6b4f7-2278-4fae-ba8f-06bab8b867ec	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-15 13:24:03.332241+00	
00000000-0000-0000-0000-000000000000	4f5b11b7-727f-4f86-81e1-aa0dba6f4d82	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-15 13:24:03.337888+00	
00000000-0000-0000-0000-000000000000	4fee0f57-d33a-42c3-9e09-cf222e4f849e	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-15 13:49:26.590457+00	
00000000-0000-0000-0000-000000000000	ad2d507f-3df5-4c7d-b292-93ae8c64bd62	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-15 13:49:26.59412+00	
00000000-0000-0000-0000-000000000000	e4103ce0-e590-4ce9-ae70-9dd3b7ea9ec4	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-15 14:15:14.841852+00	
00000000-0000-0000-0000-000000000000	c1bd9d0f-179a-4efb-b305-e15fc263babc	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-15 14:15:14.844992+00	
00000000-0000-0000-0000-000000000000	6bf4284a-fcb8-40a6-9c5b-0f9a42c73e6f	{"action":"login","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-15 18:01:23.103919+00	
00000000-0000-0000-0000-000000000000	0c7aa1b2-f81f-45ed-bb0d-f0c6ce7588cd	{"action":"token_refreshed","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-15 19:15:50.15162+00	
00000000-0000-0000-0000-000000000000	83810de3-0c8f-4e63-95d2-6b33853e98a3	{"action":"token_revoked","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-15 19:15:50.154796+00	
00000000-0000-0000-0000-000000000000	a211ce2a-b508-4f78-a853-18246ebc9f78	{"action":"token_refreshed","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-15 20:15:21.951811+00	
00000000-0000-0000-0000-000000000000	01f9ae9e-d983-49d2-8e55-6488a59e2cea	{"action":"token_revoked","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-15 20:15:21.965992+00	
00000000-0000-0000-0000-000000000000	179a70fc-1777-4271-88e0-ab996ee838c7	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-18 09:40:20.956787+00	
00000000-0000-0000-0000-000000000000	cc264f98-14c9-43f1-b3e3-400a778fcc3b	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-18 09:40:20.973118+00	
00000000-0000-0000-0000-000000000000	f9416773-87f3-4439-b06c-9d9037a184cb	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-18 09:56:27.922963+00	
00000000-0000-0000-0000-000000000000	840e6bbf-368a-492a-9b6f-dd55d9cad65e	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-18 10:52:07.532717+00	
00000000-0000-0000-0000-000000000000	6f2f6719-b183-4c20-a305-0f52e4c72fb6	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-18 10:52:07.536478+00	
00000000-0000-0000-0000-000000000000	852f7446-41ba-4c16-bbbd-61bd019452bc	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-18 12:42:32.482433+00	
00000000-0000-0000-0000-000000000000	d38d6a75-fedb-4071-85f2-14a4c4c36df0	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-18 13:07:34.69024+00	
00000000-0000-0000-0000-000000000000	53a85cd6-bb66-4f7c-8421-3a4cf52af1ff	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-18 13:07:34.694577+00	
00000000-0000-0000-0000-000000000000	2e39b9f1-bfba-4252-8699-6a84daf6ac0b	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-18 14:19:11.133438+00	
00000000-0000-0000-0000-000000000000	15b43aee-9ecd-49d6-9862-c20d66ae1e84	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-18 14:19:11.137279+00	
00000000-0000-0000-0000-000000000000	5c93a49b-6ee8-4a6c-b154-197de50d8d0c	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-18 15:18:37.241528+00	
00000000-0000-0000-0000-000000000000	018a73cc-c01a-4f6d-b2c2-90094a05d0a5	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-18 15:18:37.243879+00	
00000000-0000-0000-0000-000000000000	25413a65-9ffe-4498-9214-2d9368966fb9	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-18 18:12:32.278955+00	
00000000-0000-0000-0000-000000000000	1a451a9c-ec80-46de-b388-26185910c4df	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-18 18:12:32.280917+00	
00000000-0000-0000-0000-000000000000	05beac94-588c-48cf-8849-c5ad5822bc83	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-18 19:40:13.304807+00	
00000000-0000-0000-0000-000000000000	caa7e55d-e539-4f78-b21f-3fb8865c8ee7	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-18 19:40:13.307209+00	
00000000-0000-0000-0000-000000000000	b6b4cf20-c457-4aef-bfea-b5f78936f29f	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-18 21:41:16.194751+00	
00000000-0000-0000-0000-000000000000	028dcdb5-a139-43e0-88c2-54517b468c51	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-18 21:41:16.20425+00	
00000000-0000-0000-0000-000000000000	34a87616-fe2d-4c04-bb35-7ddc675eeb50	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-19 10:06:05.443648+00	
00000000-0000-0000-0000-000000000000	5489bd3d-7f0b-4cb8-9ecd-e9d1aebded28	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-19 10:06:05.465443+00	
00000000-0000-0000-0000-000000000000	9171a01c-ceca-4c5c-a1f8-c1cbbf5b86e9	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-19 11:05:34.720392+00	
00000000-0000-0000-0000-000000000000	a59cdda7-4c23-4780-ba45-163bf668d5c5	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-19 11:05:34.73161+00	
00000000-0000-0000-0000-000000000000	f1561c4f-3b82-4e40-81e5-eac9020f8fc0	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-19 12:18:10.578142+00	
00000000-0000-0000-0000-000000000000	6aa1d182-1230-4f4e-8aed-7b5d6978c622	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-19 12:18:10.581469+00	
00000000-0000-0000-0000-000000000000	e4683fc4-1455-4a7c-9885-19868ffc3a94	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-19 13:17:52.08176+00	
00000000-0000-0000-0000-000000000000	7c657c43-7693-4f7e-a3d5-d7861ff1c2bb	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-19 13:17:52.08698+00	
00000000-0000-0000-0000-000000000000	9ff0537d-e095-476e-b037-3d05a49a7d48	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-19 14:20:23.210603+00	
00000000-0000-0000-0000-000000000000	12e5339f-7376-4ed9-958c-c201b64d17d3	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-19 14:20:23.215751+00	
00000000-0000-0000-0000-000000000000	2e9cd3ac-5d5d-451d-8a3e-02d72e68e0b9	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-19 18:27:39.655363+00	
00000000-0000-0000-0000-000000000000	a76df45d-230d-4d3c-ab43-54479b0ed6fe	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-19 19:28:46.760292+00	
00000000-0000-0000-0000-000000000000	e0d6385b-d72f-4f14-ada3-8a1e1b540e40	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-19 19:28:46.766969+00	
00000000-0000-0000-0000-000000000000	4d84ed64-4d11-4254-9ca0-9a7a92ad9175	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-19 20:12:36.85412+00	
00000000-0000-0000-0000-000000000000	320462d2-d0ac-4eea-8e3a-f41f4a70f1f8	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-20 13:55:31.594552+00	
00000000-0000-0000-0000-000000000000	8302304b-ecd7-4384-9e19-ca4efc4ad8e4	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-20 20:33:08.825552+00	
00000000-0000-0000-0000-000000000000	0f58f504-31f1-431b-bd96-a65cc552d7fd	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-20 20:33:08.835768+00	
00000000-0000-0000-0000-000000000000	b9f815f4-7081-459e-b4e3-bbdd3128c6c3	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-21 10:35:28.936896+00	
00000000-0000-0000-0000-000000000000	38a68dc6-147b-4b6f-b7ba-cc5c7ba7ad85	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-21 10:35:28.952018+00	
00000000-0000-0000-0000-000000000000	9a2bfb37-33fb-4f6f-aa3f-7f2d6b28dcfe	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-21 11:11:29.458544+00	
00000000-0000-0000-0000-000000000000	b9dc621a-35cc-4466-8663-83bca2fda2a9	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-21 11:36:20.908018+00	
00000000-0000-0000-0000-000000000000	6280b443-a221-4e05-b193-eb0a3858a452	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-21 11:36:20.91074+00	
00000000-0000-0000-0000-000000000000	f1b67dbb-3123-47c5-acdd-0f306ce8c8ba	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-21 12:10:56.094701+00	
00000000-0000-0000-0000-000000000000	5fbf9bf3-1990-4b6a-9f2f-95ade14e3edf	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-21 12:10:56.102084+00	
00000000-0000-0000-0000-000000000000	58199e54-9704-4532-93d5-099ced7bbfca	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-21 13:10:18.012807+00	
00000000-0000-0000-0000-000000000000	9e646bfe-14f5-4dc1-a3ad-25f35a780e03	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-21 13:10:18.016339+00	
00000000-0000-0000-0000-000000000000	8322992d-977b-4871-9666-e197c93aaa2a	{"action":"logout","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-11-21 13:20:51.479181+00	
00000000-0000-0000-0000-000000000000	d9ca79fb-38a0-4fc4-afca-16e8fc8f2b78	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-21 13:21:49.67397+00	
00000000-0000-0000-0000-000000000000	a065ecf3-07e1-4bfd-8aae-0c6c5c780ebb	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-21 14:39:05.887772+00	
00000000-0000-0000-0000-000000000000	6ed6aeae-754b-4602-a73f-b4dcf322e278	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-21 14:39:05.89232+00	
00000000-0000-0000-0000-000000000000	8f1ee2ca-9bca-4223-bc52-556858f1a377	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-21 17:04:34.3776+00	
00000000-0000-0000-0000-000000000000	e64b8ade-807c-4218-87f2-c7798864ff34	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-21 17:04:34.378599+00	
00000000-0000-0000-0000-000000000000	5a52b642-4641-403e-ba42-707b9124cc3c	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-21 21:24:27.552845+00	
00000000-0000-0000-0000-000000000000	5b314507-ee69-480a-8424-2deb834c6e19	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-21 21:24:27.559355+00	
00000000-0000-0000-0000-000000000000	f43faa70-9578-446a-a3e6-6839c910169d	{"action":"login","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-25 11:12:46.170194+00	
00000000-0000-0000-0000-000000000000	8c759bde-caa2-4634-8cca-573d240910aa	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-25 12:57:16.034542+00	
00000000-0000-0000-0000-000000000000	76bbfac1-b569-4235-baf7-ab7460da52b4	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-25 12:57:16.042291+00	
00000000-0000-0000-0000-000000000000	f516a431-e0eb-4c57-b313-bb755d5b4e3d	{"action":"login","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-25 18:21:21.014634+00	
00000000-0000-0000-0000-000000000000	a37e14de-fb17-4ee9-80e6-f14ed029cd5c	{"action":"logout","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"account"}	2024-11-25 18:22:55.70466+00	
00000000-0000-0000-0000-000000000000	892aab39-35ce-4771-8ca9-27c907c63580	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-25 19:14:21.001072+00	
00000000-0000-0000-0000-000000000000	9a17a3aa-a0d5-440b-aea4-d2da584c1912	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-25 19:14:21.011232+00	
00000000-0000-0000-0000-000000000000	896584df-2c02-46be-801a-9c787a862e56	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-26 09:41:03.946452+00	
00000000-0000-0000-0000-000000000000	943f286d-9905-4371-bde1-50b0b3df2a74	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-26 09:41:03.967578+00	
00000000-0000-0000-0000-000000000000	cdee1064-495b-4357-badf-110a9a263087	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-26 11:19:45.754885+00	
00000000-0000-0000-0000-000000000000	3c33c91d-17a0-4205-a32d-d2efa116733f	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-26 11:19:45.769455+00	
00000000-0000-0000-0000-000000000000	a6270ecf-dadc-4f6a-aa4c-be4b36f5d9ea	{"action":"login","actor_id":"8642fe0a-1c60-4873-a874-d91409a11165","actor_username":"genival.silva@seds.al.gov.br","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-26 11:58:22.20513+00	
00000000-0000-0000-0000-000000000000	ffa154bb-9152-41df-8a68-a830e0473cfb	{"action":"logout","actor_id":"8642fe0a-1c60-4873-a874-d91409a11165","actor_username":"genival.silva@seds.al.gov.br","actor_via_sso":false,"log_type":"account"}	2024-11-26 12:10:59.799444+00	
00000000-0000-0000-0000-000000000000	94578679-c561-430c-b40b-3ae8f1c11d02	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-26 12:59:30.401021+00	
00000000-0000-0000-0000-000000000000	1e61f177-d541-4987-894b-7e6e4fa640c3	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-26 12:59:30.407297+00	
00000000-0000-0000-0000-000000000000	04ce7742-0043-4f38-8d35-bc973d12d03e	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-26 13:52:38.267468+00	
00000000-0000-0000-0000-000000000000	e4b21faf-fd2d-4728-b10f-3674756256b1	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-26 13:52:38.269958+00	
00000000-0000-0000-0000-000000000000	77d059ad-f520-4295-adad-b1709a09722d	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-26 13:59:33.901394+00	
00000000-0000-0000-0000-000000000000	8c6c407c-4042-44e7-a215-4a7243d78e2e	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-26 13:59:33.904524+00	
00000000-0000-0000-0000-000000000000	550e70b4-2288-4c12-8ae7-c25b21f34e02	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-27 18:28:00.618357+00	
00000000-0000-0000-0000-000000000000	8c05010a-936c-454a-b890-14a92f49c97b	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-27 18:28:00.639235+00	
00000000-0000-0000-0000-000000000000	afad6298-1e61-40f6-bc98-acb00ba7837a	{"action":"login","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-28 17:18:44.570906+00	
00000000-0000-0000-0000-000000000000	aaff3a02-f70c-4463-bd04-23d4ce1e2f71	{"action":"login","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-11-28 17:48:13.091562+00	
00000000-0000-0000-0000-000000000000	008da925-4235-4bff-93c5-e3ef9c182a42	{"action":"token_refreshed","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-28 20:47:35.776338+00	
00000000-0000-0000-0000-000000000000	29fc955a-12a0-4b65-b72a-a14cd3c3f6ca	{"action":"token_revoked","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-11-28 20:47:35.779185+00	
00000000-0000-0000-0000-000000000000	512494b3-7e03-46e4-b726-044bc446b255	{"action":"login","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-12-02 12:43:27.0109+00	
00000000-0000-0000-0000-000000000000	e5c67bbc-6279-4dc1-af8f-1de7da9c013f	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-12-03 11:52:28.761994+00	
00000000-0000-0000-0000-000000000000	181e5944-522d-4a7f-93cb-585e3de8911f	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-12-03 11:52:28.775218+00	
00000000-0000-0000-0000-000000000000	3b62ea1f-21af-4408-aaa1-168ffdcda923	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-12-03 12:51:52.597851+00	
00000000-0000-0000-0000-000000000000	278deee6-7a31-486d-96e9-e68090a521d7	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-12-03 12:51:52.623747+00	
00000000-0000-0000-0000-000000000000	fb4db3e2-3255-4f79-855d-120bf3abd837	{"action":"token_refreshed","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-12-03 13:51:19.277539+00	
00000000-0000-0000-0000-000000000000	898969ab-d890-427a-badd-e490fdcc4566	{"action":"token_revoked","actor_id":"15e35919-cc42-42b9-b291-6fae96a073bf","actor_username":"tenroberto2011@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-12-03 13:51:19.283791+00	
00000000-0000-0000-0000-000000000000	8c8d4581-7daa-4779-924e-a8320dd3acd6	{"action":"token_refreshed","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-12-03 21:00:04.330642+00	
00000000-0000-0000-0000-000000000000	180855f9-63dd-4ee3-a4df-e9bd33c168b9	{"action":"token_revoked","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-12-03 21:00:04.345833+00	
00000000-0000-0000-0000-000000000000	ad0154b6-7ebd-40c9-9423-6428d87db16c	{"action":"token_refreshed","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-12-06 11:54:21.927742+00	
00000000-0000-0000-0000-000000000000	ea698e78-ec6f-4aa0-990f-2bb38641a1cb	{"action":"token_revoked","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-12-06 11:54:21.942261+00	
00000000-0000-0000-0000-000000000000	f72014ca-a502-4569-9f9b-a607e54dd051	{"action":"token_refreshed","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-12-11 22:06:03.774306+00	
00000000-0000-0000-0000-000000000000	827ad67d-3c1c-411a-94e3-267f8d956acd	{"action":"token_revoked","actor_id":"9f3507a5-e0b8-4aeb-9012-addb365fc0e6","actor_username":"grazielly_nunes@hotmail.com","actor_via_sso":false,"log_type":"token"}	2024-12-11 22:06:03.785357+00	
00000000-0000-0000-0000-000000000000	da73b765-6107-4d1a-8a16-a2b1dcb038e4	{"action":"user_signedup","actor_id":"1073b901-a06e-4f42-b5d3-d2359047b2cf","actor_username":"thaislima.mcz@hotmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2024-12-12 13:20:11.161835+00	
00000000-0000-0000-0000-000000000000	c679b233-1bec-437d-abf1-e9be56ed2fea	{"action":"login","actor_id":"1073b901-a06e-4f42-b5d3-d2359047b2cf","actor_username":"thaislima.mcz@hotmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-12-12 13:20:11.179959+00	
00000000-0000-0000-0000-000000000000	a8fa22e6-ce31-4d41-9ff3-80a3d9d319bb	{"action":"logout","actor_id":"1073b901-a06e-4f42-b5d3-d2359047b2cf","actor_username":"thaislima.mcz@hotmail.com","actor_via_sso":false,"log_type":"account"}	2024-12-12 13:20:14.421864+00	
00000000-0000-0000-0000-000000000000	ad40eb1d-3322-40e4-9cda-0ed381c02fa2	{"action":"login","actor_id":"1073b901-a06e-4f42-b5d3-d2359047b2cf","actor_username":"thaislima.mcz@hotmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-12-12 13:20:42.401671+00	
\.


--
-- Data for Name: flow_state; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.flow_state (id, user_id, auth_code, code_challenge_method, code_challenge, provider_type, provider_access_token, provider_refresh_token, created_at, updated_at, authentication_method, auth_code_issued_at) FROM stdin;
5ddfd6fc-0bf6-4282-af31-80212c6ca9cc	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	30ca629c-ae7b-4d95-a423-0bce6394828b	s256	AjaiksxeyvpY6wZXLFsW38ElX3DVmaAnTRHF3ckqC9I	recovery			2024-11-28 17:34:24.484233+00	2024-11-28 17:34:24.484233+00	recovery	\N
\.


--
-- Data for Name: identities; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.identities (provider_id, user_id, identity_data, provider, last_sign_in_at, created_at, updated_at, id) FROM stdin;
15e35919-cc42-42b9-b291-6fae96a073bf	15e35919-cc42-42b9-b291-6fae96a073bf	{"sub": "15e35919-cc42-42b9-b291-6fae96a073bf", "email": "tenroberto2011@gmail.com", "email_verified": false, "phone_verified": false}	email	2024-09-26 18:06:51.386136+00	2024-09-26 18:06:51.38619+00	2024-09-26 18:06:51.38619+00	7f82a2ba-db7d-4b74-b237-c70b77c92b19
9f3507a5-e0b8-4aeb-9012-addb365fc0e6	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	{"sub": "9f3507a5-e0b8-4aeb-9012-addb365fc0e6", "email": "grazielly_nunes@hotmail.com", "email_verified": false, "phone_verified": false}	email	2024-10-07 19:59:22.138383+00	2024-10-07 19:59:22.138446+00	2024-10-07 19:59:22.138446+00	0dc4569c-6f70-478a-8710-142cb27c9c67
aaf972d2-3bfa-48b1-822c-208e4c12ac44	aaf972d2-3bfa-48b1-822c-208e4c12ac44	{"sub": "aaf972d2-3bfa-48b1-822c-208e4c12ac44", "email": "danilorlsa@gmail.com", "email_verified": false, "phone_verified": false}	email	2024-11-04 13:36:32.207306+00	2024-11-04 13:36:32.207365+00	2024-11-04 13:36:32.207365+00	a30a3d92-8d31-4ce9-a3a3-c8a41d38162d
65ef475c-beff-46a3-b81b-ad117a5e0be9	65ef475c-beff-46a3-b81b-ad117a5e0be9	{"sub": "65ef475c-beff-46a3-b81b-ad117a5e0be9", "email": "djalmatorquato@hotmail.com", "email_verified": false, "phone_verified": false}	email	2024-11-05 11:33:13.042001+00	2024-11-05 11:33:13.042084+00	2024-11-05 11:33:13.042084+00	eb67b99d-a2d2-4440-a327-378456056451
8642fe0a-1c60-4873-a874-d91409a11165	8642fe0a-1c60-4873-a874-d91409a11165	{"sub": "8642fe0a-1c60-4873-a874-d91409a11165", "email": "genival.silva@seds.al.gov.br", "email_verified": false, "phone_verified": false}	email	2024-11-05 13:26:12.423966+00	2024-11-05 13:26:12.42402+00	2024-11-05 13:26:12.42402+00	2758a191-4999-4652-9de6-33db351175d4
fe8199d7-c809-4d51-896f-75626d52f935	fe8199d7-c809-4d51-896f-75626d52f935	{"sub": "fe8199d7-c809-4d51-896f-75626d52f935", "email": "carlos.roberto.ti.dr@gmail.com", "email_verified": false, "phone_verified": false}	email	2024-11-06 18:06:20.355425+00	2024-11-06 18:06:20.355484+00	2024-11-06 18:06:20.355484+00	a87e244d-e154-42ca-8d3f-f7d4e6a7a287
1073b901-a06e-4f42-b5d3-d2359047b2cf	1073b901-a06e-4f42-b5d3-d2359047b2cf	{"sub": "1073b901-a06e-4f42-b5d3-d2359047b2cf", "email": "thaislima.mcz@hotmail.com", "email_verified": false, "phone_verified": false}	email	2024-12-12 13:20:11.148584+00	2024-12-12 13:20:11.149197+00	2024-12-12 13:20:11.149197+00	fc4778b9-85fb-4d16-9c0d-093f2a45a43d
\.


--
-- Data for Name: instances; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.instances (id, uuid, raw_base_config, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: mfa_amr_claims; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_amr_claims (session_id, created_at, updated_at, authentication_method, id) FROM stdin;
08289809-d6f0-45d6-8b7f-1f925041fa43	2024-11-04 13:36:32.288983+00	2024-11-04 13:36:32.288983+00	password	e227447d-5314-4e31-8fca-0c8f70b354a6
5aa9de99-7166-4108-839e-96a04a609fd5	2024-11-05 11:33:56.113592+00	2024-11-05 11:33:56.113592+00	password	def535e6-e347-406e-9eab-7b21f8fdb846
712924a7-1535-43de-8ac4-14468dc5d57a	2024-11-05 11:37:53.705793+00	2024-11-05 11:37:53.705793+00	password	b34ed994-efaa-4aeb-b960-ff6649ccda51
9105e40f-bc6f-4201-81cf-0174b3b005b6	2024-11-12 16:47:48.736899+00	2024-11-12 16:47:48.736899+00	password	35ae3537-7f60-4652-a4fd-5cadf57d8cda
a6b30d6d-b20c-440c-8a08-13d551de9a5e	2024-11-12 21:20:08.662059+00	2024-11-12 21:20:08.662059+00	password	25ba3719-62b8-42fd-b7b5-bab522f6f6c6
62b589e6-9f76-47e4-8681-523d1cabd434	2024-11-14 11:38:15.240173+00	2024-11-14 11:38:15.240173+00	password	fdf7bf66-0ae9-4add-878f-922f20a9d7bf
73363415-eacb-4443-b483-41466b001fa6	2024-11-14 23:25:02.288428+00	2024-11-14 23:25:02.288428+00	password	788a554e-01e1-4bc8-b6f2-1aff5e7b72be
524824d5-5da4-4dba-9530-b49f7b2c9c57	2024-11-15 11:00:17.905161+00	2024-11-15 11:00:17.905161+00	password	a2a794e4-da7f-4e99-bdf6-61e484993730
e88c71c0-eea4-4bd6-a016-f55cc7d6ab53	2024-11-15 18:01:23.114952+00	2024-11-15 18:01:23.114952+00	password	90a2da6f-46ad-4a5c-9551-6ee6305d5857
9f4e2dca-5f26-468c-9031-3296667c3dd6	2024-11-18 09:56:27.936346+00	2024-11-18 09:56:27.936346+00	password	743f261d-8222-40c9-97c8-3ace36a1da38
d6859622-f913-4543-8e3a-846dcafba3f5	2024-11-18 12:42:32.491262+00	2024-11-18 12:42:32.491262+00	password	78f7c6cf-3a49-4ae8-ab89-501d7d76876e
13e3694b-fd04-4c11-8df9-aeb96731bb0c	2024-11-19 18:27:39.675334+00	2024-11-19 18:27:39.675334+00	password	aa9b7f0f-7538-468b-b561-f791fafc678b
9103de8c-9792-44f2-8e46-17c08b5121d0	2024-11-19 20:12:36.874814+00	2024-11-19 20:12:36.874814+00	password	25b1b821-5f8a-4314-9ab9-d5acf4963e17
3afb9fd3-9718-4350-97b9-731c1880af01	2024-11-20 13:55:31.674193+00	2024-11-20 13:55:31.674193+00	password	02eddb8d-81dc-40a9-b0a5-5f2c59a3efe0
adf56702-9c98-4957-aa80-70c3a7a22e3f	2024-11-21 13:21:49.688871+00	2024-11-21 13:21:49.688871+00	password	5f4c8951-795f-40ef-9f32-baf980bc2cab
45c3edc5-41ba-4b3b-b2e3-63286659e5b4	2024-11-25 11:12:46.234306+00	2024-11-25 11:12:46.234306+00	password	d3fcbe0b-93b1-4bde-8215-f9d1e345c3d4
29bc30ce-2677-452a-be84-f4e2e0ab2e15	2024-11-28 17:18:44.63019+00	2024-11-28 17:18:44.63019+00	password	85240a31-0909-4982-bcd7-de1acecdb86b
9f8e7843-1251-4d15-8d47-744f36a2712f	2024-11-28 17:48:13.111119+00	2024-11-28 17:48:13.111119+00	password	753dded6-d1b7-4b5d-ab7a-b6452a1440ef
cfbdbab4-9814-4abc-834d-bcb2a171a320	2024-12-02 12:43:27.061529+00	2024-12-02 12:43:27.061529+00	password	3873ed64-d93a-4f50-bb02-8f183a88cbcc
d0dad2cb-a15f-4453-ab26-892b3b3cfaba	2024-12-12 13:20:42.404834+00	2024-12-12 13:20:42.404834+00	password	60aef3ec-3c77-462f-bfb9-72f4163bc5f0
\.


--
-- Data for Name: mfa_challenges; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_challenges (id, factor_id, created_at, verified_at, ip_address, otp_code, web_authn_session_data) FROM stdin;
\.


--
-- Data for Name: mfa_factors; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_factors (id, user_id, friendly_name, factor_type, status, created_at, updated_at, secret, phone, last_challenged_at, web_authn_credential, web_authn_aaguid) FROM stdin;
\.


--
-- Data for Name: one_time_tokens; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.one_time_tokens (id, user_id, token_type, token_hash, relates_to, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: refresh_tokens; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.refresh_tokens (instance_id, id, token, user_id, revoked, created_at, updated_at, parent, session_id) FROM stdin;
00000000-0000-0000-0000-000000000000	480	x6rK0VTRzRPhfNtPRmlfxQ	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	f	2024-12-11 22:06:03.804702+00	2024-12-11 22:06:03.804702+00	hNHnOzL9gr_1zorQSCHm6Q	e88c71c0-eea4-4bd6-a016-f55cc7d6ab53
00000000-0000-0000-0000-000000000000	404	lw03Q7MrPFX8tyiWYT80SA	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-12 21:20:08.660107+00	2024-11-12 22:19:09.955338+00	\N	a6b30d6d-b20c-440c-8a08-13d551de9a5e
00000000-0000-0000-0000-000000000000	411	tsh0x-43g-Vl08v4Un4qDw	15e35919-cc42-42b9-b291-6fae96a073bf	f	2024-11-13 09:35:41.344703+00	2024-11-13 09:35:41.344703+00	sV9NOdZOMOHrSwuSUFdlcg	a6b30d6d-b20c-440c-8a08-13d551de9a5e
00000000-0000-0000-0000-000000000000	354	zzlV6N3qjPNlXq55hghDxg	aaf972d2-3bfa-48b1-822c-208e4c12ac44	t	2024-11-04 14:35:32.324186+00	2024-11-07 20:22:43.128856+00	ZzJW9jW2QBnp8mMdrs-rqQ	08289809-d6f0-45d6-8b7f-1f925041fa43
00000000-0000-0000-0000-000000000000	417	DNPSE48s_9h45sCeJ1QHzg	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-14 14:53:49.174107+00	2024-11-14 18:06:24.354105+00	8DZina44nm_2quTh3fjvWQ	62b589e6-9f76-47e4-8681-523d1cabd434
00000000-0000-0000-0000-000000000000	423	iIxWEi-8SVx0e8TLyHHzlw	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-15 00:25:53.751841+00	2024-11-15 13:49:26.595878+00	sb7DlBxHUTf0f2xTN8CU-w	73363415-eacb-4443-b483-41466b001fa6
00000000-0000-0000-0000-000000000000	420	h7lmD4rKp52hDdG5ciAdPQ	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-14 21:56:45.969622+00	2024-11-15 14:15:14.845642+00	Dukrgjpu-mOMIsawPxccVQ	62b589e6-9f76-47e4-8681-523d1cabd434
00000000-0000-0000-0000-000000000000	429	2QK0eXLA_lrk0NWdVCnkYQ	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	t	2024-11-15 19:15:50.159334+00	2024-11-15 20:15:21.967517+00	a9UQmjKRzhq3kFdt0TTEEA	e88c71c0-eea4-4bd6-a016-f55cc7d6ab53
00000000-0000-0000-0000-000000000000	432	SR7fgVPkafs4Q79eZM3Lhw	15e35919-cc42-42b9-b291-6fae96a073bf	f	2024-11-18 09:56:27.931666+00	2024-11-18 09:56:27.931666+00	\N	9f4e2dca-5f26-468c-9031-3296667c3dd6
00000000-0000-0000-0000-000000000000	396	uirvLtt1Aftq1UPp0T5luQ	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	t	2024-11-12 16:47:48.734289+00	2024-11-12 17:46:50.184827+00	\N	9105e40f-bc6f-4201-81cf-0174b3b005b6
00000000-0000-0000-0000-000000000000	399	2sbVw9tkI4EJeroaMg2bFg	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	t	2024-11-12 18:45:52.259063+00	2024-11-12 19:44:54.092923+00	Eyh7jc3uQNvnrdNRJphCvA	9105e40f-bc6f-4201-81cf-0174b3b005b6
00000000-0000-0000-0000-000000000000	435	OSDXl7iWQDRx5NJbKxWfNA	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-18 13:07:34.698698+00	2024-11-18 14:19:11.137928+00	ADFKcACFF18cvvkyzF59UQ	62b589e6-9f76-47e4-8681-523d1cabd434
00000000-0000-0000-0000-000000000000	438	IwOa9OF3A0MODm98gw1xRA	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-18 18:12:32.286083+00	2024-11-18 19:40:13.308203+00	yI-9YLcMsJXQbf4-ZDMKpQ	d6859622-f913-4543-8e3a-846dcafba3f5
00000000-0000-0000-0000-000000000000	441	wFV63vr3jF89u3u-sb4dvw	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-19 10:06:05.477202+00	2024-11-19 11:05:34.732193+00	CQx3tH9COkC7mFR03jiUDg	62b589e6-9f76-47e4-8681-523d1cabd434
00000000-0000-0000-0000-000000000000	444	r5wp3S81R_BCrdOye04Seg	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-19 13:17:52.091432+00	2024-11-19 14:20:23.218248+00	7faYeCu-QVL_n--TzOc3_g	62b589e6-9f76-47e4-8681-523d1cabd434
00000000-0000-0000-0000-000000000000	447	ejYq6VUIsKRuh2iFMM46Kw	15e35919-cc42-42b9-b291-6fae96a073bf	f	2024-11-19 19:28:46.777155+00	2024-11-19 19:28:46.777155+00	YLmeaWDu-Eg6ig-p-JjMQw	13e3694b-fd04-4c11-8df9-aeb96731bb0c
00000000-0000-0000-0000-000000000000	450	rMVHL__eSQm29I07HEPjvw	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-20 20:33:08.842528+00	2024-11-21 10:35:28.954037+00	4qAvPRnPEjk8fZEIKd7vbA	62b589e6-9f76-47e4-8681-523d1cabd434
00000000-0000-0000-0000-000000000000	453	8c-HkmwFRTQWkEHIS5Q01g	15e35919-cc42-42b9-b291-6fae96a073bf	f	2024-11-21 11:36:20.914347+00	2024-11-21 11:36:20.914347+00	c8dpMV-S866UdjgYzX2eyQ	62b589e6-9f76-47e4-8681-523d1cabd434
00000000-0000-0000-0000-000000000000	456	83FS7kc933N8BNXKnnFK2g	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-21 13:21:49.683646+00	2024-11-21 14:39:05.892918+00	\N	adf56702-9c98-4957-aa80-70c3a7a22e3f
00000000-0000-0000-0000-000000000000	459	nXRY-g8gwNZP7jqOxZlkqg	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-21 21:24:27.564469+00	2024-11-25 12:57:16.044325+00	0PD5VNjmQ3oqfN5Gqouaug	adf56702-9c98-4957-aa80-70c3a7a22e3f
00000000-0000-0000-0000-000000000000	426	KsvsMASwN7tOPi5GWbkFpg	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-15 13:49:26.599486+00	2024-11-26 12:59:30.411257+00	iIxWEi-8SVx0e8TLyHHzlw	73363415-eacb-4443-b483-41466b001fa6
00000000-0000-0000-0000-000000000000	465	KIYBe0fNz0R10CK9vtzVXg	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-26 11:19:45.778884+00	2024-11-26 13:52:38.271341+00	pZf4ZBjc6nabeMzJ9JoIsQ	adf56702-9c98-4957-aa80-70c3a7a22e3f
00000000-0000-0000-0000-000000000000	468	e6AZjK0O82Y2ralhrAe-Fg	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-26 13:52:38.274231+00	2024-11-27 18:28:00.640376+00	KIYBe0fNz0R10CK9vtzVXg	adf56702-9c98-4957-aa80-70c3a7a22e3f
00000000-0000-0000-0000-000000000000	471	15uEzOs3HRf8a-JjQbJe4A	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	t	2024-11-28 17:18:44.604701+00	2024-11-28 20:47:35.779744+00	\N	29bc30ce-2677-452a-be84-f4e2e0ab2e15
00000000-0000-0000-0000-000000000000	477	HAgAJivi6zoxZzmcZv8t6A	15e35919-cc42-42b9-b291-6fae96a073bf	f	2024-12-03 13:51:19.291603+00	2024-12-03 13:51:19.291603+00	eV1YflEnzyb3j6vGevobZQ	73363415-eacb-4443-b483-41466b001fa6
00000000-0000-0000-0000-000000000000	474	qPp6UsWUg0Imsv-frtoZLg	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	t	2024-12-02 12:43:27.037934+00	2024-12-03 21:00:04.349409+00	\N	cfbdbab4-9814-4abc-834d-bcb2a171a320
00000000-0000-0000-0000-000000000000	403	iZsGaCkjIUFOAgbn42Fp6g	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	t	2024-11-12 20:43:56.117878+00	2024-11-12 21:42:58.241359+00	K3Fi0tepyGG1PfgpDhRjVw	9105e40f-bc6f-4201-81cf-0174b3b005b6
00000000-0000-0000-0000-000000000000	482	s-OvWe6Wr4WYb7vAfx32ew	1073b901-a06e-4f42-b5d3-d2359047b2cf	f	2024-12-12 13:20:42.403525+00	2024-12-12 13:20:42.403525+00	\N	d0dad2cb-a15f-4453-ab26-892b3b3cfaba
00000000-0000-0000-0000-000000000000	409	zcLmc4tjqm87D72JpW2eIg	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-12 22:19:09.956432+00	2024-11-12 23:18:09.637673+00	lw03Q7MrPFX8tyiWYT80SA	a6b30d6d-b20c-440c-8a08-13d551de9a5e
00000000-0000-0000-0000-000000000000	405	j6jhmDH8c8PaGq1lRkODWw	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	t	2024-11-12 21:42:58.24212+00	2024-11-13 12:08:26.659055+00	iZsGaCkjIUFOAgbn42Fp6g	9105e40f-bc6f-4201-81cf-0174b3b005b6
00000000-0000-0000-0000-000000000000	412	siOj2oSj1Tgv7kJooOTCkw	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	t	2024-11-13 12:08:26.660159+00	2024-11-13 13:07:29.881573+00	j6jhmDH8c8PaGq1lRkODWw	9105e40f-bc6f-4201-81cf-0174b3b005b6
00000000-0000-0000-0000-000000000000	382	C0fK6PBBeOGoUzAewKcq9Q	aaf972d2-3bfa-48b1-822c-208e4c12ac44	f	2024-11-07 20:22:43.13064+00	2024-11-07 20:22:43.13064+00	zzlV6N3qjPNlXq55hghDxg	08289809-d6f0-45d6-8b7f-1f925041fa43
00000000-0000-0000-0000-000000000000	415	m4IucKxBM8EfjpSxK97Y1g	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-14 11:38:15.221903+00	2024-11-14 12:41:31.911693+00	\N	62b589e6-9f76-47e4-8681-523d1cabd434
00000000-0000-0000-0000-000000000000	418	aTeyhWQ6Llmrh_DdC49m2g	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-14 18:06:24.361801+00	2024-11-14 19:38:01.701645+00	DNPSE48s_9h45sCeJ1QHzg	62b589e6-9f76-47e4-8681-523d1cabd434
00000000-0000-0000-0000-000000000000	352	ZzJW9jW2QBnp8mMdrs-rqQ	aaf972d2-3bfa-48b1-822c-208e4c12ac44	t	2024-11-04 13:36:32.269865+00	2024-11-04 14:35:32.314745+00	\N	08289809-d6f0-45d6-8b7f-1f925041fa43
00000000-0000-0000-0000-000000000000	359	7rKBYtWQHU0wkfEsI22MmA	65ef475c-beff-46a3-b81b-ad117a5e0be9	f	2024-11-05 11:37:53.702553+00	2024-11-05 11:37:53.702553+00	\N	712924a7-1535-43de-8ac4-14468dc5d57a
00000000-0000-0000-0000-000000000000	424	T37HD48C9w3QRJUYmiQM6A	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-15 11:00:17.877643+00	2024-11-15 13:24:03.338683+00	\N	524824d5-5da4-4dba-9530-b49f7b2c9c57
00000000-0000-0000-0000-000000000000	397	Eyh7jc3uQNvnrdNRJphCvA	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	t	2024-11-12 17:46:50.188063+00	2024-11-12 18:45:52.256866+00	uirvLtt1Aftq1UPp0T5luQ	9105e40f-bc6f-4201-81cf-0174b3b005b6
00000000-0000-0000-0000-000000000000	433	zQEc0I8_tEm97Q3sBi5M4g	15e35919-cc42-42b9-b291-6fae96a073bf	f	2024-11-18 10:52:07.53855+00	2024-11-18 10:52:07.53855+00	olsssgjl9Nj2ERKFd8dhUg	524824d5-5da4-4dba-9530-b49f7b2c9c57
00000000-0000-0000-0000-000000000000	427	ADFKcACFF18cvvkyzF59UQ	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-15 14:15:14.848331+00	2024-11-18 13:07:34.69636+00	h7lmD4rKp52hDdG5ciAdPQ	62b589e6-9f76-47e4-8681-523d1cabd434
00000000-0000-0000-0000-000000000000	436	B-C1cYMQUo8IX0bk9wQpDg	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-18 14:19:11.139597+00	2024-11-18 15:18:37.244864+00	OSDXl7iWQDRx5NJbKxWfNA	62b589e6-9f76-47e4-8681-523d1cabd434
00000000-0000-0000-0000-000000000000	439	AepfihyGAjmkmlQTaOLT_A	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-18 19:40:13.310757+00	2024-11-18 21:41:16.205343+00	IwOa9OF3A0MODm98gw1xRA	d6859622-f913-4543-8e3a-846dcafba3f5
00000000-0000-0000-0000-000000000000	442	e00p6NwCa2IqQ5Ej9ueyfA	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-19 11:05:34.734985+00	2024-11-19 12:18:10.583213+00	wFV63vr3jF89u3u-sb4dvw	62b589e6-9f76-47e4-8681-523d1cabd434
00000000-0000-0000-0000-000000000000	448	6zANVgVqWw5S5cSfDfDORA	15e35919-cc42-42b9-b291-6fae96a073bf	f	2024-11-19 20:12:36.866299+00	2024-11-19 20:12:36.866299+00	\N	9103de8c-9792-44f2-8e46-17c08b5121d0
00000000-0000-0000-0000-000000000000	445	4qAvPRnPEjk8fZEIKd7vbA	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-19 14:20:23.221178+00	2024-11-20 20:33:08.837151+00	r5wp3S81R_BCrdOye04Seg	62b589e6-9f76-47e4-8681-523d1cabd434
00000000-0000-0000-0000-000000000000	451	c8dpMV-S866UdjgYzX2eyQ	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-21 10:35:28.964271+00	2024-11-21 11:36:20.911323+00	rMVHL__eSQm29I07HEPjvw	62b589e6-9f76-47e4-8681-523d1cabd434
00000000-0000-0000-0000-000000000000	457	RNuouuvmWqCvK9lbM5fcPQ	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-21 14:39:05.897473+00	2024-11-21 17:04:34.379189+00	83FS7kc933N8BNXKnnFK2g	adf56702-9c98-4957-aa80-70c3a7a22e3f
00000000-0000-0000-0000-000000000000	460	3fsPRgStOy5gRRS_lwIMXQ	15e35919-cc42-42b9-b291-6fae96a073bf	f	2024-11-25 11:12:46.205764+00	2024-11-25 11:12:46.205764+00	\N	45c3edc5-41ba-4b3b-b2e3-63286659e5b4
00000000-0000-0000-0000-000000000000	463	AfdgZpR66W7xx42lt35Qtg	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-25 19:14:21.024246+00	2024-11-26 09:41:03.968386+00	TMZwcm0EUuT9ri8AreADxg	adf56702-9c98-4957-aa80-70c3a7a22e3f
00000000-0000-0000-0000-000000000000	472	DgDs06JhyVqGdoZD8SnYEQ	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	f	2024-11-28 17:48:13.101507+00	2024-11-28 17:48:13.101507+00	\N	9f8e7843-1251-4d15-8d47-744f36a2712f
00000000-0000-0000-0000-000000000000	469	HGlGndUDTa3-2sB5Icco9w	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-26 13:59:33.909123+00	2024-12-03 11:52:28.777303+00	OGpIdtD_DIRkVekLR26FfA	73363415-eacb-4443-b483-41466b001fa6
00000000-0000-0000-0000-000000000000	475	xMikuPMrpY7dsNYmlY2jAQ	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-12-03 11:52:28.784487+00	2024-12-03 12:51:52.627963+00	HGlGndUDTa3-2sB5Icco9w	73363415-eacb-4443-b483-41466b001fa6
00000000-0000-0000-0000-000000000000	478	fkPx9qp73P-lpQjLFjJNqA	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	f	2024-12-03 21:00:04.354402+00	2024-12-03 21:00:04.354402+00	qPp6UsWUg0Imsv-frtoZLg	cfbdbab4-9814-4abc-834d-bcb2a171a320
00000000-0000-0000-0000-000000000000	430	5ws8xa4iC1X1jm8ex9t06g	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	t	2024-11-15 20:15:21.969517+00	2024-12-06 11:54:21.944111+00	2QK0eXLA_lrk0NWdVCnkYQ	e88c71c0-eea4-4bd6-a016-f55cc7d6ab53
00000000-0000-0000-0000-000000000000	479	hNHnOzL9gr_1zorQSCHm6Q	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	t	2024-12-06 11:54:21.955787+00	2024-12-11 22:06:03.793324+00	5ws8xa4iC1X1jm8ex9t06g	e88c71c0-eea4-4bd6-a016-f55cc7d6ab53
00000000-0000-0000-0000-000000000000	410	sV9NOdZOMOHrSwuSUFdlcg	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-12 23:18:09.6394+00	2024-11-13 09:35:41.331993+00	zcLmc4tjqm87D72JpW2eIg	a6b30d6d-b20c-440c-8a08-13d551de9a5e
00000000-0000-0000-0000-000000000000	413	K65N_k6OTgkQaRkQ6zJUuw	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	f	2024-11-13 13:07:29.883645+00	2024-11-13 13:07:29.883645+00	siOj2oSj1Tgv7kJooOTCkw	9105e40f-bc6f-4201-81cf-0174b3b005b6
00000000-0000-0000-0000-000000000000	416	8DZina44nm_2quTh3fjvWQ	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-14 12:41:31.922269+00	2024-11-14 14:53:49.171767+00	m4IucKxBM8EfjpSxK97Y1g	62b589e6-9f76-47e4-8681-523d1cabd434
00000000-0000-0000-0000-000000000000	419	Dukrgjpu-mOMIsawPxccVQ	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-14 19:38:01.703213+00	2024-11-14 21:56:45.968936+00	aTeyhWQ6Llmrh_DdC49m2g	62b589e6-9f76-47e4-8681-523d1cabd434
00000000-0000-0000-0000-000000000000	422	sb7DlBxHUTf0f2xTN8CU-w	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-14 23:25:02.283814+00	2024-11-15 00:25:53.750115+00	\N	73363415-eacb-4443-b483-41466b001fa6
00000000-0000-0000-0000-000000000000	428	a9UQmjKRzhq3kFdt0TTEEA	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	t	2024-11-15 18:01:23.110739+00	2024-11-15 19:15:50.156153+00	\N	e88c71c0-eea4-4bd6-a016-f55cc7d6ab53
00000000-0000-0000-0000-000000000000	425	aqheZfRme0KbpK7q3gbYHw	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-15 13:24:03.342679+00	2024-11-18 09:40:20.977609+00	T37HD48C9w3QRJUYmiQM6A	524824d5-5da4-4dba-9530-b49f7b2c9c57
00000000-0000-0000-0000-000000000000	431	olsssgjl9Nj2ERKFd8dhUg	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-18 09:40:20.985223+00	2024-11-18 10:52:07.53708+00	aqheZfRme0KbpK7q3gbYHw	524824d5-5da4-4dba-9530-b49f7b2c9c57
00000000-0000-0000-0000-000000000000	434	yI-9YLcMsJXQbf4-ZDMKpQ	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-18 12:42:32.487406+00	2024-11-18 18:12:32.285175+00	\N	d6859622-f913-4543-8e3a-846dcafba3f5
00000000-0000-0000-0000-000000000000	357	nqhOFVXYc9bVcJBui9TjUA	65ef475c-beff-46a3-b81b-ad117a5e0be9	f	2024-11-05 11:33:56.112303+00	2024-11-05 11:33:56.112303+00	\N	5aa9de99-7166-4108-839e-96a04a609fd5
00000000-0000-0000-0000-000000000000	440	LXXF7Z4D6F02x4861y4-Ng	15e35919-cc42-42b9-b291-6fae96a073bf	f	2024-11-18 21:41:16.208899+00	2024-11-18 21:41:16.208899+00	AepfihyGAjmkmlQTaOLT_A	d6859622-f913-4543-8e3a-846dcafba3f5
00000000-0000-0000-0000-000000000000	401	K3Fi0tepyGG1PfgpDhRjVw	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	t	2024-11-12 19:44:54.093599+00	2024-11-12 20:43:56.116222+00	2sbVw9tkI4EJeroaMg2bFg	9105e40f-bc6f-4201-81cf-0174b3b005b6
00000000-0000-0000-0000-000000000000	437	CQx3tH9COkC7mFR03jiUDg	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-18 15:18:37.247582+00	2024-11-19 10:06:05.466926+00	B-C1cYMQUo8IX0bk9wQpDg	62b589e6-9f76-47e4-8681-523d1cabd434
00000000-0000-0000-0000-000000000000	443	7faYeCu-QVL_n--TzOc3_g	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-19 12:18:10.585254+00	2024-11-19 13:17:52.088863+00	e00p6NwCa2IqQ5Ej9ueyfA	62b589e6-9f76-47e4-8681-523d1cabd434
00000000-0000-0000-0000-000000000000	446	YLmeaWDu-Eg6ig-p-JjMQw	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-19 18:27:39.670503+00	2024-11-19 19:28:46.769795+00	\N	13e3694b-fd04-4c11-8df9-aeb96731bb0c
00000000-0000-0000-0000-000000000000	449	DZnN62BuAaBdnLRvreYGUQ	15e35919-cc42-42b9-b291-6fae96a073bf	f	2024-11-20 13:55:31.637484+00	2024-11-20 13:55:31.637484+00	\N	3afb9fd3-9718-4350-97b9-731c1880af01
00000000-0000-0000-0000-000000000000	458	0PD5VNjmQ3oqfN5Gqouaug	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-21 17:04:34.379973+00	2024-11-21 21:24:27.560885+00	RNuouuvmWqCvK9lbM5fcPQ	adf56702-9c98-4957-aa80-70c3a7a22e3f
00000000-0000-0000-0000-000000000000	461	TMZwcm0EUuT9ri8AreADxg	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-25 12:57:16.047389+00	2024-11-25 19:14:21.016616+00	nXRY-g8gwNZP7jqOxZlkqg	adf56702-9c98-4957-aa80-70c3a7a22e3f
00000000-0000-0000-0000-000000000000	464	pZf4ZBjc6nabeMzJ9JoIsQ	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-26 09:41:03.976966+00	2024-11-26 11:19:45.772808+00	AfdgZpR66W7xx42lt35Qtg	adf56702-9c98-4957-aa80-70c3a7a22e3f
00000000-0000-0000-0000-000000000000	467	OGpIdtD_DIRkVekLR26FfA	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-11-26 12:59:30.416199+00	2024-11-26 13:59:33.905227+00	KsvsMASwN7tOPi5GWbkFpg	73363415-eacb-4443-b483-41466b001fa6
00000000-0000-0000-0000-000000000000	470	uORbfS3-7aH0RZGM7vGV8g	15e35919-cc42-42b9-b291-6fae96a073bf	f	2024-11-27 18:28:00.64867+00	2024-11-27 18:28:00.64867+00	e6AZjK0O82Y2ralhrAe-Fg	adf56702-9c98-4957-aa80-70c3a7a22e3f
00000000-0000-0000-0000-000000000000	473	AG-10wixNqZE4C1SEUfiHA	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	f	2024-11-28 20:47:35.785507+00	2024-11-28 20:47:35.785507+00	15uEzOs3HRf8a-JjQbJe4A	29bc30ce-2677-452a-be84-f4e2e0ab2e15
00000000-0000-0000-0000-000000000000	476	eV1YflEnzyb3j6vGevobZQ	15e35919-cc42-42b9-b291-6fae96a073bf	t	2024-12-03 12:51:52.63773+00	2024-12-03 13:51:19.287583+00	xMikuPMrpY7dsNYmlY2jAQ	73363415-eacb-4443-b483-41466b001fa6
\.


--
-- Data for Name: saml_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_providers (id, sso_provider_id, entity_id, metadata_xml, metadata_url, attribute_mapping, created_at, updated_at, name_id_format) FROM stdin;
\.


--
-- Data for Name: saml_relay_states; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_relay_states (id, sso_provider_id, request_id, for_email, redirect_to, created_at, updated_at, flow_state_id) FROM stdin;
\.


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.schema_migrations (version) FROM stdin;
20171026211738
20171026211808
20171026211834
20180103212743
20180108183307
20180119214651
20180125194653
00
20210710035447
20210722035447
20210730183235
20210909172000
20210927181326
20211122151130
20211124214934
20211202183645
20220114185221
20220114185340
20220224000811
20220323170000
20220429102000
20220531120530
20220614074223
20220811173540
20221003041349
20221003041400
20221011041400
20221020193600
20221021073300
20221021082433
20221027105023
20221114143122
20221114143410
20221125140132
20221208132122
20221215195500
20221215195800
20221215195900
20230116124310
20230116124412
20230131181311
20230322519590
20230402418590
20230411005111
20230508135423
20230523124323
20230818113222
20230914180801
20231027141322
20231114161723
20231117164230
20240115144230
20240214120130
20240306115329
20240314092811
20240427152123
20240612123726
20240729123726
20240802193726
20240806073726
20241009103726
\.


--
-- Data for Name: sessions; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sessions (id, user_id, created_at, updated_at, factor_id, aal, not_after, refreshed_at, user_agent, ip, tag) FROM stdin;
3afb9fd3-9718-4350-97b9-731c1880af01	15e35919-cc42-42b9-b291-6fae96a073bf	2024-11-20 13:55:31.617838+00	2024-11-20 13:55:31.617838+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	177.100.83.168	\N
adf56702-9c98-4957-aa80-70c3a7a22e3f	15e35919-cc42-42b9-b291-6fae96a073bf	2024-11-21 13:21:49.681604+00	2024-11-27 18:28:00.660802+00	\N	aal1	\N	2024-11-27 18:28:00.66071	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	177.100.83.168	\N
62b589e6-9f76-47e4-8681-523d1cabd434	15e35919-cc42-42b9-b291-6fae96a073bf	2024-11-14 11:38:15.21239+00	2024-11-21 11:36:20.91928+00	\N	aal1	\N	2024-11-21 11:36:20.919202	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	186.249.57.129	\N
08289809-d6f0-45d6-8b7f-1f925041fa43	aaf972d2-3bfa-48b1-822c-208e4c12ac44	2024-11-04 13:36:32.254616+00	2024-11-07 20:22:43.158866+00	\N	aal1	\N	2024-11-07 20:22:43.158788	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36 Edg/130.0.0.0	179.235.156.21	\N
9f4e2dca-5f26-468c-9031-3296667c3dd6	15e35919-cc42-42b9-b291-6fae96a073bf	2024-11-18 09:56:27.926394+00	2024-11-18 09:56:27.926394+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36	177.100.83.168	\N
524824d5-5da4-4dba-9530-b49f7b2c9c57	15e35919-cc42-42b9-b291-6fae96a073bf	2024-11-15 11:00:17.866047+00	2024-11-18 10:52:07.542512+00	\N	aal1	\N	2024-11-18 10:52:07.54244	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36	177.100.83.168	\N
a6b30d6d-b20c-440c-8a08-13d551de9a5e	15e35919-cc42-42b9-b291-6fae96a073bf	2024-11-12 21:20:08.655275+00	2024-11-13 09:35:41.367057+00	\N	aal1	\N	2024-11-13 09:35:41.366156	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	186.249.57.129	\N
9f8e7843-1251-4d15-8d47-744f36a2712f	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	2024-11-28 17:48:13.094754+00	2024-11-28 17:48:13.094754+00	\N	aal1	\N	\N	Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Mobile Safari/537.36	181.77.46.173	\N
9105e40f-bc6f-4201-81cf-0174b3b005b6	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	2024-11-12 16:47:48.72003+00	2024-11-13 13:07:29.886699+00	\N	aal1	\N	2024-11-13 13:07:29.886621	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36	186.249.57.129	\N
29bc30ce-2677-452a-be84-f4e2e0ab2e15	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	2024-11-28 17:18:44.595146+00	2024-11-28 20:47:35.791783+00	\N	aal1	\N	2024-11-28 20:47:35.791706	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	186.249.57.129	\N
d6859622-f913-4543-8e3a-846dcafba3f5	15e35919-cc42-42b9-b291-6fae96a073bf	2024-11-18 12:42:32.484014+00	2024-11-18 21:41:16.215595+00	\N	aal1	\N	2024-11-18 21:41:16.215525	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	177.100.83.168	\N
45c3edc5-41ba-4b3b-b2e3-63286659e5b4	15e35919-cc42-42b9-b291-6fae96a073bf	2024-11-25 11:12:46.189363+00	2024-11-25 11:12:46.189363+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	177.100.83.168	\N
73363415-eacb-4443-b483-41466b001fa6	15e35919-cc42-42b9-b291-6fae96a073bf	2024-11-14 23:25:02.27105+00	2024-12-03 13:51:19.299197+00	\N	aal1	\N	2024-12-03 13:51:19.299111	Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	186.249.57.129	\N
cfbdbab4-9814-4abc-834d-bcb2a171a320	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	2024-12-02 12:43:27.02898+00	2024-12-03 21:00:04.366424+00	\N	aal1	\N	2024-12-03 21:00:04.366329	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	186.249.57.129	\N
13e3694b-fd04-4c11-8df9-aeb96731bb0c	15e35919-cc42-42b9-b291-6fae96a073bf	2024-11-19 18:27:39.658426+00	2024-11-19 19:28:46.783678+00	\N	aal1	\N	2024-11-19 19:28:46.783593	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	177.100.83.168	\N
9103de8c-9792-44f2-8e46-17c08b5121d0	15e35919-cc42-42b9-b291-6fae96a073bf	2024-11-19 20:12:36.858342+00	2024-11-19 20:12:36.858342+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	177.100.83.168	\N
e88c71c0-eea4-4bd6-a016-f55cc7d6ab53	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	2024-11-15 18:01:23.107345+00	2024-12-11 22:06:03.827409+00	\N	aal1	\N	2024-12-11 22:06:03.827319	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	177.37.171.239	\N
d0dad2cb-a15f-4453-ab26-892b3b3cfaba	1073b901-a06e-4f42-b5d3-d2359047b2cf	2024-12-12 13:20:42.402601+00	2024-12-12 13:20:42.402601+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36	186.249.57.129	\N
5aa9de99-7166-4108-839e-96a04a609fd5	65ef475c-beff-46a3-b81b-ad117a5e0be9	2024-11-05 11:33:56.111523+00	2024-11-05 11:33:56.111523+00	\N	aal1	\N	\N	Mozilla/5.0 (iPhone; CPU iPhone OS 17_6_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Mobile/15E148 Safari/604.1	181.77.46.125	\N
712924a7-1535-43de-8ac4-14468dc5d57a	65ef475c-beff-46a3-b81b-ad117a5e0be9	2024-11-05 11:37:53.69967+00	2024-11-05 11:37:53.69967+00	\N	aal1	\N	\N	Mozilla/5.0 (iPhone; CPU iPhone OS 17_6_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Mobile/15E148 Safari/604.1	181.77.49.22	\N
\.


--
-- Data for Name: sso_domains; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_domains (id, sso_provider_id, domain, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: sso_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_providers (id, resource_id, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.users (instance_id, id, aud, role, email, encrypted_password, email_confirmed_at, invited_at, confirmation_token, confirmation_sent_at, recovery_token, recovery_sent_at, email_change_token_new, email_change, email_change_sent_at, last_sign_in_at, raw_app_meta_data, raw_user_meta_data, is_super_admin, created_at, updated_at, phone, phone_confirmed_at, phone_change, phone_change_token, phone_change_sent_at, email_change_token_current, email_change_confirm_status, banned_until, reauthentication_token, reauthentication_sent_at, is_sso_user, deleted_at, is_anonymous) FROM stdin;
00000000-0000-0000-0000-000000000000	15e35919-cc42-42b9-b291-6fae96a073bf	authenticated	authenticated	tenroberto2011@gmail.com	$2a$10$9PNLruaI.Cl89n4rpkguu.SiYma2s1mTwQgTjyhSfSFE7uPbwlkMu	2024-09-26 18:06:51.394674+00	\N		\N		\N			\N	2024-11-25 11:12:46.189272+00	{"provider": "email", "providers": ["email"]}	{"sub": "15e35919-cc42-42b9-b291-6fae96a073bf", "email": "tenroberto2011@gmail.com", "email_verified": false, "phone_verified": false}	\N	2024-09-26 18:06:51.376018+00	2024-12-03 13:51:19.29658+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	authenticated	authenticated	grazielly_nunes@hotmail.com	$2a$10$E9AorHT9eO3.7g6td3mpDeQaN/tOFLzwncyz9qk.JTU233EyYaRNW	2024-10-07 19:59:22.143837+00	\N		\N		\N			\N	2024-12-02 12:43:27.028882+00	{"provider": "email", "providers": ["email"]}	{"sub": "9f3507a5-e0b8-4aeb-9012-addb365fc0e6", "email": "grazielly_nunes@hotmail.com", "email_verified": false, "phone_verified": false}	\N	2024-10-07 19:59:22.131859+00	2024-12-11 22:06:03.819075+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	aaf972d2-3bfa-48b1-822c-208e4c12ac44	authenticated	authenticated	danilorlsa@gmail.com	$2a$10$lpOg66PPV8mvl7iQ/bYrhO6yjdZmFKBfJo0BSoVjTn375bPqbDF3K	2024-11-04 13:36:32.23479+00	\N		\N		\N			\N	2024-11-04 13:36:32.25452+00	{"provider": "email", "providers": ["email"]}	{"sub": "aaf972d2-3bfa-48b1-822c-208e4c12ac44", "email": "danilorlsa@gmail.com", "email_verified": false, "phone_verified": false}	\N	2024-11-04 13:36:32.167309+00	2024-11-07 20:22:43.132712+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	8642fe0a-1c60-4873-a874-d91409a11165	authenticated	authenticated	genival.silva@seds.al.gov.br	$2a$10$cbKo.BV76THwxNSQ96nkn.jN3T9yRBV2sEIner4IdiFeC07u2IqMW	2024-11-05 13:26:12.433421+00	\N		\N		\N			\N	2024-11-26 11:58:22.215372+00	{"provider": "email", "providers": ["email"]}	{"sub": "8642fe0a-1c60-4873-a874-d91409a11165", "email": "genival.silva@seds.al.gov.br", "email_verified": false, "phone_verified": false}	\N	2024-11-05 13:26:12.413557+00	2024-11-26 11:58:22.233881+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	1073b901-a06e-4f42-b5d3-d2359047b2cf	authenticated	authenticated	thaislima.mcz@hotmail.com	$2a$10$IJBcfqYdZq5xFkjsWvn8HuZLPCnmt4A85ujuOiddwGovXH6ZZydoG	2024-12-12 13:20:11.169988+00	\N		\N		\N			\N	2024-12-12 13:20:42.402505+00	{"provider": "email", "providers": ["email"]}	{"sub": "1073b901-a06e-4f42-b5d3-d2359047b2cf", "email": "thaislima.mcz@hotmail.com", "email_verified": false, "phone_verified": false}	\N	2024-12-12 13:20:11.119555+00	2024-12-12 13:20:42.404493+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	fe8199d7-c809-4d51-896f-75626d52f935	authenticated	authenticated	carlos.roberto.ti.dr@gmail.com	$2a$10$EoOJwU6D/TRvunnH1MSWMuQY6enQS2.NdwuwpU2ugVDzgvtkO6KB6	2024-11-06 18:06:20.37218+00	\N		\N		\N			\N	2024-11-06 18:06:20.378337+00	{"provider": "email", "providers": ["email"]}	{"sub": "fe8199d7-c809-4d51-896f-75626d52f935", "email": "carlos.roberto.ti.dr@gmail.com", "email_verified": false, "phone_verified": false}	\N	2024-11-06 18:06:20.337084+00	2024-11-06 18:06:20.385465+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	65ef475c-beff-46a3-b81b-ad117a5e0be9	authenticated	authenticated	djalmatorquato@hotmail.com	$2a$10$2gvMYiSq5oPKwhtQXg0/IuMsSxsf10lgAuZ5sMNwL6zPjtvVXisgS	2024-11-05 11:33:13.054943+00	\N		\N		\N			\N	2024-11-05 11:37:53.699589+00	{"provider": "email", "providers": ["email"]}	{"sub": "65ef475c-beff-46a3-b81b-ad117a5e0be9", "email": "djalmatorquato@hotmail.com", "email_verified": false, "phone_verified": false}	\N	2024-11-05 11:33:13.022564+00	2024-11-05 11:37:53.705141+00	\N	\N			\N		0	\N		\N	f	\N	f
\.


--
-- Data for Name: spatial_ref_sys; Type: TABLE DATA; Schema: extensions; Owner: supabase_admin
--

COPY extensions.spatial_ref_sys (srid, auth_name, auth_srid, srtext, proj4text) FROM stdin;
\.


--
-- Data for Name: key; Type: TABLE DATA; Schema: pgsodium; Owner: supabase_admin
--

COPY pgsodium.key (id, status, created, expires, key_type, key_id, key_context, name, associated_data, raw_key, raw_key_nonce, parent_key, comment, user_data) FROM stdin;
\.


--
-- Data for Name: agencias; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.agencias (agencia_id, nome, descricao, nivel_agencia) FROM stdin;
1	ABIN	\N	1
2	PF	\N	2
4	CHEGII/SSPAL	\N	3
3	PRF		2
5	DINT	\N	4
6	INT/PCAL	\N	4
7	INT/CBMAL	\N	4
8	1BPM/PMAL	\N	5
9	2BPM/PMAL	\N	5
10	3BPM/PMAL	\N	5
11	4BPM/PMAL	\N	5
12	5BPM/PMAL	\N	5
13	6BPM/PMAL	\N	5
14	7BPM/PMAL	\N	5
15	8BPM/PMAL	\N	5
16	9BPM/PMAL	\N	5
17	10BPM/PMAL	\N	5
18	11BPM/PMAL	\N	5
19	12BPM/PMAL	\N	5
20	13BPM/PMAL	\N	5
21	1CPMI/PMAL	\N	6
22	2CPMI/PMAL	\N	6
25	5CPMI/PMAL	\N	6
23	3CPMI/PMAL	\N	6
24	4CPMI/PMAL	\N	6
26	Convidado	Convidado	7
27	Sem agência	Sem agência	9
\.


--
-- Data for Name: cargos; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.cargos (cargo_id, created_at, nome, descricao, faccao_id) FROM stdin;
1	2024-10-10 23:20:06.439492+00	Conselho Geral	Conselho Geral	6
2	2024-10-10 23:20:17.29041+00	Conselho Final dos Finais	Conselho Final dos Finais	6
3	2024-10-14 11:58:34.995012+00	Conselho Rotativo da Regional	Conselho Rotativo da Regional	6
4	2024-10-14 11:58:55.742823+00	Conselho Feminino	Conselho Feminino	6
5	2024-10-14 11:59:17.461502+00	Torres	Torres	6
6	2024-10-14 11:59:31.605599+00	Disciplinas Finais	Disciplinas Finais	6
7	2024-10-14 11:59:48.775803+00	Disciplinas de bairros	Disciplinas de bairros	6
\.


--
-- Data for Name: estados; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.estados (estado_id, nome, sigla, id) FROM stdin;
35	SãoPaulo	SP	1
41	Paraná	PR	2
42	SantaCatarina	SC	3
43	RioGrandedoSul	RS	4
50	MatoGrossodoSul	MS	5
11	Rondônia	RO	6
12	Acre	AC	7
13	Amazonas	AM	8
14	Roraima	RR	9
15	Pará	PA	10
16	Amapá	AP	11
17	Tocantins	TO	12
21	Maranhão	MA	13
24	RioGrandedoNorte	RN	14
25	Paraíba	PB	15
26	Pernambuco	PE	16
27	Alagoas	AL	17
28	Sergipe	SE	18
29	Bahia	BA	19
31	MinasGerais	MG	20
33	RiodeJaneiro	RJ	21
51	MatoGrosso	MT	22
52	Goiás	GO	23
53	DistritoFederal	DF	24
22	Piauí	PI	25
23	Ceará	CE	26
32	EspíritoSanto	ES	27
\.


--
-- Data for Name: faccoes; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.faccoes (faccao_id, created_at, nome, descricao, data_criacao, fundadores, imagem_path) FROM stdin;
17	2024-10-24 21:49:38.037902+00	1533	1533	\N	\N	https://lwbmyeixfxysrddcvnjo.supabase.co/storage/v1/object/public/uploads/faccoes/1729806576068000.png
7	2024-10-09 13:14:48.92247+00	PCC	Primeiro  Comando da Capital	1993-08-31	\N	https://lwbmyeixfxysrddcvnjo.supabase.co/storage/v1/object/public/uploads/faccoes/1728479682320000.png
6	2024-10-09 13:11:18.376139+00	CV	Comando Vermelho	1979-09-17	\N	https://lwbmyeixfxysrddcvnjo.supabase.co/storage/v1/object/public/uploads/faccoes/1728479476452000.png
16	2024-10-09 15:09:50.042803+00	CV-AL	Comando Vermelho de Alagoas -TESTES	\N	\N	https://lwbmyeixfxysrddcvnjo.supabase.co/storage/v1/object/public/uploads/faccoes/1731499817284000.JPG
12	2024-10-09 14:58:50.103586+00	ADA	Amigo dos Amigos-TESTES	\N	\N	https://lwbmyeixfxysrddcvnjo.supabase.co/storage/v1/object/public/uploads/faccoes/1728485924393000.png
\.


--
-- Data for Name: funcoes; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.funcoes (funcao_id, descricao, grau_hierarquico, nome, faccao_id) FROM stdin;
3	Porta-Voz	3	Porta-Voz	6
1	Presidente	1	Presidente	6
2	Vice-Presidente	2	Vice-Presidente	6
4	Tesoureiro	4	Tesoureiro	6
5	Conselho Final dos Cadastros Geral	3	Conselho Final dos Cadastros Geral	6
6	Conselho Final do Progresso Geral	3	Conselho Final do Progresso Geral	6
7	Conselho Final das Dívidas Geral	3	Conselho Final das Dívidas Geral	6
8	 Conselho Final das Biqueiras Geral	3	 Conselho Final das Biqueiras Geral	6
9	Torre e Sintonia Estadual	5	Torre e Sintonia Estadual	6
10	Sintonia Interestadual	5	Sintonia Interestadual	6
11	Responsável pelo Paiol	6	Responsável pelo Paiol	6
12	Conselho Geral das Missões	5	Conselho Geral das Missões	6
13	Conselho Final da ONG e dos Gravatas	5	Conselho Final da ONG e dos Gravatas	6
14	Conselho Final da Disciplina Geral	5	Conselho Final da Disciplina Geral	6
15	Conselho Final dos Interiores	5	Conselho Final dos Interiores	6
16	Conselho Final das Trancas Geral	5	Conselho Final das Trancas Geral	6
17	Conselho Final das Rifas Geral	5	Conselho Final das Rifas Geral	6
18	Orientadoras Gerais de Grupo de Whatsapp	5	Orientadoras Gerais de Grupo de Whatsapp	6
19	Idealizador de Missões	5	Idealizador de Missões	6
20	Final do Cadastro das Biqueiras e Final do Cadastro dos Fornecedores	5	Final do Cadastro das Biqueiras e Final do Cadastro dos Fornecedores	6
21	Disciplina Rotativa Final das Trancas	5	Disciplina Rotativa Final das Trancas	6
22	Disciplina Rotativa Final das Dívidas	5	Disciplina Rotativa Final das Dívidas	6
23	Tesoureiro de área	6	Tesoureiro de área	6
24	Orientadores de grupos de whatsapp de área	6	Orientadores de grupos de whatsapp de área	6
25	Conselho Final dos Fornecedores	3	Conselho Final dos Fornecedores	6
26	Conselho Final dos Jogos	3	Conselho Final dos Jogos	6
\.


--
-- Data for Name: grupos; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.grupos (grupo_id, created_at, nome, descricao) FROM stdin;
\.


--
-- Data for Name: grupos_membros; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.grupos_membros (id, grupo_id, membro_id) FROM stdin;
\.


--
-- Data for Name: membros; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.membros (membro_id, created_at, nome_completo, alcunha, faccao_id, fotos_path, funcao_id, nacionalidade, naturalidade, cpf, identidade, nivel_instrucao, filiacao_mae, filiacao_pai, situacao_mae, situacao_pai, historico, cargo_id, cargo_ant_id, funcao_ant_id, batismo, padrinho, faccao_integrou, faccao_aliada, faccao_inimiga, faccao_senha, membro_endereco, estado_id, municipio_id, infopen, estado_civil, batismo_local, tres_ultimo_locais_preso, alerta, atuacao_crime, validacao_precentual, validacoes, coordenadas, validacao_observacao, identidade_orgao, "membroLngLat", alerta_observacao) FROM stdin;
96	2024-10-30 10:35:11.561793+00	smurfete	{TESTE}	7	{https://lwbmyeixfxysrddcvnjo.supabase.co/storage/v1/object/public/uploads/membros/1733230107788000_0.png}	\N	Nascido no Brasil	sem informação	849.238.492-09	sem informação	Sem informação	sem informação	sem informação	sem informação	sem informação	teste	\N	\N	\N	sem informação	sem informação	\N	\N	\N	sem informação	{"Rua Vasconcelos Duarte, 29, apartamento 111, condominio São Matheus, Maceió/AL"}	\N	\N	Sem informação	Nenhuma das opções	Sem informação	{"Sem informação"}	f	Sem informação	0.7	{"0,1","0,1","0,1"}	{"0.000000, 0.000000"}	sem informação	1	{0,0}	sem informação
102	2024-11-06 20:38:57.296797+00	THIAGO GABRIEL DE DEUS	{"sem informação"}	6	{https://lwbmyeixfxysrddcvnjo.supabase.co/storage/v1/object/public/uploads/membros/1730925534718000_0.JPG}	\N	Nascido no Brasil	Maceió	101.999.804-03	33532818	Sem informação	NIELZA DE DEUS	JOSE ALCIDES GABRIEL	Sem informação	JOSE ALCIDES GABRIEL	sem informação	\N	\N	\N	Não localizado	sem informação	\N	\N	\N	Não localizado	{"Centro, Maceió - AL, Brasil"}	27	1697	Sem informação	Nenhuma das opções	Não localizado	{"Sem informação"}	f	VENDA DE MOTOS ROUBADAS	0.4	{"0,1","0,1","0,1","Atráves de outro(s) órgãos como: PP, MP e etc.","Apenas através de fontes abertas","Através de outra(s) agência de inteligência","Dentro de um Estabelecimento Prisional Estadual"}	{"-9.664857, -35.737670"}	sem informação	1	{-9.6648573,-35.7376698}	sem informação
105	2024-11-12 16:59:14.272922+00	NICOLAS MATHEUS SANTOS ANDRADE	{"NAO POSSUI"}	12	{https://lwbmyeixfxysrddcvnjo.supabase.co/storage/v1/object/public/uploads/membros/1731430751337000_0.JPG}	\N	Nascido no Brasil	sem informação	123.963.774-85	sem informação	Sem informação	ANA LAURA SANTOS	TRAJANO DE ANDRADE	Sem informação	TRAJANO DE ANDRADE	sem informação	\N	\N	\N	NAO OBTIDO	sem informação	\N	\N	\N	NAO OBTIDO	{"Centro, Maceió - AL, Brasil"}	27	1697	Sem informação	Nenhuma das opções	Sem informação	{"Sem informação"}	f	Atua como Gerente	0.7	{"0,1","Validação Local ou área de atuação","Apenas através de informe(s)","Apenas através de Colaborador(es)","Apenas através de informante(s)","Através de outra(s) agência de inteligência"}	{"-9.664857, -35.737670"}	sem informação	1	{-9.6648573,-35.7376698}	sem informação
111	2024-12-12 13:30:08.468486+00	Fulana de tal	{}	\N	{https://lwbmyeixfxysrddcvnjo.supabase.co/storage/v1/object/public/uploads/membros/1734010206953000_0.jpeg}	\N	Nascido no Brasil				\N			\N	\N		\N	\N	\N			\N	\N	\N		{}	27	1697		\N		{}	f		0	{}	{}	\N	1	{}	
108	2024-11-12 17:10:16.160123+00	Anderson Gabriel de Souza Ferreira	{"nao obtido"}	6	{https://lwbmyeixfxysrddcvnjo.supabase.co/storage/v1/object/public/uploads/membros/1731431413214000_0.JPG}	\N	Nascido no Brasil	nao obtido	053.692.564-03	sem informação	Sem informação	Maria do Perpetuo Socorro de Souza Ferreira	Francisco Ferreira da Silva	Sem informação	Francisco Ferreira da Silva	sem informação	\N	\N	\N	nao obtido	sem informação	\N	\N	\N	nao obtido	{"R. Zadir Índio - Centro, Maceió - AL, 57020-480, Brasil","Rua Paulo Ribeiro dos Santos - Tabuleiro do Martins, Maceió - AL, 57061-050, Brasil","Rua Paulo Ribeiro dos Santos - Tabuleiro do Martins, Maceió - AL, 57061-050, Brasil"}	27	1697	Sem informação	Nenhuma das opções	Sem informação	{"Sem informação"}	f	Soldado do tráfico	0.4	{"0,1","Apenas através de Colaborador(es)","Através de outra(s) agência de inteligência"}	{"-9.666520, -35.739042","-9.576061, -35.770603","-9.576061, -35.770603"}	sem informação	1	{-9.66652,-35.7390423,-9.576061299999997,-35.7706035,-9.576061299999997,-35.7706035}	sem informação
110	2024-11-25 13:10:16.293644+00	Danilo Rodrigues	{"Danilo do Pó",Danilinho,"Danilinho do Brown"}	7	{https://lwbmyeixfxysrddcvnjo.supabase.co/storage/v1/object/public/uploads/membros/1732617532290000_0.png}	\N	Naturalizado Brasileiro	Arapiraca	111.111.111-11	não informado	Ensino superior completo	Pai do Danilo	Mãe do Danilo	Viva	Mãe do Danilo	sem informação	\N	\N	\N	sem informação	não  informação	\N	\N	\N	sem informação	{"R. Zadir Índio - Centro, Maceió - AL, 57020-480, Brasil","Centro, Maceió - AL, Brasil","Av. Assis Chateaubriand - Prado, Maceió - AL, Brasil"}	\N	\N	não informado	Casado	sem informação	{"Bandomero Cavalcante"}	f	sem informação	0.3	{"Validação Local ou área de atuação","Apenas através de fontes abertas","Apenas através de informe(s)"}	{"-9.666520, -35.739042","-9.664857, -35.737670","-9.673770, -35.749211"}	\N	1	{-9.66652,-35.739042,-9.664857,-35.73767,-9.67377,-35.749211}	sem informação
\.


--
-- Data for Name: municipios; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.municipios (estado_id, municipio_id, nome, id) FROM stdin;
11	1100015	Alta Floresta D'oeste	1
11	1100023	Ariquemes	2
11	1100031	Cabixi	3
11	1100049	Cacoal	4
11	1100056	Cerejeiras	5
11	1100064	Colorado do Oeste	6
11	1100072	Corumbiara	7
11	1100080	Costa Marques	8
11	1100098	Espigão D'oeste	9
11	1100106	Guajará-Mirim	10
11	1100114	Jaru	11
11	1100122	Ji-Paraná	12
11	1100130	Machadinho D'oeste	13
11	1100148	Nova Brasilândia D'oeste	14
11	1100155	Ouro Preto do Oeste	15
11	1100189	Pimenta Bueno	16
11	1100205	Porto Velho	17
11	1100254	Presidente Médici	18
11	1100262	Rio Crespo	19
11	1100288	Rolim de Moura	20
11	1100296	Santa Luzia D'oeste	21
11	1100304	Vilhena	22
11	1100320	São Miguel do Guaporé	23
11	1100338	Nova Mamoré	24
11	1100346	Alvorada D'oeste	25
11	1100379	Alto Alegre dos Parecis	26
11	1100403	Alto Paraíso	27
11	1100452	Buritis	28
11	1100502	Novo Horizonte do Oeste	29
11	1100601	Cacaulândia	30
11	1100700	Campo Novo de Rondônia	31
11	1100809	Candeias do Jamari	32
11	1100908	Castanheiras	33
11	1100924	Chupinguaia	34
11	1100940	Cujubim	35
11	1101005	Governador Jorge Teixeira	36
11	1101104	Itapuã do Oeste	37
11	1101203	Ministro Andreazza	38
11	1101302	Mirante da Serra	39
11	1101401	Monte Negro	40
11	1101435	Nova União	41
11	1101450	Parecis	42
11	1101468	Pimenteiras do Oeste	43
11	1101476	Primavera de Rondônia	44
11	1101484	São Felipe D'oeste	45
11	1101492	São Francisco do Guaporé	46
11	1101500	Seringueiras	47
11	1101559	Teixeirópolis	48
11	1101609	Theobroma	49
11	1101708	Urupá	50
11	1101757	Vale do Anari	51
11	1101807	Vale do Paraíso	52
12	1200013	Acrelândia	53
12	1200054	Assis Brasil	54
12	1200104	Brasiléia	55
12	1200138	Bujari	56
12	1200179	Capixaba	57
12	1200203	Cruzeiro do Sul	58
12	1200252	Epitaciolândia	59
12	1200302	Feijó	60
12	1200328	Jordão	61
12	1200336	Mâncio Lima	62
12	1200344	Manoel Urbano	63
12	1200351	Marechal Thaumaturgo	64
12	1200385	Plácido de Castro	65
12	1200393	Porto Walter	66
12	1200401	Rio Branco	67
12	1200427	Rodrigues Alves	68
12	1200435	Santa Rosa do Purus	69
12	1200450	Senador Guiomard	70
12	1200500	Sena Madureira	71
12	1200609	Tarauacá	72
12	1200708	Xapuri	73
12	1200807	Porto Acre	74
13	1300029	Alvarães	75
13	1300060	Amaturá	76
13	1300086	Anamã	77
13	1300102	Anori	78
13	1300144	Apuí	79
13	1300201	Atalaia do Norte	80
13	1300300	Autazes	81
13	1300409	Barcelos	82
13	1300508	Barreirinha	83
13	1300607	Benjamin Constant	84
13	1300631	Beruri	85
13	1300680	Boa Vista do Ramos	86
13	1300706	Boca do Acre	87
13	1300805	Borba	88
13	1300839	Caapiranga	89
13	1300904	Canutama	90
13	1301001	Carauari	91
13	1301100	Careiro	92
13	1301159	Careiro da Várzea	93
13	1301209	Coari	94
13	1301308	Codajás	95
13	1301407	Eirunepé	96
13	1301506	Envira	97
13	1301605	Fonte Boa	98
13	1301654	Guajará	99
13	1301704	Humaitá	100
13	1301803	Ipixuna	101
13	1301852	Iranduba	102
13	1301902	Itacoatiara	103
13	1301951	Itamarati	104
13	1302009	Itapiranga	105
13	1302108	Japurá	106
13	1302207	Juruá	107
13	1302306	Jutaí	108
13	1302405	Lábrea	109
13	1302504	Manacapuru	110
13	1302553	Manaquiri	111
13	1302603	Manaus	112
13	1302702	Manicoré	113
13	1302801	Maraã	114
13	1302900	Maués	115
13	1303007	Nhamundá	116
13	1303106	Nova Olinda do Norte	117
13	1303205	Novo Airão	118
13	1303304	Novo Aripuanã	119
13	1303403	Parintins	120
13	1303502	Pauini	121
13	1303536	Presidente Figueiredo	122
13	1303569	Rio Preto da Eva	123
13	1303601	Santa Isabel do Rio Negro	124
13	1303700	Santo Antônio do Içá	125
13	1303809	São Gabriel da Cachoeira	126
13	1303908	São Paulo de Olivença	127
13	1303957	São Sebastião do Uatumã	128
13	1304005	Silves	129
13	1304062	Tabatinga	130
13	1304104	Tapauá	131
13	1304203	Tefé	132
13	1304237	Tonantins	133
13	1304260	Uarini	134
13	1304302	Urucará	135
13	1304401	Urucurituba	136
14	1400027	Amajari	137
14	1400050	Alto Alegre	138
14	1400100	Boa Vista	139
14	1400159	Bonfim	140
14	1400175	Cantá	141
14	1400209	Caracaraí	142
14	1400233	Caroebe	143
14	1400282	Iracema	144
14	1400308	Mucajaí	145
14	1400407	Normandia	146
14	1400456	Pacaraima	147
14	1400472	Rorainópolis	148
14	1400506	São João da Baliza	149
14	1400605	São Luiz	150
14	1400704	Uiramutã	151
15	1500107	Abaetetuba	152
15	1500131	Abel Figueiredo	153
15	1500206	Acará	154
15	1500305	Afuá	155
15	1500347	Água Azul do Norte	156
15	1500404	Alenquer	157
15	1500503	Almeirim	158
15	1500602	Altamira	159
15	1500701	Anajás	160
15	1500800	Ananindeua	161
15	1500859	Anapu	162
15	1500909	Augusto Corrêa	163
15	1500958	Aurora do Pará	164
15	1501006	Aveiro	165
15	1501105	Bagre	166
15	1501204	Baião	167
15	1501253	Bannach	168
15	1501303	Barcarena	169
15	1501402	Belém	170
15	1501451	Belterra	171
15	1501501	Benevides	172
15	1501576	Bom Jesus do Tocantins	173
15	1501600	Bonito	174
15	1501709	Bragança	175
15	1501725	Brasil Novo	176
15	1501758	Brejo Grande do Araguaia	177
15	1501782	Breu Branco	178
15	1501808	Breves	179
15	1501907	Bujaru	180
15	1501956	Cachoeira do Piriá	181
15	1502004	Cachoeira do Arari	182
15	1502103	Cametá	183
15	1502152	Canaã dos Carajás	184
15	1502202	Capanema	185
15	1502301	Capitão Poço	186
15	1502400	Castanhal	187
15	1502509	Chaves	188
15	1502608	Colares	189
15	1502707	Conceição do Araguaia	190
15	1502756	Concórdia do Pará	191
15	1502764	Cumaru do Norte	192
15	1502772	Curionópolis	193
15	1502806	Curralinho	194
15	1502855	Curuá	195
15	1502905	Curuçá	196
15	1502939	dom Eliseu	197
15	1502954	Eldorado do Carajás	198
15	1503002	Faro	199
15	1503044	Floresta do Araguaia	200
15	1503077	Garrafão do Norte	201
15	1503093	Goianésia do Pará	202
15	1503101	Gurupá	203
15	1503200	Igarapé-Açu	204
15	1503309	Igarapé-Miri	205
15	1503408	Inhangapi	206
15	1503457	Ipixuna do Pará	207
15	1503507	Irituia	208
15	1503606	Itaituba	209
15	1503705	Itupiranga	210
15	1503754	Jacareacanga	211
15	1503804	Jacundá	212
15	1503903	Juruti	213
15	1504000	Limoeiro do Ajuru	214
15	1504059	Mãe do Rio	215
15	1504109	Magalhães Barata	216
15	1504208	Marabá	217
15	1504307	Maracanã	218
15	1504406	Marapanim	219
15	1504422	Marituba	220
15	1504455	Medicilândia	221
15	1504505	Melgaço	222
15	1504604	Mocajuba	223
15	1504703	Moju	224
15	1504752	Mojuí dos Campos	225
15	1504802	Monte Alegre	226
15	1504901	Muaná	227
15	1504950	Nova Esperança do Piriá	228
15	1504976	Nova Ipixuna	229
15	1505007	Nova Timboteua	230
15	1505031	Novo Progresso	231
15	1505064	Novo Repartimento	232
15	1505106	Óbidos	233
15	1505205	Oeiras do Pará	234
15	1505304	Oriximiná	235
15	1505403	Ourém	236
15	1505437	Ourilândia do Norte	237
15	1505486	Pacajá	238
15	1505494	Palestina do Pará	239
15	1505502	Paragominas	240
15	1505536	Parauapebas	241
15	1505551	Pau D'arco	242
15	1505601	Peixe-Boi	243
15	1505635	Piçarra	244
15	1505650	Placas	245
15	1505700	Ponta de Pedras	246
15	1505809	Portel	247
15	1505908	Porto de Moz	248
15	1506005	Prainha	249
15	1506104	Primavera	250
15	1506112	Quatipuru	251
15	1506138	Redenção	252
15	1506161	Rio Maria	253
15	1506187	Rondon do Pará	254
15	1506195	Rurópolis	255
15	1506203	Salinópolis	256
15	1506302	Salvaterra	257
15	1506351	Santa Bárbara do Pará	258
15	1506401	Santa Cruz do Arari	259
15	1506500	Santa Izabel do Pará	260
15	1506559	Santa Luzia do Pará	261
15	1506583	Santa Maria das Barreiras	262
15	1506609	Santa Maria do Pará	263
15	1506708	Santana do Araguaia	264
15	1506807	Santarém	265
15	1506906	Santarém Novo	266
15	1507003	Santo Antônio do Tauá	267
15	1507102	São Caetano de Odivelas	268
15	1507151	São domingos do Araguaia	269
15	1507201	São domingos do Capim	270
15	1507300	São Félix do Xingu	271
15	1507409	São Francisco do Pará	272
15	1507458	São Geraldo do Araguaia	273
15	1507466	São João da Ponta	274
15	1507474	São João de Pirabas	275
15	1507508	São João do Araguaia	276
15	1507607	São Miguel do Guamá	277
15	1507706	São Sebastião da Boa Vista	278
15	1507755	Sapucaia	279
15	1507805	Senador José Porfírio	280
15	1507904	Soure	281
15	1507953	Tailândia	282
15	1507961	Terra Alta	283
15	1507979	Terra Santa	284
15	1508001	Tomé-Açu	285
15	1508035	Tracuateua	286
15	1508050	Trairão	287
15	1508084	Tucumã	288
15	1508100	Tucuruí	289
15	1508126	Ulianópolis	290
15	1508159	Uruará	291
15	1508209	Vigia	292
15	1508308	Viseu	293
15	1508357	Vitória do Xingu	294
15	1508407	Xinguara	295
16	1600055	Serra do Navio	296
16	1600105	Amapá	297
16	1600154	Pedra Branca do Amapari	298
16	1600204	Calçoene	299
16	1600212	Cutias	300
16	1600238	Ferreira Gomes	301
16	1600253	Itaubal	302
16	1600279	Laranjal do Jari	303
16	1600303	Macapá	304
16	1600402	Mazagão	305
16	1600501	Oiapoque	306
16	1600535	Porto Grande	307
16	1600550	Pracuúba	308
16	1600600	Santana	309
16	1600709	Tartarugalzinho	310
16	1600808	Vitória do Jari	311
17	1700251	Abreulândia	312
17	1700301	Aguiarnópolis	313
17	1700350	Aliança do Tocantins	314
17	1700400	Almas	315
17	1700707	Alvorada	316
17	1701002	Ananás	317
17	1701051	Angico	318
17	1701101	Aparecida do Rio Negro	319
17	1701309	Aragominas	320
17	1701903	Araguacema	321
17	1702000	Araguaçu	322
17	1702109	Araguaína	323
17	1702158	Araguanã	324
17	1702208	Araguatins	325
17	1702307	Arapoema	326
17	1702406	Arraias	327
17	1702554	Augustinópolis	328
17	1702703	Aurora do Tocantins	329
17	1702901	Axixá do Tocantins	330
17	1703008	Babaçulândia	331
17	1703057	Bandeirantes do Tocantins	332
17	1703073	Barra do Ouro	333
17	1703107	Barrolândia	334
17	1703206	Bernardo Sayão	335
17	1703305	Bom Jesus do Tocantins	336
17	1703602	Brasilândia do Tocantins	337
17	1703701	Brejinho de Nazaré	338
17	1703800	Buriti do Tocantins	339
17	1703826	Cachoeirinha	340
17	1703842	Campos Lindos	341
17	1703867	Cariri do Tocantins	342
17	1703883	Carmolândia	343
17	1703891	Carrasco Bonito	344
17	1703909	Caseara	345
17	1704105	Centenário	346
17	1704600	Chapada de Areia	347
17	1705102	Chapada da Natividade	348
17	1705508	Colinas do Tocantins	349
17	1705557	Combinado	350
17	1705607	Conceição do Tocantins	351
17	1706001	Couto Magalhães	352
17	1706100	Cristalândia	353
17	1706258	Crixás do Tocantins	354
17	1706506	darcinópolis	355
17	1707009	Dianópolis	356
17	1707108	Divinópolis do Tocantins	357
17	1707207	dois Irmãos do Tocantins	358
17	1707306	Dueré	359
17	1707405	Esperantina	360
17	1707553	Fátima	361
17	1707652	Figueirópolis	362
17	1707702	Filadélfia	363
17	1708205	Formoso do Araguaia	364
17	1708254	Fortaleza do Tabocão	365
17	1708304	Goianorte	366
17	1709005	Goiatins	367
17	1709302	Guaraí	368
17	1709500	Gurupi	369
17	1709807	Ipueiras	370
17	1710508	Itacajá	371
17	1710706	Itaguatins	372
17	1710904	Itapiratins	373
17	1711100	Itaporã do Tocantins	374
17	1711506	Jaú do Tocantins	375
17	1711803	Juarina	376
17	1711902	Lagoa da Confusão	377
17	1711951	Lagoa do Tocantins	378
17	1712009	Lajeado	379
17	1712157	Lavandeira	380
17	1712405	Lizarda	381
17	1712454	Luzinópolis	382
17	1712504	Marianópolis do Tocantins	383
17	1712702	Mateiros	384
17	1712801	Maurilândia do Tocantins	385
17	1713205	Miracema do Tocantins	386
17	1713304	Miranorte	387
17	1713601	Monte do Carmo	388
17	1713700	Monte Santo do Tocantins	389
17	1713809	Palmeiras do Tocantins	390
17	1713957	Muricilândia	391
17	1714203	Natividade	392
17	1714302	Nazaré	393
17	1714880	Nova Olinda	394
17	1715002	Nova Rosalândia	395
17	1715101	Novo Acordo	396
17	1715150	Novo Alegre	397
17	1715259	Novo Jardim	398
17	1715507	Oliveira de Fátima	399
17	1715705	Palmeirante	400
17	1715754	Palmeirópolis	401
17	1716109	Paraíso do Tocantins	402
17	1716208	Paranã	403
17	1716307	Pau D'arco	404
17	1716505	Pedro Afonso	405
17	1716604	Peixe	406
17	1716653	Pequizeiro	407
17	1716703	Colméia	408
17	1717008	Pindorama do Tocantins	409
17	1717206	Piraquê	410
17	1717503	Pium	411
17	1717800	Ponte Alta do Bom Jesus	412
17	1717909	Ponte Alta do Tocantins	413
17	1718006	Porto Alegre do Tocantins	414
17	1718204	Porto Nacional	415
17	1718303	Praia Norte	416
17	1718402	Presidente Kennedy	417
17	1718451	Pugmil	418
17	1718501	Recursolândia	419
17	1718550	Riachinho	420
17	1718659	Rio da Conceição	421
17	1718709	Rio dos Bois	422
17	1718758	Rio Sono	423
17	1718808	Sampaio	424
17	1718840	Sandolândia	425
17	1718865	Santa Fé do Araguaia	426
17	1718881	Santa Maria do Tocantins	427
17	1718899	Santa Rita do Tocantins	428
17	1718907	Santa Rosa do Tocantins	429
17	1719004	Santa Tereza do Tocantins	430
17	1720002	Santa Terezinha do Tocantins	431
17	1720101	São Bento do Tocantins	432
17	1720150	São Félix do Tocantins	433
17	1720200	São Miguel do Tocantins	434
17	1720259	São Salvador do Tocantins	435
17	1720309	São Sebastião do Tocantins	436
17	1720499	São Valério	437
17	1720655	Silvanópolis	438
17	1720804	Sítio Novo do Tocantins	439
17	1720853	Sucupira	440
17	1720903	Taguatinga	441
17	1720937	Taipas do Tocantins	442
17	1720978	Talismã	443
17	1721000	Palmas	444
17	1721109	Tocantínia	445
17	1721208	Tocantinópolis	446
17	1721257	Tupirama	447
17	1721307	Tupiratins	448
17	1722081	Wanderlândia	449
17	1722107	Xambioá	450
21	2100055	Açailândia	451
21	2100105	Afonso Cunha	452
21	2100154	Água doce do Maranhão	453
21	2100204	Alcântara	454
21	2100303	Aldeias Altas	455
21	2100402	Altamira do Maranhão	456
21	2100436	Alto Alegre do Maranhão	457
21	2100477	Alto Alegre do Pindaré	458
21	2100501	Alto Parnaíba	459
21	2100550	Amapá do Maranhão	460
21	2100600	Amarante do Maranhão	461
21	2100709	Anajatuba	462
21	2100808	Anapurus	463
21	2100832	Apicum-Açu	464
21	2100873	Araguanã	465
21	2100907	Araioses	466
21	2100956	Arame	467
21	2101004	Arari	468
21	2101103	Axixá	469
21	2101202	Bacabal	470
21	2101251	Bacabeira	471
21	2101301	Bacuri	472
21	2101350	Bacurituba	473
21	2101400	Balsas	474
21	2101509	Barão de Grajaú	475
21	2101608	Barra do Corda	476
21	2101707	Barreirinhas	477
21	2101731	Belágua	478
21	2101772	Bela Vista do Maranhão	479
21	2101806	Benedito Leite	480
21	2101905	Bequimão	481
21	2101939	Bernardo do Mearim	482
21	2101970	Boa Vista do Gurupi	483
21	2102002	Bom Jardim	484
21	2102036	Bom Jesus das Selvas	485
21	2102077	Bom Lugar	486
21	2102101	Brejo	487
21	2102150	Brejo de Areia	488
21	2102200	Buriti	489
21	2102309	Buriti Bravo	490
21	2102325	Buriticupu	491
21	2102358	Buritirana	492
21	2102374	Cachoeira Grande	493
21	2102408	Cajapió	494
21	2102507	Cajari	495
21	2102556	Campestre do Maranhão	496
21	2102606	Cândido Mendes	497
21	2102705	Cantanhede	498
21	2102754	Capinzal do Norte	499
21	2102804	Carolina	500
21	2102903	Carutapera	501
21	2103000	Caxias	502
21	2103109	Cedral	503
21	2103125	Central do Maranhão	504
21	2103158	Centro do Guilherme	505
21	2103174	Centro Novo do Maranhão	506
21	2103208	Chapadinha	507
21	2103257	Cidelândia	508
21	2103307	Codó	509
21	2103406	Coelho Neto	510
21	2103505	Colinas	511
21	2103554	Conceição do Lago-Açu	512
21	2103604	Coroatá	513
21	2103703	Cururupu	514
21	2103752	davinópolis	515
21	2103802	dom Pedro	516
21	2103901	Duque Bacelar	517
21	2104008	Esperantinópolis	518
21	2104057	Estreito	519
21	2104073	Feira Nova do Maranhão	520
21	2104081	Fernando Falcão	521
21	2104099	Formosa da Serra Negra	522
21	2104107	Fortaleza dos Nogueiras	523
21	2104206	Fortuna	524
21	2104305	Godofredo Viana	525
21	2104404	Gonçalves Dias	526
21	2104503	Governador Archer	527
21	2104552	Governador Edison Lobão	528
21	2104602	Governador Eugênio Barros	529
21	2104628	Governador Luiz Rocha	530
21	2104651	Governador Newton Bello	531
21	2104677	Governador Nunes Freire	532
21	2104701	Graça Aranha	533
21	2104800	Grajaú	534
21	2104909	Guimarães	535
21	2105005	Humberto de Campos	536
21	2105104	Icatu	537
21	2105153	Igarapé do Meio	538
21	2105203	Igarapé Grande	539
21	2105302	Imperatriz	540
21	2105351	Itaipava do Grajaú	541
21	2105401	Itapecuru Mirim	542
21	2105427	Itinga do Maranhão	543
21	2105450	Jatobá	544
21	2105476	Jenipapo dos Vieiras	545
21	2105500	João Lisboa	546
21	2105609	Joselândia	547
21	2105658	Junco do Maranhão	548
21	2105708	Lago da Pedra	549
21	2105807	Lago do Junco	550
21	2105906	Lago Verde	551
21	2105922	Lagoa do Mato	552
21	2105948	Lago dos Rodrigues	553
21	2105963	Lagoa Grande do Maranhão	554
21	2105989	Lajeado Novo	555
21	2106003	Lima Campos	556
21	2106102	Loreto	557
21	2106201	Luís domingues	558
21	2106300	Magalhães de Almeida	559
21	2106326	Maracaçumé	560
21	2106359	Marajá do Sena	561
21	2106375	Maranhãozinho	562
21	2106409	Mata Roma	563
21	2106508	Matinha	564
21	2106607	Matões	565
21	2106631	Matões do Norte	566
21	2106672	Milagres do Maranhão	567
21	2106706	Mirador	568
21	2106755	Miranda do Norte	569
21	2106805	Mirinzal	570
21	2106904	Monção	571
21	2107001	Montes Altos	572
21	2107100	Morros	573
21	2107209	Nina Rodrigues	574
21	2107258	Nova Colinas	575
21	2107308	Nova Iorque	576
21	2107357	Nova Olinda do Maranhão	577
21	2107407	Olho D'água das Cunhãs	578
21	2107456	Olinda Nova do Maranhão	579
21	2107506	Paço do Lumiar	580
21	2107605	Palmeirândia	581
21	2107704	Paraibano	582
21	2107803	Parnarama	583
21	2107902	Passagem Franca	584
21	2108009	Pastos Bons	585
21	2108058	Paulino Neves	586
21	2108108	Paulo Ramos	587
21	2108207	Pedreiras	588
21	2108256	Pedro do Rosário	589
21	2108306	Penalva	590
21	2108405	Peri Mirim	591
21	2108454	Peritoró	592
21	2108504	Pindaré-Mirim	593
21	2108603	Pinheiro	594
21	2108702	Pio Xii	595
21	2108801	Pirapemas	596
21	2108900	Poção de Pedras	597
21	2109007	Porto Franco	598
21	2109056	Porto Rico do Maranhão	599
21	2109106	Presidente Dutra	600
21	2109205	Presidente Juscelino	601
21	2109239	Presidente Médici	602
21	2109270	Presidente Sarney	603
21	2109304	Presidente Vargas	604
21	2109403	Primeira Cruz	605
21	2109452	Raposa	606
21	2109502	Riachão	607
21	2109551	Ribamar Fiquene	608
21	2109601	Rosário	609
21	2109700	Sambaíba	610
21	2109759	Santa Filomena do Maranhão	611
21	2109809	Santa Helena	612
21	2109908	Santa Inês	613
21	2110005	Santa Luzia	614
21	2110039	Santa Luzia do Paruá	615
21	2110104	Santa Quitéria do Maranhão	616
21	2110203	Santa Rita	617
21	2110237	Santana do Maranhão	618
21	2110278	Santo Amaro do Maranhão	619
21	2110302	Santo Antônio dos Lopes	620
21	2110401	São Benedito do Rio Preto	621
21	2110500	São Bento	622
21	2110609	São Bernardo	623
21	2110658	São domingos do Azeitão	624
21	2110708	São domingos do Maranhão	625
21	2110807	São Félix de Balsas	626
21	2110856	São Francisco do Brejão	627
21	2110906	São Francisco do Maranhão	628
21	2111003	São João Batista	629
21	2111029	São João do Carú	630
21	2111052	São João do Paraíso	631
21	2111078	São João do Soter	632
21	2111102	São João dos Patos	633
21	2111201	São José de Ribamar	634
21	2111250	São José dos Basílios	635
21	2111300	São Luís	636
21	2111409	São Luís Gonzaga do Maranhão	637
21	2111508	São Mateus do Maranhão	638
21	2111532	São Pedro da Água Branca	639
21	2111573	São Pedro dos Crentes	640
21	2111607	São Raimundo das Mangabeiras	641
21	2111631	São Raimundo do doca Bezerra	642
21	2111672	São Roberto	643
21	2111706	São Vicente Ferrer	644
21	2111722	Satubinha	645
21	2111748	Senador Alexandre Costa	646
21	2111763	Senador La Rocque	647
21	2111789	Serrano do Maranhão	648
21	2111805	Sítio Novo	649
21	2111904	Sucupira do Norte	650
21	2111953	Sucupira do Riachão	651
21	2112001	Tasso Fragoso	652
21	2112100	Timbiras	653
21	2112209	Timon	654
21	2112233	Trizidela do Vale	655
21	2112274	Tufilândia	656
21	2112308	Tuntum	657
21	2112407	Turiaçu	658
21	2112456	Turilândia	659
21	2112506	Tutóia	660
21	2112605	Urbano Santos	661
21	2112704	Vargem Grande	662
21	2112803	Viana	663
21	2112852	Vila Nova dos Martírios	664
21	2112902	Vitória do Mearim	665
21	2113009	Vitorino Freire	666
21	2114007	Zé doca	667
22	2200053	Acauã	668
22	2200103	Agricolândia	669
22	2200202	Água Branca	670
22	2200251	Alagoinha do Piauí	671
22	2200277	Alegrete do Piauí	672
22	2200301	Alto Longá	673
22	2200400	Altos	674
22	2200459	Alvorada do Gurguéia	675
22	2200509	Amarante	676
22	2200608	Angical do Piauí	677
22	2200707	Anísio de Abreu	678
22	2200806	Antônio Almeida	679
22	2200905	Aroazes	680
22	2200954	Aroeiras do Itaim	681
22	2201002	Arraial	682
22	2201051	Assunção do Piauí	683
22	2201101	Avelino Lopes	684
22	2201150	Baixa Grande do Ribeiro	685
22	2201176	Barra D'alcântara	686
22	2201200	Barras	687
22	2201309	Barreiras do Piauí	688
22	2201408	Barro Duro	689
22	2201507	Batalha	690
22	2201556	Bela Vista do Piauí	691
22	2201572	Belém do Piauí	692
22	2201606	Beneditinos	693
22	2201705	Bertolínia	694
22	2201739	Betânia do Piauí	695
22	2201770	Boa Hora	696
22	2201804	Bocaina	697
22	2201903	Bom Jesus	698
22	2201919	Bom Princípio do Piauí	699
22	2201929	Bonfim do Piauí	700
22	2201945	Boqueirão do Piauí	701
22	2201960	Brasileira	702
22	2201988	Brejo do Piauí	703
22	2202000	Buriti dos Lopes	704
22	2202026	Buriti dos Montes	705
22	2202059	Cabeceiras do Piauí	706
22	2202075	Cajazeiras do Piauí	707
22	2202083	Cajueiro da Praia	708
22	2202091	Caldeirão Grande do Piauí	709
22	2202109	Campinas do Piauí	710
22	2202117	Campo Alegre do Fidalgo	711
22	2202133	Campo Grande do Piauí	712
22	2202174	Campo Largo do Piauí	713
22	2202208	Campo Maior	714
22	2202251	Canavieira	715
22	2202307	Canto do Buriti	716
22	2202406	Capitão de Campos	717
22	2202455	Capitão Gervásio Oliveira	718
22	2202505	Caracol	719
22	2202539	Caraúbas do Piauí	720
22	2202554	Caridade do Piauí	721
22	2202604	Castelo do Piauí	722
22	2202653	Caxingó	723
22	2202703	Cocal	724
22	2202711	Cocal de Telha	725
22	2202729	Cocal dos Alves	726
22	2202737	Coivaras	727
22	2202752	Colônia do Gurguéia	728
22	2202778	Colônia do Piauí	729
22	2202802	Conceição do Canindé	730
22	2202851	Coronel José Dias	731
22	2202901	Corrente	732
22	2203008	Cristalândia do Piauí	733
22	2203107	Cristino Castro	734
22	2203206	Curimatá	735
22	2203230	Currais	736
22	2203255	Curralinhos	737
22	2203271	Curral Novo do Piauí	738
22	2203305	demerval Lobão	739
22	2203354	Dirceu Arcoverde	740
22	2203404	dom Expedito Lopes	741
22	2203420	domingos Mourão	742
22	2203453	dom Inocêncio	743
22	2203503	Elesbão Veloso	744
22	2203602	Eliseu Martins	745
22	2203701	Esperantina	746
22	2203750	Fartura do Piauí	747
22	2203800	Flores do Piauí	748
22	2203859	Floresta do Piauí	749
22	2203909	Floriano	750
22	2204006	Francinópolis	751
22	2204105	Francisco Ayres	752
22	2204154	Francisco Macedo	753
22	2204204	Francisco Santos	754
22	2204303	Fronteiras	755
22	2204352	Geminiano	756
22	2204402	Gilbués	757
22	2204501	Guadalupe	758
22	2204550	Guaribas	759
22	2204600	Hugo Napoleão	760
22	2204659	Ilha Grande	761
22	2204709	Inhuma	762
22	2204808	Ipiranga do Piauí	763
22	2204907	Isaías Coelho	764
22	2205003	Itainópolis	765
22	2205102	Itaueira	766
22	2205151	Jacobina do Piauí	767
22	2205201	Jaicós	768
22	2205250	Jardim do Mulato	769
22	2205276	Jatobá do Piauí	770
22	2205300	Jerumenha	771
22	2205359	João Costa	772
22	2205409	Joaquim Pires	773
22	2205458	Joca Marques	774
22	2205508	José de Freitas	775
22	2205516	Juazeiro do Piauí	776
22	2205524	Júlio Borges	777
22	2205532	Jurema	778
22	2205540	Lagoinha do Piauí	779
22	2205557	Lagoa Alegre	780
22	2205565	Lagoa do Barro do Piauí	781
22	2205573	Lagoa de São Francisco	782
22	2205581	Lagoa do Piauí	783
22	2205599	Lagoa do Sítio	784
22	2205607	Landri Sales	785
22	2205706	Luís Correia	786
22	2205805	Luzilândia	787
22	2205854	Madeiro	788
22	2205904	Manoel Emídio	789
22	2205953	Marcolândia	790
22	2206001	Marcos Parente	791
22	2206050	Massapê do Piauí	792
22	2206100	Matias Olímpio	793
22	2206209	Miguel Alves	794
22	2206308	Miguel Leão	795
22	2206357	Milton Brandão	796
22	2206407	Monsenhor Gil	797
22	2206506	Monsenhor Hipólito	798
22	2206605	Monte Alegre do Piauí	799
22	2206654	Morro Cabeça No Tempo	800
22	2206670	Morro do Chapéu do Piauí	801
22	2206696	Murici dos Portelas	802
22	2206704	Nazaré do Piauí	803
22	2206720	Nazária	804
22	2206753	Nossa Senhora de Nazaré	805
22	2206803	Nossa Senhora dos Remédios	806
22	2206902	Novo Oriente do Piauí	807
22	2206951	Novo Santo Antônio	808
22	2207009	Oeiras	809
22	2207108	Olho D'água do Piauí	810
22	2207207	Padre Marcos	811
22	2207306	Paes Landim	812
22	2207355	Pajeú do Piauí	813
22	2207405	Palmeira do Piauí	814
22	2207504	Palmeirais	815
22	2207553	Paquetá	816
22	2207603	Parnaguá	817
22	2207702	Parnaíba	818
22	2207751	Passagem Franca do Piauí	819
22	2207777	Patos do Piauí	820
22	2207793	Pau D'arco do Piauí	821
22	2207801	Paulistana	822
22	2207850	Pavussu	823
22	2207900	Pedro Ii	824
22	2207934	Pedro Laurentino	825
22	2207959	Nova Santa Rita	826
22	2208007	Picos	827
22	2208106	Pimenteiras	828
22	2208205	Pio Ix	829
22	2208304	Piracuruca	830
22	2208403	Piripiri	831
22	2208502	Porto	832
22	2208551	Porto Alegre do Piauí	833
22	2208601	Prata do Piauí	834
22	2208650	Queimada Nova	835
22	2208700	Redenção do Gurguéia	836
22	2208809	Regeneração	837
22	2208858	Riacho Frio	838
22	2208874	Ribeira do Piauí	839
22	2208908	Ribeiro Gonçalves	840
22	2209005	Rio Grande do Piauí	841
22	2209104	Santa Cruz do Piauí	842
22	2209153	Santa Cruz dos Milagres	843
22	2209203	Santa Filomena	844
22	2209302	Santa Luz	845
22	2209351	Santana do Piauí	846
22	2209377	Santa Rosa do Piauí	847
22	2209401	Santo Antônio de Lisboa	848
22	2209450	Santo Antônio dos Milagres	849
22	2209500	Santo Inácio do Piauí	850
22	2209559	São Braz do Piauí	851
22	2209609	São Félix do Piauí	852
22	2209658	São Francisco de Assis do Piauí	853
22	2209708	São Francisco do Piauí	854
22	2209757	São Gonçalo do Gurguéia	855
22	2209807	São Gonçalo do Piauí	856
22	2209856	São João da Canabrava	857
22	2209872	São João da Fronteira	858
22	2209906	São João da Serra	859
22	2209955	São João da Varjota	860
22	2209971	São João do Arraial	861
22	2210003	São João do Piauí	862
22	2210052	São José do Divino	863
22	2210102	São José do Peixe	864
22	2210201	São José do Piauí	865
22	2210300	São Julião	866
22	2210359	São Lourenço do Piauí	867
22	2210375	São Luis do Piauí	868
22	2210383	São Miguel da Baixa Grande	869
22	2210391	São Miguel do Fidalgo	870
22	2210409	São Miguel do Tapuio	871
22	2210508	São Pedro do Piauí	872
22	2210607	São Raimundo Nonato	873
22	2210623	Sebastião Barros	874
22	2210631	Sebastião Leal	875
22	2210656	Sigefredo Pacheco	876
22	2210706	Simões	877
22	2210805	Simplício Mendes	878
22	2210904	Socorro do Piauí	879
22	2210938	Sussuapara	880
22	2210953	Tamboril do Piauí	881
22	2210979	Tanque do Piauí	882
22	2211001	Teresina	883
22	2211100	União	884
22	2211209	Uruçuí	885
22	2211308	Valença do Piauí	886
22	2211357	Várzea Branca	887
22	2211407	Várzea Grande	888
22	2211506	Vera Mendes	889
22	2211605	Vila Nova do Piauí	890
22	2211704	Wall Ferraz	891
23	2300101	Abaiara	892
23	2300150	Acarape	893
23	2300200	Acaraú	894
23	2300309	Acopiara	895
23	2300408	Aiuaba	896
23	2300507	Alcântaras	897
23	2300606	Altaneira	898
23	2300705	Alto Santo	899
23	2300754	Amontada	900
23	2300804	Antonina do Norte	901
23	2300903	Apuiarés	902
23	2301000	Aquiraz	903
23	2301109	Aracati	904
23	2301208	Aracoiaba	905
23	2301257	Ararendá	906
23	2301307	Araripe	907
23	2301406	Aratuba	908
23	2301505	Arneiroz	909
23	2301604	Assaré	910
23	2301703	Aurora	911
23	2301802	Baixio	912
23	2301851	Banabuiú	913
23	2301901	Barbalha	914
23	2301950	Barreira	915
23	2302008	Barro	916
23	2302057	Barroquinha	917
23	2302107	Baturité	918
23	2302206	Beberibe	919
23	2302305	Bela Cruz	920
23	2302404	Boa Viagem	921
23	2302503	Brejo Santo	922
23	2302602	Camocim	923
23	2302701	Campos Sales	924
23	2302800	Canindé	925
23	2302909	Capistrano	926
23	2303006	Caridade	927
23	2303105	Cariré	928
23	2303204	Caririaçu	929
23	2303303	Cariús	930
23	2303402	Carnaubal	931
23	2303501	Cascavel	932
23	2303600	Catarina	933
23	2303659	Catunda	934
23	2303709	Caucaia	935
23	2303808	Cedro	936
23	2303907	Chaval	937
23	2303931	Choró	938
23	2303956	Chorozinho	939
23	2304004	Coreaú	940
23	2304103	Crateús	941
23	2304202	Crato	942
23	2304236	Croatá	943
23	2304251	Cruz	944
23	2304269	deputado Irapuan Pinheiro	945
23	2304277	Ererê	946
23	2304285	Eusébio	947
23	2304301	Farias Brito	948
23	2304350	Forquilha	949
23	2304400	Fortaleza	950
23	2304459	Fortim	951
23	2304509	Frecheirinha	952
23	2304608	General Sampaio	953
23	2304657	Graça	954
23	2304707	Granja	955
23	2304806	Granjeiro	956
23	2304905	Groaíras	957
23	2304954	Guaiúba	958
23	2305001	Guaraciaba do Norte	959
23	2305100	Guaramiranga	960
23	2305209	Hidrolândia	961
23	2305233	Horizonte	962
23	2305266	Ibaretama	963
23	2305308	Ibiapina	964
23	2305332	Ibicuitinga	965
23	2305357	Icapuí	966
23	2305407	Icó	967
23	2305506	Iguatu	968
23	2305605	Independência	969
23	2305654	Ipaporanga	970
23	2305704	Ipaumirim	971
23	2305803	Ipu	972
23	2305902	Ipueiras	973
23	2306009	Iracema	974
23	2306108	Irauçuba	975
23	2306207	Itaiçaba	976
23	2306256	Itaitinga	977
23	2306306	Itapajé	978
23	2306405	Itapipoca	979
23	2306504	Itapiúna	980
23	2306553	Itarema	981
23	2306603	Itatira	982
23	2306702	Jaguaretama	983
23	2306801	Jaguaribara	984
23	2306900	Jaguaribe	985
23	2307007	Jaguaruana	986
23	2307106	Jardim	987
23	2307205	Jati	988
23	2307254	Jijoca de Jericoacoara	989
23	2307304	Juazeiro do Norte	990
23	2307403	Jucás	991
23	2307502	Lavras da Mangabeira	992
23	2307601	Limoeiro do Norte	993
23	2307635	Madalena	994
23	2307650	Maracanaú	995
23	2307700	Maranguape	996
23	2307809	Marco	997
23	2307908	Martinópole	998
23	2308005	Massapê	999
23	2308104	Mauriti	1000
23	2308203	Meruoca	1001
23	2308302	Milagres	1002
23	2308351	Milhã	1003
23	2308377	Miraíma	1004
23	2308401	Missão Velha	1005
23	2308500	Mombaça	1006
23	2308609	Monsenhor Tabosa	1007
23	2308708	Morada Nova	1008
23	2308807	Moraújo	1009
23	2308906	Morrinhos	1010
23	2309003	Mucambo	1011
23	2309102	Mulungu	1012
23	2309201	Nova Olinda	1013
23	2309300	Nova Russas	1014
23	2309409	Novo Oriente	1015
23	2309458	Ocara	1016
23	2309508	Orós	1017
23	2309607	Pacajus	1018
23	2309706	Pacatuba	1019
23	2309805	Pacoti	1020
23	2309904	Pacujá	1021
23	2310001	Palhano	1022
23	2310100	Palmácia	1023
23	2310209	Paracuru	1024
23	2310258	Paraipaba	1025
23	2310308	Parambu	1026
23	2310407	Paramoti	1027
23	2310506	Pedra Branca	1028
23	2310605	Penaforte	1029
23	2310704	Pentecoste	1030
23	2310803	Pereiro	1031
23	2310852	Pindoretama	1032
23	2310902	Piquet Carneiro	1033
23	2310951	Pires Ferreira	1034
23	2311009	Poranga	1035
23	2311108	Porteiras	1036
23	2311207	Potengi	1037
23	2311231	Potiretama	1038
23	2311264	Quiterianópolis	1039
23	2311306	Quixadá	1040
23	2311355	Quixelô	1041
23	2311405	Quixeramobim	1042
23	2311504	Quixeré	1043
23	2311603	Redenção	1044
23	2311702	Reriutaba	1045
23	2311801	Russas	1046
23	2311900	Saboeiro	1047
23	2311959	Salitre	1048
23	2312007	Santana do Acaraú	1049
23	2312106	Santana do Cariri	1050
23	2312205	Santa Quitéria	1051
23	2312304	São Benedito	1052
23	2312403	São Gonçalo do Amarante	1053
23	2312502	São João do Jaguaribe	1054
23	2312601	São Luís do Curu	1055
23	2312700	Senador Pompeu	1056
23	2312809	Senador Sá	1057
23	2312908	Sobral	1058
23	2313005	Solonópole	1059
23	2313104	Tabuleiro do Norte	1060
23	2313203	Tamboril	1061
23	2313252	Tarrafas	1062
23	2313302	Tauá	1063
23	2313351	Tejuçuoca	1064
23	2313401	Tianguá	1065
23	2313500	Trairi	1066
23	2313559	Tururu	1067
23	2313609	Ubajara	1068
23	2313708	Umari	1069
23	2313757	Umirim	1070
23	2313807	Uruburetama	1071
23	2313906	Uruoca	1072
23	2313955	Varjota	1073
23	2314003	Várzea Alegre	1074
23	2314102	Viçosa do Ceará	1075
24	2400109	Acari	1076
24	2400208	Açu	1077
24	2400307	Afonso Bezerra	1078
24	2400406	Água Nova	1079
24	2400505	Alexandria	1080
24	2400604	Almino Afonso	1081
24	2400703	Alto do Rodrigues	1082
24	2400802	Angicos	1083
24	2400901	Antônio Martins	1084
24	2401008	Apodi	1085
24	2401107	Areia Branca	1086
24	2401206	Arês	1087
24	2401305	Augusto Severo	1088
24	2401404	Baía Formosa	1089
24	2401453	Baraúna	1090
24	2401503	Barcelona	1091
24	2401602	Bento Fernandes	1092
24	2401651	Bodó	1093
24	2401701	Bom Jesus	1094
24	2401800	Brejinho	1095
24	2401859	Caiçara do Norte	1096
24	2401909	Caiçara do Rio do Vento	1097
24	2402006	Caicó	1098
24	2402105	Campo Redondo	1099
24	2402204	Canguaretama	1100
24	2402303	Caraúbas	1101
24	2402402	Carnaúba dos dantas	1102
24	2402501	Carnaubais	1103
24	2402600	Ceará-Mirim	1104
24	2402709	Cerro Corá	1105
24	2402808	Coronel Ezequiel	1106
24	2402907	Coronel João Pessoa	1107
24	2403004	Cruzeta	1108
24	2403103	Currais Novos	1109
24	2403202	doutor Severiano	1110
24	2403251	Parnamirim	1111
24	2403301	Encanto	1112
24	2403400	Equador	1113
24	2403509	Espírito Santo	1114
24	2403608	Extremoz	1115
24	2403707	Felipe Guerra	1116
24	2403756	Fernando Pedroza	1117
24	2403806	Florânia	1118
24	2403905	Francisco dantas	1119
24	2404002	Frutuoso Gomes	1120
24	2404101	Galinhos	1121
24	2404200	Goianinha	1122
24	2404309	Governador Dix-Sept Rosado	1123
24	2404408	Grossos	1124
24	2404507	Guamaré	1125
24	2404606	Ielmo Marinho	1126
24	2404705	Ipanguaçu	1127
24	2404804	Ipueira	1128
24	2404853	Itajá	1129
24	2404903	Itaú	1130
24	2405009	Jaçanã	1131
24	2405108	Jandaíra	1132
24	2405207	Janduís	1133
24	2405306	Januário Cicco	1134
24	2405405	Japi	1135
24	2405504	Jardim de Angicos	1136
24	2405603	Jardim de Piranhas	1137
24	2405702	Jardim do Seridó	1138
24	2405801	João Câmara	1139
24	2405900	João Dias	1140
24	2406007	José da Penha	1141
24	2406106	Jucurutu	1142
24	2406155	Jundiá	1143
24	2406205	Lagoa D'anta	1144
24	2406304	Lagoa de Pedras	1145
24	2406403	Lagoa de Velhos	1146
24	2406502	Lagoa Nova	1147
24	2406601	Lagoa Salgada	1148
24	2406700	Lajes	1149
24	2406809	Lajes Pintadas	1150
24	2406908	Lucrécia	1151
24	2407005	Luís Gomes	1152
24	2407104	Macaíba	1153
24	2407203	Macau	1154
24	2407252	Major Sales	1155
24	2407302	Marcelino Vieira	1156
24	2407401	Martins	1157
24	2407500	Maxaranguape	1158
24	2407609	Messias Targino	1159
24	2407708	Montanhas	1160
24	2407807	Monte Alegre	1161
24	2407906	Monte das Gameleiras	1162
24	2408003	Mossoró	1163
24	2408102	Natal	1164
24	2408201	Nísia Floresta	1165
24	2408300	Nova Cruz	1166
24	2408409	Olho-D'água do Borges	1167
24	2408508	Ouro Branco	1168
24	2408607	Paraná	1169
24	2408706	Paraú	1170
24	2408805	Parazinho	1171
24	2408904	Parelhas	1172
24	2408953	Rio do Fogo	1173
24	2409100	Passa E Fica	1174
24	2409209	Passagem	1175
24	2409308	Patu	1176
24	2409332	Santa Maria	1177
24	2409407	Pau dos Ferros	1178
24	2409506	Pedra Grande	1179
24	2409605	Pedra Preta	1180
24	2409704	Pedro Avelino	1181
24	2409803	Pedro Velho	1182
24	2409902	Pendências	1183
24	2410009	Pilões	1184
24	2410108	Poço Branco	1185
24	2410207	Portalegre	1186
24	2410256	Porto do Mangue	1187
24	2410306	Serra Caiada	1188
24	2410405	Pureza	1189
24	2410504	Rafael Fernandes	1190
24	2410603	Rafael Godeiro	1191
24	2410702	Riacho da Cruz	1192
24	2410801	Riacho de Santana	1193
24	2410900	Riachuelo	1194
24	2411007	Rodolfo Fernandes	1195
24	2411056	Tibau	1196
24	2411106	Ruy Barbosa	1197
24	2411205	Santa Cruz	1198
24	2411403	Santana do Matos	1199
24	2411429	Santana do Seridó	1200
24	2411502	Santo Antônio	1201
24	2411601	São Bento do Norte	1202
24	2411700	São Bento do Trairí	1203
24	2411809	São Fernando	1204
24	2411908	São Francisco do Oeste	1205
24	2412005	São Gonçalo do Amarante	1206
24	2412104	São João do Sabugi	1207
24	2412203	São José de Mipibu	1208
24	2412302	São José do Campestre	1209
24	2412401	São José do Seridó	1210
24	2412500	São Miguel	1211
24	2412559	São Miguel do Gostoso	1212
24	2412609	São Paulo do Potengi	1213
24	2412708	São Pedro	1214
24	2412807	São Rafael	1215
24	2412906	São Tomé	1216
24	2413003	São Vicente	1217
24	2413102	Senador Elói de Souza	1218
24	2413201	Senador Georgino Avelino	1219
24	2413300	Serra de São Bento	1220
24	2413359	Serra do Mel	1221
24	2413409	Serra Negra do Norte	1222
24	2413508	Serrinha	1223
24	2413557	Serrinha dos Pintos	1224
24	2413607	Severiano Melo	1225
24	2413706	Sítio Novo	1226
24	2413805	Taboleiro Grande	1227
24	2413904	Taipu	1228
24	2414001	Tangará	1229
24	2414100	Tenente Ananias	1230
24	2414159	Tenente Laurentino Cruz	1231
24	2414209	Tibau do Sul	1232
24	2414308	Timbaúba dos Batistas	1233
24	2414407	Touros	1234
24	2414456	Triunfo Potiguar	1235
24	2414506	Umarizal	1236
24	2414605	Upanema	1237
24	2414704	Várzea	1238
24	2414753	Venha-Ver	1239
24	2414803	Vera Cruz	1240
24	2414902	Viçosa	1241
24	2415008	Vila Flor	1242
25	2500106	Água Branca	1243
25	2500205	Aguiar	1244
25	2500304	Alagoa Grande	1245
25	2500403	Alagoa Nova	1246
25	2500502	Alagoinha	1247
25	2500536	Alcantil	1248
25	2500577	Algodão de Jandaíra	1249
25	2500601	Alhandra	1250
25	2500700	São João do Rio do Peixe	1251
25	2500734	Amparo	1252
25	2500775	Aparecida	1253
25	2500809	Araçagi	1254
25	2500908	Arara	1255
25	2501005	Araruna	1256
25	2501104	Areia	1257
25	2501153	Areia de Baraúnas	1258
25	2501203	Areial	1259
25	2501302	Aroeiras	1260
25	2501351	Assunção	1261
25	2501401	Baía da Traição	1262
25	2501500	Bananeiras	1263
25	2501534	Baraúna	1264
25	2501575	Barra de Santana	1265
25	2501609	Barra de Santa Rosa	1266
25	2501708	Barra de São Miguel	1267
25	2501807	Bayeux	1268
25	2501906	Belém	1269
25	2502003	Belém do Brejo do Cruz	1270
25	2502052	Bernardino Batista	1271
25	2502102	Boa Ventura	1272
25	2502151	Boa Vista	1273
25	2502201	Bom Jesus	1274
25	2502300	Bom Sucesso	1275
25	2502409	Bonito de Santa Fé	1276
25	2502508	Boqueirão	1277
25	2502607	Igaracy	1278
25	2502706	Borborema	1279
25	2502805	Brejo do Cruz	1280
25	2502904	Brejo dos Santos	1281
25	2503001	Caaporã	1282
25	2503100	Cabaceiras	1283
25	2503209	Cabedelo	1284
25	2503308	Cachoeira dos Índios	1285
25	2503407	Cacimba de Areia	1286
25	2503506	Cacimba de dentro	1287
25	2503555	Cacimbas	1288
25	2503605	Caiçara	1289
25	2503704	Cajazeiras	1290
25	2503753	Cajazeirinhas	1291
25	2503803	Caldas Brandão	1292
25	2503902	Camalaú	1293
25	2504009	Campina Grande	1294
25	2504033	Capim	1295
25	2504074	Caraúbas	1296
25	2504108	Carrapateira	1297
25	2504157	Casserengue	1298
25	2504207	Catingueira	1299
25	2504306	Catolé do Rocha	1300
25	2504355	Caturité	1301
25	2504405	Conceição	1302
25	2504504	Condado	1303
25	2504603	Conde	1304
25	2504702	Congo	1305
25	2504801	Coremas	1306
25	2504850	Coxixola	1307
25	2504900	Cruz do Espírito Santo	1308
25	2505006	Cubati	1309
25	2505105	Cuité	1310
25	2505204	Cuitegi	1311
25	2505238	Cuité de Mamanguape	1312
25	2505279	Curral de Cima	1313
25	2505303	Curral Velho	1314
25	2505352	damião	1315
25	2505402	desterro	1316
25	2505501	Vista Serrana	1317
25	2505600	Diamante	1318
25	2505709	dona Inês	1319
25	2505808	Duas Estradas	1320
25	2505907	Emas	1321
25	2506004	Esperança	1322
25	2506103	Fagundes	1323
25	2506202	Frei Martinho	1324
25	2506251	Gado Bravo	1325
25	2506301	Guarabira	1326
25	2506400	Gurinhém	1327
25	2506509	Gurjão	1328
25	2506608	Ibiara	1329
25	2506707	Imaculada	1330
25	2506806	Ingá	1331
25	2506905	Itabaiana	1332
25	2507002	Itaporanga	1333
25	2507101	Itapororoca	1334
25	2507200	Itatuba	1335
25	2507309	Jacaraú	1336
25	2507408	Jericó	1337
25	2507507	João Pessoa	1338
25	2507606	Juarez Távora	1339
25	2507705	Juazeirinho	1340
25	2507804	Junco do Seridó	1341
25	2507903	Juripiranga	1342
25	2508000	Juru	1343
25	2508109	Lagoa	1344
25	2508208	Lagoa de dentro	1345
25	2508307	Lagoa Seca	1346
25	2508406	Lastro	1347
25	2508505	Livramento	1348
25	2508554	Logradouro	1349
25	2508604	Lucena	1350
25	2508703	Mãe D'água	1351
25	2508802	Malta	1352
25	2508901	Mamanguape	1353
25	2509008	Manaíra	1354
25	2509057	Marcação	1355
25	2509107	Mari	1356
25	2509156	Marizópolis	1357
25	2509206	Massaranduba	1358
25	2509305	Mataraca	1359
25	2509339	Matinhas	1360
25	2509370	Mato Grosso	1361
25	2509396	Maturéia	1362
25	2509404	Mogeiro	1363
25	2509503	Montadas	1364
25	2509602	Monte Horebe	1365
25	2509701	Monteiro	1366
25	2509800	Mulungu	1367
25	2509909	Natuba	1368
25	2510006	Nazarezinho	1369
25	2510105	Nova Floresta	1370
25	2510204	Nova Olinda	1371
25	2510303	Nova Palmeira	1372
25	2510402	Olho D'água	1373
25	2510501	Olivedos	1374
25	2510600	Ouro Velho	1375
25	2510659	Parari	1376
25	2510709	Passagem	1377
25	2510808	Patos	1378
25	2510907	Paulista	1379
25	2511004	Pedra Branca	1380
25	2511103	Pedra Lavrada	1381
25	2511202	Pedras de Fogo	1382
25	2511301	Piancó	1383
25	2511400	Picuí	1384
25	2511509	Pilar	1385
25	2511608	Pilões	1386
25	2511707	Pilõezinhos	1387
25	2511806	Pirpirituba	1388
25	2511905	Pitimbu	1389
25	2512002	Pocinhos	1390
25	2512036	Poço dantas	1391
25	2512077	Poço de José de Moura	1392
25	2512101	Pombal	1393
25	2512200	Prata	1394
25	2512309	Princesa Isabel	1395
25	2512408	Puxinanã	1396
25	2512507	Queimadas	1397
25	2512606	Quixaba	1398
25	2512705	Remígio	1399
25	2512721	Pedro Régis	1400
25	2512747	Riachão	1401
25	2512754	Riachão do Bacamarte	1402
25	2512762	Riachão do Poço	1403
25	2512788	Riacho de Santo Antônio	1404
25	2512804	Riacho dos Cavalos	1405
25	2512903	Rio Tinto	1406
25	2513000	Salgadinho	1407
25	2513109	Salgado de São Félix	1408
25	2513158	Santa Cecília	1409
25	2513208	Santa Cruz	1410
25	2513307	Santa Helena	1411
25	2513356	Santa Inês	1412
25	2513406	Santa Luzia	1413
25	2513505	Santana de Mangueira	1414
25	2513604	Santana dos Garrotes	1415
25	2513653	Joca Claudino	1416
25	2513703	Santa Rita	1417
25	2513802	Santa Teresinha	1418
25	2513851	Santo André	1419
25	2513901	São Bento	1420
25	2513927	São Bentinho	1421
25	2513943	São domingos do Cariri	1422
25	2513968	São domingos	1423
25	2513984	São Francisco	1424
25	2514008	São João do Cariri	1425
25	2514107	São João do Tigre	1426
25	2514206	São José da Lagoa Tapada	1427
25	2514305	São José de Caiana	1428
25	2514404	São José de Espinharas	1429
25	2514453	São José dos Ramos	1430
25	2514503	São José de Piranhas	1431
25	2514552	São José de Princesa	1432
25	2514602	São José do Bonfim	1433
25	2514651	São José do Brejo do Cruz	1434
25	2514701	São José do Sabugi	1435
25	2514800	São José dos Cordeiros	1436
25	2514909	São Mamede	1437
25	2515005	São Miguel de Taipu	1438
25	2515104	São Sebastião de Lagoa de Roça	1439
25	2515203	São Sebastião do Umbuzeiro	1440
25	2515302	Sapé	1441
25	2515401	São Vicente do Seridó	1442
25	2515500	Serra Branca	1443
25	2515609	Serra da Raiz	1444
25	2515708	Serra Grande	1445
25	2515807	Serra Redonda	1446
25	2515906	Serraria	1447
25	2515930	Sertãozinho	1448
25	2515971	Sobrado	1449
25	2516003	Solânea	1450
25	2516102	Soledade	1451
25	2516151	Sossêgo	1452
25	2516201	Sousa	1453
25	2516300	Sumé	1454
25	2516409	Tacima	1455
25	2516508	Taperoá	1456
25	2516607	Tavares	1457
25	2516706	Teixeira	1458
25	2516755	Tenório	1459
25	2516805	Triunfo	1460
25	2516904	Uiraúna	1461
25	2517001	Umbuzeiro	1462
25	2517100	Várzea	1463
25	2517209	Vieirópolis	1464
25	2517407	Zabelê	1465
26	2600054	Abreu E Lima	1466
26	2600104	Afogados da Ingazeira	1467
26	2600203	Afrânio	1468
26	2600302	Agrestina	1469
26	2600401	Água Preta	1470
26	2600500	Águas Belas	1471
26	2600609	Alagoinha	1472
26	2600708	Aliança	1473
26	2600807	Altinho	1474
26	2600906	Amaraji	1475
26	2601003	Angelim	1476
26	2601052	Araçoiaba	1477
26	2601102	Araripina	1478
26	2601201	Arcoverde	1479
26	2601300	Barra de Guabiraba	1480
26	2601409	Barreiros	1481
26	2601508	Belém de Maria	1482
26	2601607	Belém do São Francisco	1483
26	2601706	Belo Jardim	1484
26	2601805	Betânia	1485
26	2601904	Bezerros	1486
26	2602001	Bodocó	1487
26	2602100	Bom Conselho	1488
26	2602209	Bom Jardim	1489
26	2602308	Bonito	1490
26	2602407	Brejão	1491
26	2602506	Brejinho	1492
26	2602605	Brejo da Madre de deus	1493
26	2602704	Buenos Aires	1494
26	2602803	Buíque	1495
26	2602902	Cabo de Santo Agostinho	1496
26	2603009	Cabrobó	1497
26	2603108	Cachoeirinha	1498
26	2603207	Caetés	1499
26	2603306	Calçado	1500
26	2603405	Calumbi	1501
26	2603454	Camaragibe	1502
26	2603504	Camocim de São Félix	1503
26	2603603	Camutanga	1504
26	2603702	Canhotinho	1505
26	2603801	Capoeiras	1506
26	2603900	Carnaíba	1507
26	2603926	Carnaubeira da Penha	1508
26	2604007	Carpina	1509
26	2604106	Caruaru	1510
26	2604155	Casinhas	1511
26	2604205	Catende	1512
26	2604304	Cedro	1513
26	2604403	Chã de Alegria	1514
26	2604502	Chã Grande	1515
26	2604601	Condado	1516
26	2604700	Correntes	1517
26	2604809	Cortês	1518
26	2604908	Cumaru	1519
26	2605004	Cupira	1520
26	2605103	Custódia	1521
26	2605152	dormentes	1522
26	2605202	Escada	1523
26	2605301	Exu	1524
26	2605400	Feira Nova	1525
26	2605459	Fernando de Noronha	1526
26	2605509	Ferreiros	1527
26	2605608	Flores	1528
26	2605707	Floresta	1529
26	2605806	Frei Miguelinho	1530
26	2605905	Gameleira	1531
26	2606002	Garanhuns	1532
26	2606101	Glória do Goitá	1533
26	2606200	Goiana	1534
26	2606309	Granito	1535
26	2606408	Gravatá	1536
26	2606507	Iati	1537
26	2606606	Ibimirim	1538
26	2606705	Ibirajuba	1539
26	2606804	Igarassu	1540
26	2606903	Iguaracy	1541
26	2607000	Inajá	1542
26	2607109	Ingazeira	1543
26	2607208	Ipojuca	1544
26	2607307	Ipubi	1545
26	2607406	Itacuruba	1546
26	2607505	Itaíba	1547
26	2607604	Ilha de Itamaracá	1548
26	2607653	Itambé	1549
26	2607703	Itapetim	1550
26	2607752	Itapissuma	1551
26	2607802	Itaquitinga	1552
26	2607901	Jaboatão dos Guararapes	1553
26	2607950	Jaqueira	1554
26	2608008	Jataúba	1555
26	2608057	Jatobá	1556
26	2608107	João Alfredo	1557
26	2608206	Joaquim Nabuco	1558
26	2608255	Jucati	1559
26	2608305	Jupi	1560
26	2608404	Jurema	1561
26	2608453	Lagoa do Carro	1562
26	2608503	Lagoa de Itaenga	1563
26	2608602	Lagoa do Ouro	1564
26	2608701	Lagoa dos Gatos	1565
26	2608750	Lagoa Grande	1566
26	2608800	Lajedo	1567
26	2608909	Limoeiro	1568
26	2609006	Macaparana	1569
26	2609105	Machados	1570
26	2609154	Manari	1571
26	2609204	Maraial	1572
26	2609303	Mirandiba	1573
26	2609402	Moreno	1574
26	2609501	Nazaré da Mata	1575
26	2609600	Olinda	1576
26	2609709	Orobó	1577
26	2609808	Orocó	1578
26	2609907	Ouricuri	1579
26	2610004	Palmares	1580
26	2610103	Palmeirina	1581
26	2610202	Panelas	1582
26	2610301	Paranatama	1583
26	2610400	Parnamirim	1584
26	2610509	Passira	1585
26	2610608	Paudalho	1586
26	2610707	Paulista	1587
26	2610806	Pedra	1588
26	2610905	Pesqueira	1589
26	2611002	Petrolândia	1590
26	2611101	Petrolina	1591
26	2611200	Poção	1592
26	2611309	Pombos	1593
26	2611408	Primavera	1594
26	2611507	Quipapá	1595
26	2611533	Quixaba	1596
26	2611606	Recife	1597
26	2611705	Riacho das Almas	1598
26	2611804	Ribeirão	1599
26	2611903	Rio Formoso	1600
26	2612000	Sairé	1601
26	2612109	Salgadinho	1602
26	2612208	Salgueiro	1603
26	2612307	Saloá	1604
26	2612406	Sanharó	1605
26	2612455	Santa Cruz	1606
26	2612471	Santa Cruz da Baixa Verde	1607
26	2612505	Santa Cruz do Capibaribe	1608
26	2612554	Santa Filomena	1609
26	2612604	Santa Maria da Boa Vista	1610
26	2612703	Santa Maria do Cambucá	1611
26	2612802	Santa Terezinha	1612
26	2612901	São Benedito do Sul	1613
26	2613008	São Bento do Una	1614
26	2613107	São Caitano	1615
26	2613206	São João	1616
26	2613305	São Joaquim do Monte	1617
26	2613404	São José da Coroa Grande	1618
26	2613503	São José do Belmonte	1619
26	2613602	São José do Egito	1620
26	2613701	São Lourenço da Mata	1621
26	2613800	São Vicente Ferrer	1622
26	2613909	Serra Talhada	1623
26	2614006	Serrita	1624
26	2614105	Sertânia	1625
26	2614204	Sirinhaém	1626
26	2614303	Moreilândia	1627
26	2614402	Solidão	1628
26	2614501	Surubim	1629
26	2614600	Tabira	1630
26	2614709	Tacaimbó	1631
26	2614808	Tacaratu	1632
26	2614857	Tamandaré	1633
26	2615003	Taquaritinga do Norte	1634
26	2615102	Terezinha	1635
26	2615201	Terra Nova	1636
26	2615300	Timbaúba	1637
26	2615409	Toritama	1638
26	2615508	Tracunhaém	1639
26	2615607	Trindade	1640
26	2615706	Triunfo	1641
26	2615805	Tupanatinga	1642
26	2615904	Tuparetama	1643
26	2616001	Venturosa	1644
26	2616100	Verdejante	1645
26	2616183	Vertente do Lério	1646
26	2616209	Vertentes	1647
26	2616308	Vicência	1648
26	2616407	Vitória de Santo Antão	1649
26	2616506	Xexéu	1650
27	2700102	Água Branca	1651
27	2700201	Anadia	1652
27	2700300	Arapiraca	1653
27	2700409	Atalaia	1654
27	2700508	Barra de Santo Antônio	1655
27	2700607	Barra de São Miguel	1656
27	2700706	Batalha	1657
27	2700805	Belém	1658
27	2700904	Belo Monte	1659
27	2701001	Boca da Mata	1660
27	2701100	Branquinha	1661
27	2701209	Cacimbinhas	1662
27	2701308	Cajueiro	1663
27	2701357	Campestre	1664
27	2701407	Campo Alegre	1665
27	2701506	Campo Grande	1666
27	2701605	Canapi	1667
27	2701704	Capela	1668
27	2701803	Carneiros	1669
27	2701902	Chã Preta	1670
27	2702009	Coité do Nóia	1671
27	2702108	Colônia Leopoldina	1672
27	2702207	Coqueiro Seco	1673
27	2702306	Coruripe	1674
27	2702355	Craíbas	1675
27	2702405	delmiro Gouveia	1676
27	2702504	dois Riachos	1677
27	2702553	Estrela de Alagoas	1678
27	2702603	Feira Grande	1679
27	2702702	Feliz deserto	1680
27	2702801	Flexeiras	1681
27	2702900	Girau do Ponciano	1682
27	2703007	Ibateguara	1683
27	2703106	Igaci	1684
27	2703205	Igreja Nova	1685
27	2703304	Inhapi	1686
27	2703403	Jacaré dos Homens	1687
27	2703502	Jacuípe	1688
27	2703601	Japaratinga	1689
27	2703700	Jaramataia	1690
27	2703759	Jequiá da Praia	1691
27	2703809	Joaquim Gomes	1692
27	2703908	Jundiá	1693
27	2704005	Junqueiro	1694
27	2704104	Lagoa da Canoa	1695
27	2704203	Limoeiro de Anadia	1696
27	2704302	Maceió	1697
27	2704401	Major Isidoro	1698
27	2704500	Maragogi	1699
27	2704609	Maravilha	1700
27	2704708	Marechal deodoro	1701
27	2704807	Maribondo	1702
27	2704906	Mar Vermelho	1703
27	2705002	Mata Grande	1704
27	2705101	Matriz de Camaragibe	1705
27	2705200	Messias	1706
27	2705309	Minador do Negrão	1707
27	2705408	Monteirópolis	1708
27	2705507	Murici	1709
27	2705606	Novo Lino	1710
27	2705705	Olho D'água das Flores	1711
27	2705804	Olho D'água do Casado	1712
27	2705903	Olho D'água Grande	1713
27	2706000	Olivença	1714
27	2706109	Ouro Branco	1715
27	2706208	Palestina	1716
27	2706307	Palmeira dos Índios	1717
27	2706406	Pão de Açúcar	1718
27	2706422	Pariconha	1719
27	2706448	Paripueira	1720
27	2706505	Passo de Camaragibe	1721
27	2706604	Paulo Jacinto	1722
27	2706703	Penedo	1723
27	2706802	Piaçabuçu	1724
27	2706901	Pilar	1725
27	2707008	Pindoba	1726
27	2707107	Piranhas	1727
27	2707206	Poço das Trincheiras	1728
27	2707305	Porto Calvo	1729
27	2707404	Porto de Pedras	1730
27	2707503	Porto Real do Colégio	1731
27	2707602	Quebrangulo	1732
27	2707701	Rio Largo	1733
27	2707800	Roteiro	1734
27	2707909	Santa Luzia do Norte	1735
27	2708006	Santana do Ipanema	1736
27	2708105	Santana do Mundaú	1737
27	2708204	São Brás	1738
27	2708303	São José da Laje	1739
27	2708402	São José da Tapera	1740
27	2708501	São Luís do Quitunde	1741
27	2708600	São Miguel dos Campos	1742
27	2708709	São Miguel dos Milagres	1743
27	2708808	São Sebastião	1744
27	2708907	Satuba	1745
27	2708956	Senador Rui Palmeira	1746
27	2709004	Tanque D'arca	1747
27	2709103	Taquarana	1748
27	2709152	Teotônio Vilela	1749
27	2709202	Traipu	1750
27	2709301	União dos Palmares	1751
27	2709400	Viçosa	1752
28	2800100	Amparo de São Francisco	1753
28	2800209	Aquidabã	1754
28	2800308	Aracaju	1755
28	2800407	Arauá	1756
28	2800506	Areia Branca	1757
28	2800605	Barra dos Coqueiros	1758
28	2800670	Boquim	1759
28	2800704	Brejo Grande	1760
28	2801009	Campo do Brito	1761
28	2801108	Canhoba	1762
28	2801207	Canindé de São Francisco	1763
28	2801306	Capela	1764
28	2801405	Carira	1765
28	2801504	Carmópolis	1766
28	2801603	Cedro de São João	1767
28	2801702	Cristinápolis	1768
28	2801900	Cumbe	1769
28	2802007	Divina Pastora	1770
28	2802106	Estância	1771
28	2802205	Feira Nova	1772
28	2802304	Frei Paulo	1773
28	2802403	Gararu	1774
28	2802502	General Maynard	1775
28	2802601	Gracho Cardoso	1776
28	2802700	Ilha das Flores	1777
28	2802809	Indiaroba	1778
28	2802908	Itabaiana	1779
28	2803005	Itabaianinha	1780
28	2803104	Itabi	1781
28	2803203	Itaporanga D'ajuda	1782
28	2803302	Japaratuba	1783
28	2803401	Japoatã	1784
28	2803500	Lagarto	1785
28	2803609	Laranjeiras	1786
28	2803708	Macambira	1787
28	2803807	Malhada dos Bois	1788
28	2803906	Malhador	1789
28	2804003	Maruim	1790
28	2804102	Moita Bonita	1791
28	2804201	Monte Alegre de Sergipe	1792
28	2804300	Muribeca	1793
28	2804409	Neópolis	1794
28	2804458	Nossa Senhora Aparecida	1795
28	2804508	Nossa Senhora da Glória	1796
28	2804607	Nossa Senhora das dores	1797
28	2804706	Nossa Senhora de Lourdes	1798
28	2804805	Nossa Senhora do Socorro	1799
28	2804904	Pacatuba	1800
28	2805000	Pedra Mole	1801
28	2805109	Pedrinhas	1802
28	2805208	Pinhão	1803
28	2805307	Pirambu	1804
28	2805406	Poço Redondo	1805
28	2805505	Poço Verde	1806
28	2805604	Porto da Folha	1807
28	2805703	Propriá	1808
28	2805802	Riachão do dantas	1809
28	2805901	Riachuelo	1810
28	2806008	Ribeirópolis	1811
28	2806107	Rosário do Catete	1812
28	2806206	Salgado	1813
28	2806305	Santa Luzia do Itanhy	1814
28	2806404	Santana do São Francisco	1815
28	2806503	Santa Rosa de Lima	1816
28	2806602	Santo Amaro das Brotas	1817
28	2806701	São Cristóvão	1818
28	2806800	São domingos	1819
28	2806909	São Francisco	1820
28	2807006	São Miguel do Aleixo	1821
28	2807105	Simão Dias	1822
28	2807204	Siriri	1823
28	2807303	Telha	1824
28	2807402	Tobias Barreto	1825
28	2807501	Tomar do Geru	1826
28	2807600	Umbaúba	1827
29	2900108	Abaíra	1828
29	2900207	Abaré	1829
29	2900306	Acajutiba	1830
29	2900355	Adustina	1831
29	2900405	Água Fria	1832
29	2900504	Érico Cardoso	1833
29	2900603	Aiquara	1834
29	2900702	Alagoinhas	1835
29	2900801	Alcobaça	1836
29	2900900	Almadina	1837
29	2901007	Amargosa	1838
29	2901106	Amélia Rodrigues	1839
29	2901155	América dourada	1840
29	2901205	Anagé	1841
29	2901304	Andaraí	1842
29	2901353	Andorinha	1843
29	2901403	Angical	1844
29	2901502	Anguera	1845
29	2901601	Antas	1846
29	2901700	Antônio Cardoso	1847
29	2901809	Antônio Gonçalves	1848
29	2901908	Aporá	1849
29	2901957	Apuarema	1850
29	2902005	Aracatu	1851
29	2902054	Araças	1852
29	2902104	Araci	1853
29	2902203	Aramari	1854
29	2902252	Arataca	1855
29	2902302	Aratuípe	1856
29	2902401	Aurelino Leal	1857
29	2902500	Baianópolis	1858
29	2902609	Baixa Grande	1859
29	2902658	Banzaê	1860
29	2902708	Barra	1861
29	2902807	Barra da Estiva	1862
29	2902906	Barra do Choça	1863
29	2903003	Barra do Mendes	1864
29	2903102	Barra do Rocha	1865
29	2903201	Barreiras	1866
29	2903235	Barro Alto	1867
29	2903276	Barrocas	1868
29	2903300	Barro Preto	1869
29	2903409	Belmonte	1870
29	2903508	Belo Campo	1871
29	2903607	Biritinga	1872
29	2903706	Boa Nova	1873
29	2903805	Boa Vista do Tupim	1874
29	2903904	Bom Jesus da Lapa	1875
29	2903953	Bom Jesus da Serra	1876
29	2904001	Boninal	1877
29	2904050	Bonito	1878
29	2904100	Boquira	1879
29	2904209	Botuporã	1880
29	2904308	Brejões	1881
29	2904407	Brejolândia	1882
29	2904506	Brotas de Macaúbas	1883
29	2904605	Brumado	1884
29	2904704	Buerarema	1885
29	2904753	Buritirama	1886
29	2904803	Caatiba	1887
29	2904852	Cabaceiras do Paraguaçu	1888
29	2904902	Cachoeira	1889
29	2905008	Caculé	1890
29	2905107	Caém	1891
29	2905156	Caetanos	1892
29	2905206	Caetité	1893
29	2905305	Cafarnaum	1894
29	2905404	Cairu	1895
29	2905503	Caldeirão Grande	1896
29	2905602	Camacan	1897
29	2905701	Camaçari	1898
29	2905800	Camamu	1899
29	2905909	Campo Alegre de Lourdes	1900
29	2906006	Campo Formoso	1901
29	2906105	Canápolis	1902
29	2906204	Canarana	1903
29	2906303	Canavieiras	1904
29	2906402	Candeal	1905
29	2906501	Candeias	1906
29	2906600	Candiba	1907
29	2906709	Cândido Sales	1908
29	2906808	Cansanção	1909
29	2906824	Canudos	1910
29	2906857	Capela do Alto Alegre	1911
29	2906873	Capim Grosso	1912
29	2906899	Caraíbas	1913
29	2906907	Caravelas	1914
29	2907004	Cardeal da Silva	1915
29	2907103	Carinhanha	1916
29	2907202	Casa Nova	1917
29	2907301	Castro Alves	1918
29	2907400	Catolândia	1919
29	2907509	Catu	1920
29	2907558	Caturama	1921
29	2907608	Central	1922
29	2907707	Chorrochó	1923
29	2907806	Cícero dantas	1924
29	2907905	Cipó	1925
29	2908002	Coaraci	1926
29	2908101	Cocos	1927
29	2908200	Conceição da Feira	1928
29	2908309	Conceição do Almeida	1929
29	2908408	Conceição do Coité	1930
29	2908507	Conceição do Jacuípe	1931
29	2908606	Conde	1932
29	2908705	Condeúba	1933
29	2908804	Contendas do Sincorá	1934
29	2908903	Coração de Maria	1935
29	2909000	Cordeiros	1936
29	2909109	Coribe	1937
29	2909208	Coronel João Sá	1938
29	2909307	Correntina	1939
29	2909406	Cotegipe	1940
29	2909505	Cravolândia	1941
29	2909604	Crisópolis	1942
29	2909703	Cristópolis	1943
29	2909802	Cruz das Almas	1944
29	2909901	Curaçá	1945
29	2910008	Dário Meira	1946
29	2910057	Dias D'ávila	1947
29	2910107	dom Basílio	1948
29	2910206	dom Macedo Costa	1949
29	2910305	Elísio Medrado	1950
29	2910404	Encruzilhada	1951
29	2910503	Entre Rios	1952
29	2910602	Esplanada	1953
29	2910701	Euclides da Cunha	1954
29	2910727	Eunápolis	1955
29	2910750	Fátima	1956
29	2910776	Feira da Mata	1957
29	2910800	Feira de Santana	1958
29	2910859	Filadélfia	1959
29	2910909	Firmino Alves	1960
29	2911006	Floresta Azul	1961
29	2911105	Formosa do Rio Preto	1962
29	2911204	Gandu	1963
29	2911253	Gavião	1964
29	2911303	Gentio do Ouro	1965
29	2911402	Glória	1966
29	2911501	Gongogi	1967
29	2911600	Governador Mangabeira	1968
29	2911659	Guajeru	1969
29	2911709	Guanambi	1970
29	2911808	Guaratinga	1971
29	2911857	Heliópolis	1972
29	2911907	Iaçu	1973
29	2912004	Ibiassucê	1974
29	2912103	Ibicaraí	1975
29	2912202	Ibicoara	1976
29	2912301	Ibicuí	1977
29	2912400	Ibipeba	1978
29	2912509	Ibipitanga	1979
29	2912608	Ibiquera	1980
29	2912707	Ibirapitanga	1981
29	2912806	Ibirapuã	1982
29	2912905	Ibirataia	1983
29	2913002	Ibitiara	1984
29	2913101	Ibititá	1985
29	2913200	Ibotirama	1986
29	2913309	Ichu	1987
29	2913408	Igaporã	1988
29	2913457	Igrapiúna	1989
29	2913507	Iguaí	1990
29	2913606	Ilhéus	1991
29	2913705	Inhambupe	1992
29	2913804	Ipecaetá	1993
29	2913903	Ipiaú	1994
29	2914000	Ipirá	1995
29	2914109	Ipupiara	1996
29	2914208	Irajuba	1997
29	2914307	Iramaia	1998
29	2914406	Iraquara	1999
29	2914505	Irará	2000
29	2914604	Irecê	2001
29	2914653	Itabela	2002
29	2914703	Itaberaba	2003
29	2914802	Itabuna	2004
29	2914901	Itacaré	2005
29	2915007	Itaeté	2006
29	2915106	Itagi	2007
29	2915205	Itagibá	2008
29	2915304	Itagimirim	2009
29	2915353	Itaguaçu da Bahia	2010
29	2915403	Itaju do Colônia	2011
29	2915502	Itajuípe	2012
29	2915601	Itamaraju	2013
29	2915700	Itamari	2014
29	2915809	Itambé	2015
29	2915908	Itanagra	2016
29	2916005	Itanhém	2017
29	2916104	Itaparica	2018
29	2916203	Itapé	2019
29	2916302	Itapebi	2020
29	2916401	Itapetinga	2021
29	2916500	Itapicuru	2022
29	2916609	Itapitanga	2023
29	2916708	Itaquara	2024
29	2916807	Itarantim	2025
29	2916856	Itatim	2026
29	2916906	Itiruçu	2027
29	2917003	Itiúba	2028
29	2917102	Itororó	2029
29	2917201	Ituaçu	2030
29	2917300	Ituberá	2031
29	2917334	Iuiú	2032
29	2917359	Jaborandi	2033
29	2917409	Jacaraci	2034
29	2917508	Jacobina	2035
29	2917607	Jaguaquara	2036
29	2917706	Jaguarari	2037
29	2917805	Jaguaripe	2038
29	2917904	Jandaíra	2039
29	2918001	Jequié	2040
29	2918100	Jeremoabo	2041
29	2918209	Jiquiriçá	2042
29	2918308	Jitaúna	2043
29	2918357	João dourado	2044
29	2918407	Juazeiro	2045
29	2918456	Jucuruçu	2046
29	2918506	Jussara	2047
29	2918555	Jussari	2048
29	2918605	Jussiape	2049
29	2918704	Lafaiete Coutinho	2050
29	2918753	Lagoa Real	2051
29	2918803	Laje	2052
29	2918902	Lajedão	2053
29	2919009	Lajedinho	2054
29	2919058	Lajedo do Tabocal	2055
29	2919108	Lamarão	2056
29	2919157	Lapão	2057
29	2919207	Lauro de Freitas	2058
29	2919306	Lençóis	2059
29	2919405	Licínio de Almeida	2060
29	2919504	Livramento de Nossa Senhora	2061
29	2919553	Luís Eduardo Magalhães	2062
29	2919603	Macajuba	2063
29	2919702	Macarani	2064
29	2919801	Macaúbas	2065
29	2919900	Macururé	2066
29	2919926	Madre de deus	2067
29	2919959	Maetinga	2068
29	2920007	Maiquinique	2069
29	2920106	Mairi	2070
29	2920205	Malhada	2071
29	2920304	Malhada de Pedras	2072
29	2920403	Manoel Vitorino	2073
29	2920452	Mansidão	2074
29	2920502	Maracás	2075
29	2920601	Maragogipe	2076
29	2920700	Maraú	2077
29	2920809	Marcionílio Souza	2078
29	2920908	Mascote	2079
29	2921005	Mata de São João	2080
29	2921054	Matina	2081
29	2921104	Medeiros Neto	2082
29	2921203	Miguel Calmon	2083
29	2921302	Milagres	2084
29	2921401	Mirangaba	2085
29	2921450	Mirante	2086
29	2921500	Monte Santo	2087
29	2921609	Morpará	2088
29	2921708	Morro do Chapéu	2089
29	2921807	Mortugaba	2090
29	2921906	Mucugê	2091
29	2922003	Mucuri	2092
29	2922052	Mulungu do Morro	2093
29	2922102	Mundo Novo	2094
29	2922201	Muniz Ferreira	2095
29	2922250	Muquém de São Francisco	2096
29	2922300	Muritiba	2097
29	2922409	Mutuípe	2098
29	2922508	Nazaré	2099
29	2922607	Nilo Peçanha	2100
29	2922656	Nordestina	2101
29	2922706	Nova Canaã	2102
29	2922730	Nova Fátima	2103
29	2922755	Nova Ibiá	2104
29	2922805	Nova Itarana	2105
29	2922854	Nova Redenção	2106
29	2922904	Nova Soure	2107
29	2923001	Nova Viçosa	2108
29	2923035	Novo Horizonte	2109
29	2923050	Novo Triunfo	2110
29	2923100	Olindina	2111
29	2923209	Oliveira dos Brejinhos	2112
29	2923308	Ouriçangas	2113
29	2923357	Ourolândia	2114
29	2923407	Palmas de Monte Alto	2115
29	2923506	Palmeiras	2116
29	2923605	Paramirim	2117
29	2923704	Paratinga	2118
29	2923803	Paripiranga	2119
29	2923902	Pau Brasil	2120
29	2924009	Paulo Afonso	2121
29	2924058	Pé de Serra	2122
29	2924108	Pedrão	2123
29	2924207	Pedro Alexandre	2124
29	2924306	Piatã	2125
29	2924405	Pilão Arcado	2126
29	2924504	Pindaí	2127
29	2924603	Pindobaçu	2128
29	2924652	Pintadas	2129
29	2924678	Piraí do Norte	2130
29	2924702	Piripá	2131
29	2924801	Piritiba	2132
29	2924900	Planaltino	2133
29	2925006	Planalto	2134
29	2925105	Poções	2135
29	2925204	Pojuca	2136
29	2925253	Ponto Novo	2137
29	2925303	Porto Seguro	2138
29	2925402	Potiraguá	2139
29	2925501	Prado	2140
29	2925600	Presidente Dutra	2141
29	2925709	Presidente Jânio Quadros	2142
29	2925758	Presidente Tancredo Neves	2143
29	2925808	Queimadas	2144
29	2925907	Quijingue	2145
29	2925931	Quixabeira	2146
29	2925956	Rafael Jambeiro	2147
29	2926004	Remanso	2148
29	2926103	Retirolândia	2149
29	2926202	Riachão das Neves	2150
29	2926301	Riachão do Jacuípe	2151
29	2926400	Riacho de Santana	2152
29	2926509	Ribeira do Amparo	2153
29	2926608	Ribeira do Pombal	2154
29	2926657	Ribeirão do Largo	2155
29	2926707	Rio de Contas	2156
29	2926806	Rio do Antônio	2157
29	2926905	Rio do Pires	2158
29	2927002	Rio Real	2159
29	2927101	Rodelas	2160
29	2927200	Ruy Barbosa	2161
29	2927309	Salinas da Margarida	2162
29	2927408	Salvador	2163
29	2927507	Santa Bárbara	2164
29	2927606	Santa Brígida	2165
29	2927705	Santa Cruz Cabrália	2166
29	2927804	Santa Cruz da Vitória	2167
29	2927903	Santa Inês	2168
29	2928000	Santaluz	2169
29	2928059	Santa Luzia	2170
29	2928109	Santa Maria da Vitória	2171
29	2928208	Santana	2172
29	2928307	Santanópolis	2173
29	2928406	Santa Rita de Cássia	2174
29	2928505	Santa Teresinha	2175
29	2928604	Santo Amaro	2176
29	2928703	Santo Antônio de Jesus	2177
29	2928802	Santo Estêvão	2178
29	2928901	São desidério	2179
29	2928950	São domingos	2180
29	2929008	São Félix	2181
29	2929057	São Félix do Coribe	2182
29	2929107	São Felipe	2183
29	2929206	São Francisco do Conde	2184
29	2929255	São Gabriel	2185
29	2929305	São Gonçalo dos Campos	2186
29	2929354	São José da Vitória	2187
29	2929370	São José do Jacuípe	2188
29	2929404	São Miguel das Matas	2189
29	2929503	São Sebastião do Passé	2190
29	2929602	Sapeaçu	2191
29	2929701	Sátiro Dias	2192
29	2929750	Saubara	2193
29	2929800	Saúde	2194
29	2929909	Seabra	2195
29	2930006	Sebastião Laranjeiras	2196
29	2930105	Senhor do Bonfim	2197
29	2930154	Serra do Ramalho	2198
29	2930204	Sento Sé	2199
29	2930303	Serra dourada	2200
29	2930402	Serra Preta	2201
29	2930501	Serrinha	2202
29	2930600	Serrolândia	2203
29	2930709	Simões Filho	2204
29	2930758	Sítio do Mato	2205
29	2930766	Sítio do Quinto	2206
29	2930774	Sobradinho	2207
29	2930808	Souto Soares	2208
29	2930907	Tabocas do Brejo Velho	2209
29	2931004	Tanhaçu	2210
29	2931053	Tanque Novo	2211
29	2931103	Tanquinho	2212
29	2931202	Taperoá	2213
29	2931301	Tapiramutá	2214
29	2931350	Teixeira de Freitas	2215
29	2931400	Teodoro Sampaio	2216
29	2931509	Teofilândia	2217
29	2931608	Teolândia	2218
29	2931707	Terra Nova	2219
29	2931806	Tremedal	2220
29	2931905	Tucano	2221
29	2932002	Uauá	2222
29	2932101	Ubaíra	2223
29	2932200	Ubaitaba	2224
29	2932309	Ubatã	2225
29	2932408	Uibaí	2226
29	2932457	Umburanas	2227
29	2932507	Una	2228
29	2932606	Urandi	2229
29	2932705	Uruçuca	2230
29	2932804	Utinga	2231
29	2932903	Valença	2232
29	2933000	Valente	2233
29	2933059	Várzea da Roça	2234
29	2933109	Várzea do Poço	2235
29	2933158	Várzea Nova	2236
29	2933174	Varzedo	2237
29	2933208	Vera Cruz	2238
29	2933257	Vereda	2239
29	2933307	Vitória da Conquista	2240
29	2933406	Wagner	2241
29	2933455	Wanderley	2242
29	2933505	Wenceslau Guimarães	2243
29	2933604	Xique-Xique	2244
31	3100104	Abadia dos dourados	2245
31	3100203	Abaeté	2246
31	3100302	Abre Campo	2247
31	3100401	Acaiaca	2248
31	3100500	Açucena	2249
31	3100609	Água Boa	2250
31	3100708	Água Comprida	2251
31	3100807	Aguanil	2252
31	3100906	Águas Formosas	2253
31	3101003	Águas Vermelhas	2254
31	3101102	Aimorés	2255
31	3101201	Aiuruoca	2256
31	3101300	Alagoa	2257
31	3101409	Albertina	2258
31	3101508	Além Paraíba	2259
31	3101607	Alfenas	2260
31	3101631	Alfredo Vasconcelos	2261
31	3101706	Almenara	2262
31	3101805	Alpercata	2263
31	3101904	Alpinópolis	2264
31	3102001	Alterosa	2265
31	3102050	Alto Caparaó	2266
31	3102100	Alto Rio doce	2267
31	3102209	Alvarenga	2268
31	3102308	Alvinópolis	2269
31	3102407	Alvorada de Minas	2270
31	3102506	Amparo do Serra	2271
31	3102605	Andradas	2272
31	3102704	Cachoeira de Pajeú	2273
31	3102803	Andrelândia	2274
31	3102852	Angelândia	2275
31	3102902	Antônio Carlos	2276
31	3103009	Antônio Dias	2277
31	3103108	Antônio Prado de Minas	2278
31	3103207	Araçaí	2279
31	3103306	Aracitaba	2280
31	3103405	Araçuaí	2281
31	3103504	Araguari	2282
31	3103603	Arantina	2283
31	3103702	Araponga	2284
31	3103751	Araporã	2285
31	3103801	Arapuá	2286
31	3103900	Araújos	2287
31	3104007	Araxá	2288
31	3104106	Arceburgo	2289
31	3104205	Arcos	2290
31	3104304	Areado	2291
31	3104403	Argirita	2292
31	3104452	Aricanduva	2293
31	3104502	Arinos	2294
31	3104601	Astolfo Dutra	2295
31	3104700	Ataléia	2296
31	3104809	Augusto de Lima	2297
31	3104908	Baependi	2298
31	3105004	Baldim	2299
31	3105103	Bambuí	2300
31	3105202	Bandeira	2301
31	3105301	Bandeira do Sul	2302
31	3105400	Barão de Cocais	2303
31	3105509	Barão de Monte Alto	2304
31	3105608	Barbacena	2305
31	3105707	Barra Longa	2306
31	3105905	Barroso	2307
31	3106002	Bela Vista de Minas	2308
31	3106101	Belmiro Braga	2309
31	3106200	Belo Horizonte	2310
31	3106309	Belo Oriente	2311
31	3106408	Belo Vale	2312
31	3106507	Berilo	2313
31	3106606	Bertópolis	2314
31	3106655	Berizal	2315
31	3106705	Betim	2316
31	3106804	Bias Fortes	2317
31	3106903	Bicas	2318
31	3107000	Biquinhas	2319
31	3107109	Boa Esperança	2320
31	3107208	Bocaina de Minas	2321
31	3107307	Bocaiúva	2322
31	3107406	Bom despacho	2323
31	3107505	Bom Jardim de Minas	2324
31	3107604	Bom Jesus da Penha	2325
31	3107703	Bom Jesus do Amparo	2326
31	3107802	Bom Jesus do Galho	2327
31	3107901	Bom Repouso	2328
31	3108008	Bom Sucesso	2329
31	3108107	Bonfim	2330
31	3108206	Bonfinópolis de Minas	2331
31	3108255	Bonito de Minas	2332
31	3108305	Borda da Mata	2333
31	3108404	Botelhos	2334
31	3108503	Botumirim	2335
31	3108552	Brasilândia de Minas	2336
31	3108602	Brasília de Minas	2337
31	3108701	Brás Pires	2338
31	3108800	Braúnas	2339
31	3108909	Brazópolis	2340
31	3109006	Brumadinho	2341
31	3109105	Bueno Brandão	2342
31	3109204	Buenópolis	2343
31	3109253	Bugre	2344
31	3109303	Buritis	2345
31	3109402	Buritizeiro	2346
31	3109451	Cabeceira Grande	2347
31	3109501	Cabo Verde	2348
31	3109600	Cachoeira da Prata	2349
31	3109709	Cachoeira de Minas	2350
31	3109808	Cachoeira dourada	2351
31	3109907	Caetanópolis	2352
31	3110004	Caeté	2353
31	3110103	Caiana	2354
31	3110202	Cajuri	2355
31	3110301	Caldas	2356
31	3110400	Camacho	2357
31	3110509	Camanducaia	2358
31	3110608	Cambuí	2359
31	3110707	Cambuquira	2360
31	3110806	Campanário	2361
31	3110905	Campanha	2362
31	3111002	Campestre	2363
31	3111101	Campina Verde	2364
31	3111150	Campo Azul	2365
31	3111200	Campo Belo	2366
31	3111309	Campo do Meio	2367
31	3111408	Campo Florido	2368
31	3111507	Campos Altos	2369
31	3111606	Campos Gerais	2370
31	3111705	Canaã	2371
31	3111804	Canápolis	2372
31	3111903	Cana Verde	2373
31	3112000	Candeias	2374
31	3112059	Cantagalo	2375
31	3112109	Caparaó	2376
31	3112208	Capela Nova	2377
31	3112307	Capelinha	2378
31	3112406	Capetinga	2379
31	3112505	Capim Branco	2380
31	3112604	Capinópolis	2381
31	3112653	Capitão Andrade	2382
31	3112703	Capitão Enéas	2383
31	3112802	Capitólio	2384
31	3112901	Caputira	2385
31	3113008	Caraí	2386
31	3113107	Caranaíba	2387
31	3113206	Carandaí	2388
31	3113305	Carangola	2389
31	3113404	Caratinga	2390
31	3113503	Carbonita	2391
31	3113602	Careaçu	2392
31	3113701	Carlos Chagas	2393
31	3113800	Carmésia	2394
31	3113909	Carmo da Cachoeira	2395
31	3114006	Carmo da Mata	2396
31	3114105	Carmo de Minas	2397
31	3114204	Carmo do Cajuru	2398
31	3114303	Carmo do Paranaíba	2399
31	3114402	Carmo do Rio Claro	2400
31	3114501	Carmópolis de Minas	2401
31	3114550	Carneirinho	2402
31	3114600	Carrancas	2403
31	3114709	Carvalhópolis	2404
31	3114808	Carvalhos	2405
31	3114907	Casa Grande	2406
31	3115003	Cascalho Rico	2407
31	3115102	Cássia	2408
31	3115201	Conceição da Barra de Minas	2409
31	3115300	Cataguases	2410
31	3115359	Catas Altas	2411
31	3115409	Catas Altas da Noruega	2412
31	3115458	Catuji	2413
31	3115474	Catuti	2414
31	3115508	Caxambu	2415
31	3115607	Cedro do Abaeté	2416
31	3115706	Central de Minas	2417
31	3115805	Centralina	2418
31	3115904	Chácara	2419
31	3116001	Chalé	2420
31	3116100	Chapada do Norte	2421
31	3116159	Chapada Gaúcha	2422
31	3116209	Chiador	2423
31	3116308	Cipotânea	2424
31	3116407	Claraval	2425
31	3116506	Claro dos Poções	2426
31	3116605	Cláudio	2427
31	3116704	Coimbra	2428
31	3116803	Coluna	2429
31	3116902	Comendador Gomes	2430
31	3117009	Comercinho	2431
31	3117108	Conceição da Aparecida	2432
31	3117207	Conceição das Pedras	2433
31	3117306	Conceição das Alagoas	2434
31	3117405	Conceição de Ipanema	2435
31	3117504	Conceição do Mato dentro	2436
31	3117603	Conceição do Pará	2437
31	3117702	Conceição do Rio Verde	2438
31	3117801	Conceição dos Ouros	2439
31	3117836	Cônego Marinho	2440
31	3117876	Confins	2441
31	3117900	Congonhal	2442
31	3118007	Congonhas	2443
31	3118106	Congonhas do Norte	2444
31	3118205	Conquista	2445
31	3118304	Conselheiro Lafaiete	2446
31	3118403	Conselheiro Pena	2447
31	3118502	Consolação	2448
31	3118601	Contagem	2449
31	3118700	Coqueiral	2450
31	3118809	Coração de Jesus	2451
31	3118908	Cordisburgo	2452
31	3119005	Cordislândia	2453
31	3119104	Corinto	2454
31	3119203	Coroaci	2455
31	3119302	Coromandel	2456
31	3119401	Coronel Fabriciano	2457
31	3119500	Coronel Murta	2458
31	3119609	Coronel Pacheco	2459
31	3119708	Coronel Xavier Chaves	2460
31	3119807	Córrego danta	2461
31	3119906	Córrego do Bom Jesus	2462
31	3119955	Córrego Fundo	2463
31	3120003	Córrego Novo	2464
31	3120102	Couto de Magalhães de Minas	2465
31	3120151	Crisólita	2466
31	3120201	Cristais	2467
31	3120300	Cristália	2468
31	3120409	Cristiano Otoni	2469
31	3120508	Cristina	2470
31	3120607	Crucilândia	2471
31	3120706	Cruzeiro da Fortaleza	2472
31	3120805	Cruzília	2473
31	3120839	Cuparaque	2474
31	3120870	Curral de dentro	2475
31	3120904	Curvelo	2476
31	3121001	datas	2477
31	3121100	delfim Moreira	2478
31	3121209	delfinópolis	2479
31	3121258	delta	2480
31	3121308	descoberto	2481
31	3121407	desterro de Entre Rios	2482
31	3121506	desterro do Melo	2483
31	3121605	Diamantina	2484
31	3121704	Diogo de Vasconcelos	2485
31	3121803	Dionísio	2486
31	3121902	Divinésia	2487
31	3122009	Divino	2488
31	3122108	Divino das Laranjeiras	2489
31	3122207	Divinolândia de Minas	2490
31	3122306	Divinópolis	2491
31	3122355	Divisa Alegre	2492
31	3122405	Divisa Nova	2493
31	3122454	Divisópolis	2494
31	3122470	dom Bosco	2495
31	3122504	dom Cavati	2496
31	3122603	dom Joaquim	2497
31	3122702	dom Silvério	2498
31	3122801	dom Viçoso	2499
31	3122900	dona Eusébia	2500
31	3123007	dores de Campos	2501
31	3123106	dores de Guanhães	2502
31	3123205	dores do Indaiá	2503
31	3123304	dores do Turvo	2504
31	3123403	doresópolis	2505
31	3123502	douradoquara	2506
31	3123528	Durandé	2507
31	3123601	Elói Mendes	2508
31	3123700	Engenheiro Caldas	2509
31	3123809	Engenheiro Navarro	2510
31	3123858	Entre Folhas	2511
31	3123908	Entre Rios de Minas	2512
31	3124005	Ervália	2513
31	3124104	Esmeraldas	2514
31	3124203	Espera Feliz	2515
31	3124302	Espinosa	2516
31	3124401	Espírito Santo do dourado	2517
31	3124500	Estiva	2518
31	3124609	Estrela dalva	2519
31	3124708	Estrela do Indaiá	2520
31	3124807	Estrela do Sul	2521
31	3124906	Eugenópolis	2522
31	3125002	Ewbank da Câmara	2523
31	3125101	Extrema	2524
31	3125200	Fama	2525
31	3125309	Faria Lemos	2526
31	3125408	Felício dos Santos	2527
31	3125507	São Gonçalo do Rio Preto	2528
31	3125606	Felisburgo	2529
31	3125705	Felixlândia	2530
31	3125804	Fernandes Tourinho	2531
31	3125903	Ferros	2532
31	3125952	Fervedouro	2533
31	3126000	Florestal	2534
31	3126109	Formiga	2535
31	3126208	Formoso	2536
31	3126307	Fortaleza de Minas	2537
31	3126406	Fortuna de Minas	2538
31	3126505	Francisco Badaró	2539
31	3126604	Francisco Dumont	2540
31	3126703	Francisco Sá	2541
31	3126752	Franciscópolis	2542
31	3126802	Frei Gaspar	2543
31	3126901	Frei Inocêncio	2544
31	3126950	Frei Lagonegro	2545
31	3127008	Fronteira	2546
31	3127057	Fronteira dos Vales	2547
31	3127073	Fruta de Leite	2548
31	3127107	Frutal	2549
31	3127206	Funilândia	2550
31	3127305	Galiléia	2551
31	3127339	Gameleiras	2552
31	3127354	Glaucilândia	2553
31	3127370	Goiabeira	2554
31	3127388	Goianá	2555
31	3127404	Gonçalves	2556
31	3127503	Gonzaga	2557
31	3127602	Gouveia	2558
31	3127701	Governador Valadares	2559
31	3127800	Grão Mogol	2560
31	3127909	Grupiara	2561
31	3128006	Guanhães	2562
31	3128105	Guapé	2563
31	3128204	Guaraciaba	2564
31	3128253	Guaraciama	2565
31	3128303	Guaranésia	2566
31	3128402	Guarani	2567
31	3128501	Guarará	2568
31	3128600	Guarda-Mor	2569
31	3128709	Guaxupé	2570
31	3128808	Guidoval	2571
31	3128907	Guimarânia	2572
31	3129004	Guiricema	2573
31	3129103	Gurinhatã	2574
31	3129202	Heliodora	2575
31	3129301	Iapu	2576
31	3129400	Ibertioga	2577
31	3129509	Ibiá	2578
31	3129608	Ibiaí	2579
31	3129657	Ibiracatu	2580
31	3129707	Ibiraci	2581
31	3129806	Ibirité	2582
31	3129905	Ibitiúra de Minas	2583
31	3130002	Ibituruna	2584
31	3130051	Icaraí de Minas	2585
31	3130101	Igarapé	2586
31	3130200	Igaratinga	2587
31	3130309	Iguatama	2588
31	3130408	Ijaci	2589
31	3130507	Ilicínea	2590
31	3130556	Imbé de Minas	2591
31	3130606	Inconfidentes	2592
31	3130655	Indaiabira	2593
31	3130705	Indianópolis	2594
31	3130804	Ingaí	2595
31	3130903	Inhapim	2596
31	3131000	Inhaúma	2597
31	3131109	Inimutaba	2598
31	3131158	Ipaba	2599
31	3131208	Ipanema	2600
31	3131307	Ipatinga	2601
31	3131406	Ipiaçu	2602
31	3131505	Ipuiúna	2603
31	3131604	Iraí de Minas	2604
31	3131703	Itabira	2605
31	3131802	Itabirinha	2606
31	3131901	Itabirito	2607
31	3132008	Itacambira	2608
31	3132107	Itacarambi	2609
31	3132206	Itaguara	2610
31	3132305	Itaipé	2611
31	3132404	Itajubá	2612
31	3132503	Itamarandiba	2613
31	3132602	Itamarati de Minas	2614
31	3132701	Itambacuri	2615
31	3132800	Itambé do Mato dentro	2616
31	3132909	Itamogi	2617
31	3133006	Itamonte	2618
31	3133105	Itanhandu	2619
31	3133204	Itanhomi	2620
31	3133303	Itaobim	2621
31	3133402	Itapagipe	2622
31	3133501	Itapecerica	2623
31	3133600	Itapeva	2624
31	3133709	Itatiaiuçu	2625
31	3133758	Itaú de Minas	2626
31	3133808	Itaúna	2627
31	3133907	Itaverava	2628
31	3134004	Itinga	2629
31	3134103	Itueta	2630
31	3134202	Ituiutaba	2631
31	3134301	Itumirim	2632
31	3134400	Iturama	2633
31	3134509	Itutinga	2634
31	3134608	Jaboticatubas	2635
31	3134707	Jacinto	2636
31	3134806	Jacuí	2637
31	3134905	Jacutinga	2638
31	3135001	Jaguaraçu	2639
31	3135050	Jaíba	2640
31	3135076	Jampruca	2641
31	3135100	Janaúba	2642
31	3135209	Januária	2643
31	3135308	Japaraíba	2644
31	3135357	Japonvar	2645
31	3135407	Jeceaba	2646
31	3135456	Jenipapo de Minas	2647
31	3135506	Jequeri	2648
31	3135605	Jequitaí	2649
31	3135704	Jequitibá	2650
31	3135803	Jequitinhonha	2651
31	3135902	Jesuânia	2652
31	3136009	Joaíma	2653
31	3136108	Joanésia	2654
31	3136207	João Monlevade	2655
31	3136306	João Pinheiro	2656
31	3136405	Joaquim Felício	2657
31	3136504	Jordânia	2658
31	3136520	José Gonçalves de Minas	2659
31	3136553	José Raydan	2660
31	3136579	Josenópolis	2661
31	3136603	Nova União	2662
31	3136652	Juatuba	2663
31	3136702	Juiz de Fora	2664
31	3136801	Juramento	2665
31	3136900	Juruaia	2666
31	3136959	Juvenília	2667
31	3137007	Ladainha	2668
31	3137106	Lagamar	2669
31	3137205	Lagoa da Prata	2670
31	3137304	Lagoa dos Patos	2671
31	3137403	Lagoa dourada	2672
31	3137502	Lagoa Formosa	2673
31	3137536	Lagoa Grande	2674
31	3137601	Lagoa Santa	2675
31	3137700	Lajinha	2676
31	3137809	Lambari	2677
31	3137908	Lamim	2678
31	3138005	Laranjal	2679
31	3138104	Lassance	2680
31	3138203	Lavras	2681
31	3138302	Leandro Ferreira	2682
31	3138351	Leme do Prado	2683
31	3138401	Leopoldina	2684
31	3138500	Liberdade	2685
31	3138609	Lima Duarte	2686
31	3138625	Limeira do Oeste	2687
31	3138658	Lontra	2688
31	3138674	Luisburgo	2689
31	3138682	Luislândia	2690
31	3138708	Luminárias	2691
31	3138807	Luz	2692
31	3138906	Machacalis	2693
31	3139003	Machado	2694
31	3139102	Madre de deus de Minas	2695
31	3139201	Malacacheta	2696
31	3139250	Mamonas	2697
31	3139300	Manga	2698
31	3139409	Manhuaçu	2699
31	3139508	Manhumirim	2700
31	3139607	Mantena	2701
31	3139706	Maravilhas	2702
31	3139805	Mar de Espanha	2703
31	3139904	Maria da Fé	2704
31	3140001	Mariana	2705
31	3140100	Marilac	2706
31	3140159	Mário Campos	2707
31	3140209	Maripá de Minas	2708
31	3140308	Marliéria	2709
31	3140407	Marmelópolis	2710
31	3140506	Martinho Campos	2711
31	3140530	Martins Soares	2712
31	3140555	Mata Verde	2713
31	3140605	Materlândia	2714
31	3140704	Mateus Leme	2715
31	3140803	Matias Barbosa	2716
31	3140852	Matias Cardoso	2717
31	3140902	Matipó	2718
31	3141009	Mato Verde	2719
31	3141108	Matozinhos	2720
31	3141207	Matutina	2721
31	3141306	Medeiros	2722
31	3141405	Medina	2723
31	3141504	Mendes Pimentel	2724
31	3141603	Mercês	2725
31	3141702	Mesquita	2726
31	3141801	Minas Novas	2727
31	3141900	Minduri	2728
31	3142007	Mirabela	2729
31	3142106	Miradouro	2730
31	3142205	Miraí	2731
31	3142254	Miravânia	2732
31	3142304	Moeda	2733
31	3142403	Moema	2734
31	3142502	Monjolos	2735
31	3142601	Monsenhor Paulo	2736
31	3142700	Montalvânia	2737
31	3142809	Monte Alegre de Minas	2738
31	3142908	Monte Azul	2739
31	3143005	Monte Belo	2740
31	3143104	Monte Carmelo	2741
31	3143153	Monte Formoso	2742
31	3143203	Monte Santo de Minas	2743
31	3143302	Montes Claros	2744
31	3143401	Monte Sião	2745
31	3143450	Montezuma	2746
31	3143500	Morada Nova de Minas	2747
31	3143609	Morro da Garça	2748
31	3143708	Morro do Pilar	2749
31	3143807	Munhoz	2750
31	3143906	Muriaé	2751
31	3144003	Mutum	2752
31	3144102	Muzambinho	2753
31	3144201	Nacip Raydan	2754
31	3144300	Nanuque	2755
31	3144359	Naque	2756
31	3144375	Natalândia	2757
31	3144409	Natércia	2758
31	3144508	Nazareno	2759
31	3144607	Nepomuceno	2760
31	3144656	Ninheira	2761
31	3144672	Nova Belém	2762
31	3144706	Nova Era	2763
31	3144805	Nova Lima	2764
31	3144904	Nova Módica	2765
31	3145000	Nova Ponte	2766
31	3145059	Nova Porteirinha	2767
31	3145109	Nova Resende	2768
31	3145208	Nova Serrana	2769
31	3145307	Novo Cruzeiro	2770
31	3145356	Novo Oriente de Minas	2771
31	3145372	Novorizonte	2772
31	3145406	Olaria	2773
31	3145455	Olhos-D'água	2774
31	3145505	Olímpio Noronha	2775
31	3145604	Oliveira	2776
31	3145703	Oliveira Fortes	2777
31	3145802	Onça de Pitangui	2778
31	3145851	Oratórios	2779
31	3145877	Orizânia	2780
31	3145901	Ouro Branco	2781
31	3146008	Ouro Fino	2782
31	3146107	Ouro Preto	2783
31	3146206	Ouro Verde de Minas	2784
31	3146255	Padre Carvalho	2785
31	3146305	Padre Paraíso	2786
31	3146404	Paineiras	2787
31	3146503	Pains	2788
31	3146552	Pai Pedro	2789
31	3146602	Paiva	2790
31	3146701	Palma	2791
31	3146750	Palmópolis	2792
31	3146909	Papagaios	2793
31	3147006	Paracatu	2794
31	3147105	Pará de Minas	2795
31	3147204	Paraguaçu	2796
31	3147303	Paraisópolis	2797
31	3147402	Paraopeba	2798
31	3147501	Passabém	2799
31	3147600	Passa Quatro	2800
31	3147709	Passa Tempo	2801
31	3147808	Passa-Vinte	2802
31	3147907	Passos	2803
31	3147956	Patis	2804
31	3148004	Patos de Minas	2805
31	3148103	Patrocínio	2806
31	3148202	Patrocínio do Muriaé	2807
31	3148301	Paula Cândido	2808
31	3148400	Paulistas	2809
31	3148509	Pavão	2810
31	3148608	Peçanha	2811
31	3148707	Pedra Azul	2812
31	3148756	Pedra Bonita	2813
31	3148806	Pedra do Anta	2814
31	3148905	Pedra do Indaiá	2815
31	3149002	Pedra dourada	2816
31	3149101	Pedralva	2817
31	3149150	Pedras de Maria da Cruz	2818
31	3149200	Pedrinópolis	2819
31	3149309	Pedro Leopoldo	2820
31	3149408	Pedro Teixeira	2821
31	3149507	Pequeri	2822
31	3149606	Pequi	2823
31	3149705	Perdigão	2824
31	3149804	Perdizes	2825
31	3149903	Perdões	2826
31	3149952	Periquito	2827
31	3150000	Pescador	2828
31	3150109	Piau	2829
31	3150158	Piedade de Caratinga	2830
31	3150208	Piedade de Ponte Nova	2831
31	3150307	Piedade do Rio Grande	2832
31	3150406	Piedade dos Gerais	2833
31	3150505	Pimenta	2834
31	3150539	Pingo-D'água	2835
31	3150570	Pintópolis	2836
31	3150604	Piracema	2837
31	3150703	Pirajuba	2838
31	3150802	Piranga	2839
31	3150901	Piranguçu	2840
31	3151008	Piranguinho	2841
31	3151107	Pirapetinga	2842
31	3151206	Pirapora	2843
31	3151305	Piraúba	2844
31	3151404	Pitangui	2845
31	3151503	Piumhi	2846
31	3151602	Planura	2847
31	3151701	Poço Fundo	2848
31	3151800	Poços de Caldas	2849
31	3151909	Pocrane	2850
31	3152006	Pompéu	2851
31	3152105	Ponte Nova	2852
31	3152131	Ponto Chique	2853
31	3152170	Ponto dos Volantes	2854
31	3152204	Porteirinha	2855
31	3152303	Porto Firme	2856
31	3152402	Poté	2857
31	3152501	Pouso Alegre	2858
31	3152600	Pouso Alto	2859
31	3152709	Prados	2860
31	3152808	Prata	2861
31	3152907	Pratápolis	2862
31	3153004	Pratinha	2863
31	3153103	Presidente Bernardes	2864
31	3153202	Presidente Juscelino	2865
31	3153301	Presidente Kubitschek	2866
31	3153400	Presidente Olegário	2867
31	3153509	Alto Jequitibá	2868
31	3153608	Prudente de Morais	2869
31	3153707	Quartel Geral	2870
31	3153806	Queluzito	2871
31	3153905	Raposos	2872
31	3154002	Raul Soares	2873
31	3154101	Recreio	2874
31	3154150	Reduto	2875
31	3154200	Resende Costa	2876
31	3154309	Resplendor	2877
31	3154408	Ressaquinha	2878
31	3154457	Riachinho	2879
31	3154507	Riacho dos Machados	2880
31	3154606	Ribeirão das Neves	2881
31	3154705	Ribeirão Vermelho	2882
31	3154804	Rio Acima	2883
31	3154903	Rio Casca	2884
31	3155009	Rio doce	2885
31	3155108	Rio do Prado	2886
31	3155207	Rio Espera	2887
31	3155306	Rio Manso	2888
31	3155405	Rio Novo	2889
31	3155504	Rio Paranaíba	2890
31	3155603	Rio Pardo de Minas	2891
31	3155702	Rio Piracicaba	2892
31	3155801	Rio Pomba	2893
31	3155900	Rio Preto	2894
31	3156007	Rio Vermelho	2895
31	3156106	Ritápolis	2896
31	3156205	Rochedo de Minas	2897
31	3156304	Rodeiro	2898
31	3156403	Romaria	2899
31	3156452	Rosário da Limeira	2900
31	3156502	Rubelita	2901
31	3156601	Rubim	2902
31	3156700	Sabará	2903
31	3156809	Sabinópolis	2904
31	3156908	Sacramento	2905
31	3157005	Salinas	2906
31	3157104	Salto da Divisa	2907
31	3157203	Santa Bárbara	2908
31	3157252	Santa Bárbara do Leste	2909
31	3157278	Santa Bárbara do Monte Verde	2910
31	3157302	Santa Bárbara do Tugúrio	2911
31	3157336	Santa Cruz de Minas	2912
31	3157377	Santa Cruz de Salinas	2913
31	3157401	Santa Cruz do Escalvado	2914
31	3157500	Santa Efigênia de Minas	2915
31	3157609	Santa Fé de Minas	2916
31	3157658	Santa Helena de Minas	2917
31	3157708	Santa Juliana	2918
31	3157807	Santa Luzia	2919
31	3157906	Santa Margarida	2920
31	3158003	Santa Maria de Itabira	2921
31	3158102	Santa Maria do Salto	2922
31	3158201	Santa Maria do Suaçuí	2923
31	3158300	Santana da Vargem	2924
31	3158409	Santana de Cataguases	2925
31	3158508	Santana de Pirapama	2926
31	3158607	Santana do deserto	2927
31	3158706	Santana do Garambéu	2928
31	3158805	Santana do Jacaré	2929
31	3158904	Santana do Manhuaçu	2930
31	3158953	Santana do Paraíso	2931
31	3159001	Santana do Riacho	2932
31	3159100	Santana dos Montes	2933
31	3159209	Santa Rita de Caldas	2934
31	3159308	Santa Rita de Jacutinga	2935
31	3159357	Santa Rita de Minas	2936
31	3159407	Santa Rita de Ibitipoca	2937
31	3159506	Santa Rita do Itueto	2938
31	3159605	Santa Rita do Sapucaí	2939
31	3159704	Santa Rosa da Serra	2940
31	3159803	Santa Vitória	2941
31	3159902	Santo Antônio do Amparo	2942
31	3160009	Santo Antônio do Aventureiro	2943
31	3160108	Santo Antônio do Grama	2944
31	3160207	Santo Antônio do Itambé	2945
31	3160306	Santo Antônio do Jacinto	2946
31	3160405	Santo Antônio do Monte	2947
31	3160454	Santo Antônio do Retiro	2948
31	3160504	Santo Antônio do Rio Abaixo	2949
31	3160603	Santo Hipólito	2950
31	3160702	Santos Dumont	2951
31	3160801	São Bento Abade	2952
31	3160900	São Brás do Suaçuí	2953
31	3160959	São domingos das dores	2954
31	3161007	São domingos do Prata	2955
31	3161056	São Félix de Minas	2956
31	3161106	São Francisco	2957
31	3161205	São Francisco de Paula	2958
31	3161304	São Francisco de Sales	2959
31	3161403	São Francisco do Glória	2960
31	3161502	São Geraldo	2961
31	3161601	São Geraldo da Piedade	2962
31	3161650	São Geraldo do Baixio	2963
31	3161700	São Gonçalo do Abaeté	2964
31	3161809	São Gonçalo do Pará	2965
31	3161908	São Gonçalo do Rio Abaixo	2966
31	3162005	São Gonçalo do Sapucaí	2967
31	3162104	São Gotardo	2968
31	3162203	São João Batista do Glória	2969
31	3162252	São João da Lagoa	2970
31	3162302	São João da Mata	2971
31	3162401	São João da Ponte	2972
31	3162450	São João das Missões	2973
31	3162500	São João del Rei	2974
31	3162559	São João do Manhuaçu	2975
31	3162575	São João do Manteninha	2976
31	3162609	São João do Oriente	2977
31	3162658	São João do Pacuí	2978
31	3162708	São João do Paraíso	2979
31	3162807	São João Evangelista	2980
31	3162906	São João Nepomuceno	2981
31	3162922	São Joaquim de Bicas	2982
31	3162948	São José da Barra	2983
31	3162955	São José da Lapa	2984
31	3163003	São José da Safira	2985
31	3163102	São José da Varginha	2986
31	3163201	São José do Alegre	2987
31	3163300	São José do Divino	2988
31	3163409	São José do Goiabal	2989
31	3163508	São José do Jacuri	2990
31	3163607	São José do Mantimento	2991
31	3163706	São Lourenço	2992
31	3163805	São Miguel do Anta	2993
31	3163904	São Pedro da União	2994
31	3164001	São Pedro dos Ferros	2995
31	3164100	São Pedro do Suaçuí	2996
31	3164209	São Romão	2997
31	3164308	São Roque de Minas	2998
31	3164407	São Sebastião da Bela Vista	2999
31	3164431	São Sebastião da Vargem Alegre	3000
31	3164472	São Sebastião do Anta	3001
31	3164506	São Sebastião do Maranhão	3002
31	3164605	São Sebastião do Oeste	3003
31	3164704	São Sebastião do Paraíso	3004
31	3164803	São Sebastião do Rio Preto	3005
31	3164902	São Sebastião do Rio Verde	3006
31	3165008	São Tiago	3007
31	3165107	São Tomás de Aquino	3008
31	3165206	São Thomé das Letras	3009
31	3165305	São Vicente de Minas	3010
31	3165404	Sapucaí-Mirim	3011
31	3165503	Sardoá	3012
31	3165537	Sarzedo	3013
31	3165552	Setubinha	3014
31	3165560	Sem-Peixe	3015
31	3165578	Senador Amaral	3016
31	3165602	Senador Cortes	3017
31	3165701	Senador Firmino	3018
31	3165800	Senador José Bento	3019
31	3165909	Senador Modestino Gonçalves	3020
31	3166006	Senhora de Oliveira	3021
31	3166105	Senhora do Porto	3022
31	3166204	Senhora dos Remédios	3023
31	3166303	Sericita	3024
31	3166402	Seritinga	3025
31	3166501	Serra Azul de Minas	3026
31	3166600	Serra da Saudade	3027
31	3166709	Serra dos Aimorés	3028
31	3166808	Serra do Salitre	3029
31	3166907	Serrania	3030
31	3166956	Serranópolis de Minas	3031
31	3167004	Serranos	3032
31	3167103	Serro	3033
31	3167202	Sete Lagoas	3034
31	3167301	Silveirânia	3035
31	3167400	Silvianópolis	3036
31	3167509	Simão Pereira	3037
31	3167608	Simonésia	3038
31	3167707	Sobrália	3039
31	3167806	Soledade de Minas	3040
31	3167905	Tabuleiro	3041
31	3168002	Taiobeiras	3042
31	3168051	Taparuba	3043
31	3168101	Tapira	3044
31	3168200	Tapiraí	3045
31	3168309	Taquaraçu de Minas	3046
31	3168408	Tarumirim	3047
31	3168507	Teixeiras	3048
31	3168606	Teófilo Otoni	3049
31	3168705	Timóteo	3050
31	3168804	Tiradentes	3051
31	3168903	Tiros	3052
31	3169000	Tocantins	3053
31	3169059	Tocos do Moji	3054
31	3169109	Toledo	3055
31	3169208	Tombos	3056
31	3169307	Três Corações	3057
31	3169356	Três Marias	3058
31	3169406	Três Pontas	3059
31	3169505	Tumiritinga	3060
31	3169604	Tupaciguara	3061
31	3169703	Turmalina	3062
31	3169802	Turvolândia	3063
31	3169901	Ubá	3064
31	3170008	Ubaí	3065
31	3170057	Ubaporanga	3066
31	3170107	Uberaba	3067
31	3170206	Uberlândia	3068
31	3170305	Umburatiba	3069
31	3170404	Unaí	3070
31	3170438	União de Minas	3071
31	3170479	Uruana de Minas	3072
31	3170503	Urucânia	3073
31	3170529	Urucuia	3074
31	3170578	Vargem Alegre	3075
31	3170602	Vargem Bonita	3076
31	3170651	Vargem Grande do Rio Pardo	3077
31	3170701	Varginha	3078
31	3170750	Varjão de Minas	3079
31	3170800	Várzea da Palma	3080
31	3170909	Varzelândia	3081
31	3171006	Vazante	3082
31	3171030	Verdelândia	3083
31	3171071	Veredinha	3084
31	3171105	Veríssimo	3085
31	3171154	Vermelho Novo	3086
31	3171204	Vespasiano	3087
31	3171303	Viçosa	3088
31	3171402	Vieiras	3089
31	3171501	Mathias Lobato	3090
31	3171600	Virgem da Lapa	3091
31	3171709	Virgínia	3092
31	3171808	Virginópolis	3093
31	3171907	Virgolândia	3094
31	3172004	Visconde do Rio Branco	3095
31	3172103	Volta Grande	3096
31	3172202	Wenceslau Braz	3097
32	3200102	Afonso Cláudio	3098
32	3200136	Águia Branca	3099
32	3200169	Água doce do Norte	3100
32	3200201	Alegre	3101
32	3200300	Alfredo Chaves	3102
32	3200359	Alto Rio Novo	3103
32	3200409	Anchieta	3104
32	3200508	Apiacá	3105
32	3200607	Aracruz	3106
32	3200706	Atilio Vivacqua	3107
32	3200805	Baixo Guandu	3108
32	3200904	Barra de São Francisco	3109
32	3201001	Boa Esperança	3110
32	3201100	Bom Jesus do Norte	3111
32	3201159	Brejetuba	3112
32	3201209	Cachoeiro de Itapemirim	3113
32	3201308	Cariacica	3114
32	3201407	Castelo	3115
32	3201506	Colatina	3116
32	3201605	Conceição da Barra	3117
32	3201704	Conceição do Castelo	3118
32	3201803	Divino de São Lourenço	3119
32	3201902	domingos Martins	3120
32	3202009	dores do Rio Preto	3121
32	3202108	Ecoporanga	3122
32	3202207	Fundão	3123
32	3202256	Governador Lindenberg	3124
32	3202306	Guaçuí	3125
32	3202405	Guarapari	3126
32	3202454	Ibatiba	3127
32	3202504	Ibiraçu	3128
32	3202553	Ibitirama	3129
32	3202603	Iconha	3130
32	3202652	Irupi	3131
32	3202702	Itaguaçu	3132
32	3202801	Itapemirim	3133
32	3202900	Itarana	3134
32	3203007	Iúna	3135
32	3203056	Jaguaré	3136
32	3203106	Jerônimo Monteiro	3137
32	3203130	João Neiva	3138
32	3203163	Laranja da Terra	3139
32	3203205	Linhares	3140
32	3203304	Mantenópolis	3141
32	3203320	Marataízes	3142
32	3203346	Marechal Floriano	3143
32	3203353	Marilândia	3144
32	3203403	Mimoso do Sul	3145
32	3203502	Montanha	3146
32	3203601	Mucurici	3147
32	3203700	Muniz Freire	3148
32	3203809	Muqui	3149
32	3203908	Nova Venécia	3150
32	3204005	Pancas	3151
32	3204054	Pedro Canário	3152
32	3204104	Pinheiros	3153
32	3204203	Piúma	3154
32	3204252	Ponto Belo	3155
32	3204302	Presidente Kennedy	3156
32	3204351	Rio Bananal	3157
32	3204401	Rio Novo do Sul	3158
32	3204500	Santa Leopoldina	3159
32	3204559	Santa Maria de Jetibá	3160
32	3204609	Santa Teresa	3161
32	3204658	São domingos do Norte	3162
32	3204708	São Gabriel da Palha	3163
32	3204807	São José do Calçado	3164
32	3204906	São Mateus	3165
32	3204955	São Roque do Canaã	3166
32	3205002	Serra	3167
32	3205010	Sooretama	3168
32	3205036	Vargem Alta	3169
32	3205069	Venda Nova do Imigrante	3170
32	3205101	Viana	3171
32	3205150	Vila Pavão	3172
32	3205176	Vila Valério	3173
32	3205200	Vila Velha	3174
32	3205309	Vitória	3175
33	3300100	Angra dos Reis	3176
33	3300159	Aperibé	3177
33	3300209	Araruama	3178
33	3300225	Areal	3179
33	3300233	Armação dos Búzios	3180
33	3300258	Arraial do Cabo	3181
33	3300308	Barra do Piraí	3182
33	3300407	Barra Mansa	3183
33	3300456	Belford Roxo	3184
33	3300506	Bom Jardim	3185
33	3300605	Bom Jesus do Itabapoana	3186
33	3300704	Cabo Frio	3187
33	3300803	Cachoeiras de Macacu	3188
33	3300902	Cambuci	3189
33	3300936	Carapebus	3190
33	3300951	Comendador Levy Gasparian	3191
33	3301009	Campos dos Goytacazes	3192
33	3301108	Cantagalo	3193
33	3301157	Cardoso Moreira	3194
33	3301207	Carmo	3195
33	3301306	Casimiro de Abreu	3196
33	3301405	Conceição de Macabu	3197
33	3301504	Cordeiro	3198
33	3301603	Duas Barras	3199
33	3301702	Duque de Caxias	3200
33	3301801	Engenheiro Paulo de Frontin	3201
33	3301850	Guapimirim	3202
33	3301876	Iguaba Grande	3203
33	3301900	Itaboraí	3204
33	3302007	Itaguaí	3205
33	3302056	Italva	3206
33	3302106	Itaocara	3207
33	3302205	Itaperuna	3208
33	3302254	Itatiaia	3209
33	3302270	Japeri	3210
33	3302304	Laje do Muriaé	3211
33	3302403	Macaé	3212
33	3302452	Macuco	3213
33	3302502	Magé	3214
33	3302601	Mangaratiba	3215
33	3302700	Maricá	3216
33	3302809	Mendes	3217
33	3302858	Mesquita	3218
33	3302908	Miguel Pereira	3219
33	3303005	Miracema	3220
33	3303104	Natividade	3221
33	3303203	Nilópolis	3222
33	3303302	Niterói	3223
33	3303401	Nova Friburgo	3224
33	3303500	Nova Iguaçu	3225
33	3303609	Paracambi	3226
33	3303708	Paraíba do Sul	3227
33	3303807	Paraty	3228
33	3303856	Paty do Alferes	3229
33	3303906	Petrópolis	3230
33	3303955	Pinheiral	3231
33	3304003	Piraí	3232
33	3304102	Porciúncula	3233
33	3304110	Porto Real	3234
33	3304128	Quatis	3235
33	3304144	Queimados	3236
33	3304151	Quissamã	3237
33	3304201	Resende	3238
33	3304300	Rio Bonito	3239
33	3304409	Rio Claro	3240
33	3304508	Rio das Flores	3241
33	3304524	Rio das Ostras	3242
33	3304557	Rio de Janeiro	3243
33	3304607	Santa Maria Madalena	3244
33	3304706	Santo Antônio de Pádua	3245
33	3304755	São Francisco de Itabapoana	3246
33	3304805	São Fidélis	3247
33	3304904	São Gonçalo	3248
33	3305000	São João da Barra	3249
33	3305109	São João de Meriti	3250
33	3305133	São José de Ubá	3251
33	3305158	São José do Vale do Rio Preto	3252
33	3305208	São Pedro da Aldeia	3253
33	3305307	São Sebastião do Alto	3254
33	3305406	Sapucaia	3255
33	3305505	Saquarema	3256
33	3305554	Seropédica	3257
33	3305604	Silva Jardim	3258
33	3305703	Sumidouro	3259
33	3305752	Tanguá	3260
33	3305802	Teresópolis	3261
33	3305901	Trajano de Moraes	3262
33	3306008	Três Rios	3263
33	3306107	Valença	3264
33	3306156	Varre-Sai	3265
33	3306206	Vassouras	3266
33	3306305	Volta Redonda	3267
35	3500105	Adamantina	3268
35	3500204	Adolfo	3269
35	3500303	Aguaí	3270
35	3500402	Águas da Prata	3271
35	3500501	Águas de Lindóia	3272
35	3500550	Águas de Santa Bárbara	3273
35	3500600	Águas de São Pedro	3274
35	3500709	Agudos	3275
35	3500758	Alambari	3276
35	3500808	Alfredo Marcondes	3277
35	3500907	Altair	3278
35	3501004	Altinópolis	3279
35	3501103	Alto Alegre	3280
35	3501152	Alumínio	3281
35	3501202	Álvares Florence	3282
35	3501301	Álvares Machado	3283
35	3501400	Álvaro de Carvalho	3284
35	3501509	Alvinlândia	3285
35	3501608	Americana	3286
35	3501707	Américo Brasiliense	3287
35	3501806	Américo de Campos	3288
35	3501905	Amparo	3289
35	3502002	Analândia	3290
35	3502101	Andradina	3291
35	3502200	Angatuba	3292
35	3502309	Anhembi	3293
35	3502408	Anhumas	3294
35	3502507	Aparecida	3295
35	3502606	Aparecida D'oeste	3296
35	3502705	Apiaí	3297
35	3502754	Araçariguama	3298
35	3502804	Araçatuba	3299
35	3502903	Araçoiaba da Serra	3300
35	3503000	Aramina	3301
35	3503109	Arandu	3302
35	3503158	Arapeí	3303
35	3503208	Araraquara	3304
35	3503307	Araras	3305
35	3503356	Arco-Íris	3306
35	3503406	Arealva	3307
35	3503505	Areias	3308
35	3503604	Areiópolis	3309
35	3503703	Ariranha	3310
35	3503802	Artur Nogueira	3311
35	3503901	Arujá	3312
35	3503950	Aspásia	3313
35	3504008	Assis	3314
35	3504107	Atibaia	3315
35	3504206	Auriflama	3316
35	3504305	Avaí	3317
35	3504404	Avanhandava	3318
35	3504503	Avaré	3319
35	3504602	Bady Bassitt	3320
35	3504701	Balbinos	3321
35	3504800	Bálsamo	3322
35	3504909	Bananal	3323
35	3505005	Barão de Antonina	3324
35	3505104	Barbosa	3325
35	3505203	Bariri	3326
35	3505302	Barra Bonita	3327
35	3505351	Barra do Chapéu	3328
35	3505401	Barra do Turvo	3329
35	3505500	Barretos	3330
35	3505609	Barrinha	3331
35	3505708	Barueri	3332
35	3505807	Bastos	3333
35	3505906	Batatais	3334
35	3506003	Bauru	3335
35	3506102	Bebedouro	3336
35	3506201	Bento de Abreu	3337
35	3506300	Bernardino de Campos	3338
35	3506359	Bertioga	3339
35	3506409	Bilac	3340
35	3506508	Birigui	3341
35	3506607	Biritiba-Mirim	3342
35	3506706	Boa Esperança do Sul	3343
35	3506805	Bocaina	3344
35	3506904	Bofete	3345
35	3507001	Boituva	3346
35	3507100	Bom Jesus dos Perdões	3347
35	3507159	Bom Sucesso de Itararé	3348
35	3507209	Borá	3349
35	3507308	Boracéia	3350
35	3507407	Borborema	3351
35	3507456	Borebi	3352
35	3507506	Botucatu	3353
35	3507605	Bragança Paulista	3354
35	3507704	Braúna	3355
35	3507753	Brejo Alegre	3356
35	3507803	Brodowski	3357
35	3507902	Brotas	3358
35	3508009	Buri	3359
35	3508108	Buritama	3360
35	3508207	Buritizal	3361
35	3508306	Cabrália Paulista	3362
35	3508405	Cabreúva	3363
35	3508504	Caçapava	3364
35	3508603	Cachoeira Paulista	3365
35	3508702	Caconde	3366
35	3508801	Cafelândia	3367
35	3508900	Caiabu	3368
35	3509007	Caieiras	3369
35	3509106	Caiuá	3370
35	3509205	Cajamar	3371
35	3509254	Cajati	3372
35	3509304	Cajobi	3373
35	3509403	Cajuru	3374
35	3509452	Campina do Monte Alegre	3375
35	3509502	Campinas	3376
35	3509601	Campo Limpo Paulista	3377
35	3509700	Campos do Jordão	3378
35	3509809	Campos Novos Paulista	3379
35	3509908	Cananéia	3380
35	3509957	Canas	3381
35	3510005	Cândido Mota	3382
35	3510104	Cândido Rodrigues	3383
35	3510153	Canitar	3384
35	3510203	Capão Bonito	3385
35	3510302	Capela do Alto	3386
35	3510401	Capivari	3387
35	3510500	Caraguatatuba	3388
35	3510609	Carapicuíba	3389
35	3510708	Cardoso	3390
35	3510807	Casa Branca	3391
35	3510906	Cássia dos Coqueiros	3392
35	3511003	Castilho	3393
35	3511102	Catanduva	3394
35	3511201	Catiguá	3395
35	3511300	Cedral	3396
35	3511409	Cerqueira César	3397
35	3511508	Cerquilho	3398
35	3511607	Cesário Lange	3399
35	3511706	Charqueada	3400
35	3511904	Clementina	3401
35	3512001	Colina	3402
35	3512100	Colômbia	3403
35	3512209	Conchal	3404
35	3512308	Conchas	3405
35	3512407	Cordeirópolis	3406
35	3512506	Coroados	3407
35	3512605	Coronel Macedo	3408
35	3512704	Corumbataí	3409
35	3512803	Cosmópolis	3410
35	3512902	Cosmorama	3411
35	3513009	Cotia	3412
35	3513108	Cravinhos	3413
35	3513207	Cristais Paulista	3414
35	3513306	Cruzália	3415
35	3513405	Cruzeiro	3416
35	3513504	Cubatão	3417
35	3513603	Cunha	3418
35	3513702	descalvado	3419
35	3513801	Diadema	3420
35	3513850	Dirce Reis	3421
35	3513900	Divinolândia	3422
35	3514007	dobrada	3423
35	3514106	dois Córregos	3424
35	3514205	dolcinópolis	3425
35	3514304	dourado	3426
35	3514403	Dracena	3427
35	3514502	Duartina	3428
35	3514601	Dumont	3429
35	3514700	Echaporã	3430
35	3514809	Eldorado	3431
35	3514908	Elias Fausto	3432
35	3514924	Elisiário	3433
35	3514957	Embaúba	3434
35	3515004	Embu das Artes	3435
35	3515103	Embu-Guaçu	3436
35	3515129	Emilianópolis	3437
35	3515152	Engenheiro Coelho	3438
35	3515186	Espírito Santo do Pinhal	3439
35	3515194	Espírito Santo do Turvo	3440
35	3515202	Estrela D'oeste	3441
35	3515301	Estrela do Norte	3442
35	3515350	Euclides da Cunha Paulista	3443
35	3515400	Fartura	3444
35	3515509	Fernandópolis	3445
35	3515608	Fernando Prestes	3446
35	3515657	Fernão	3447
35	3515707	Ferraz de Vasconcelos	3448
35	3515806	Flora Rica	3449
35	3515905	Floreal	3450
35	3516002	Flórida Paulista	3451
35	3516101	Florínia	3452
35	3516200	Franca	3453
35	3516309	Francisco Morato	3454
35	3516408	Franco da Rocha	3455
35	3516507	Gabriel Monteiro	3456
35	3516606	Gália	3457
35	3516705	Garça	3458
35	3516804	Gastão Vidigal	3459
35	3516853	Gavião Peixoto	3460
35	3516903	General Salgado	3461
35	3517000	Getulina	3462
35	3517109	Glicério	3463
35	3517208	Guaiçara	3464
35	3517307	Guaimbê	3465
35	3517406	Guaíra	3466
35	3517505	Guapiaçu	3467
35	3517604	Guapiara	3468
35	3517703	Guará	3469
35	3517802	Guaraçaí	3470
35	3517901	Guaraci	3471
35	3518008	Guarani D'oeste	3472
35	3518107	Guarantã	3473
35	3518206	Guararapes	3474
35	3518305	Guararema	3475
35	3518404	Guaratinguetá	3476
35	3518503	Guareí	3477
35	3518602	Guariba	3478
35	3518701	Guarujá	3479
35	3518800	Guarulhos	3480
35	3518859	Guatapará	3481
35	3518909	Guzolândia	3482
35	3519006	Herculândia	3483
35	3519055	Holambra	3484
35	3519071	Hortolândia	3485
35	3519105	Iacanga	3486
35	3519204	Iacri	3487
35	3519253	Iaras	3488
35	3519303	Ibaté	3489
35	3519402	Ibirá	3490
35	3519501	Ibirarema	3491
35	3519600	Ibitinga	3492
35	3519709	Ibiúna	3493
35	3519808	Icém	3494
35	3519907	Iepê	3495
35	3520004	Igaraçu do Tietê	3496
35	3520103	Igarapava	3497
35	3520202	Igaratá	3498
35	3520301	Iguape	3499
35	3520400	Ilhabela	3500
35	3520426	Ilha Comprida	3501
35	3520442	Ilha Solteira	3502
35	3520509	Indaiatuba	3503
35	3520608	Indiana	3504
35	3520707	Indiaporã	3505
35	3520806	Inúbia Paulista	3506
35	3520905	Ipaussu	3507
35	3521002	Iperó	3508
35	3521101	Ipeúna	3509
35	3521150	Ipiguá	3510
35	3521200	Iporanga	3511
35	3521309	Ipuã	3512
35	3521408	Iracemápolis	3513
35	3521507	Irapuã	3514
35	3521606	Irapuru	3515
35	3521705	Itaberá	3516
35	3521804	Itaí	3517
35	3521903	Itajobi	3518
35	3522000	Itaju	3519
35	3522109	Itanhaém	3520
35	3522158	Itaóca	3521
35	3522208	Itapecerica da Serra	3522
35	3522307	Itapetininga	3523
35	3522406	Itapeva	3524
35	3522505	Itapevi	3525
35	3522604	Itapira	3526
35	3522653	Itapirapuã Paulista	3527
35	3522703	Itápolis	3528
35	3522802	Itaporanga	3529
35	3522901	Itapuí	3530
35	3523008	Itapura	3531
35	3523107	Itaquaquecetuba	3532
35	3523206	Itararé	3533
35	3523305	Itariri	3534
35	3523404	Itatiba	3535
35	3523503	Itatinga	3536
35	3523602	Itirapina	3537
35	3523701	Itirapuã	3538
35	3523800	Itobi	3539
35	3523909	Itu	3540
35	3524006	Itupeva	3541
35	3524105	Ituverava	3542
35	3524204	Jaborandi	3543
35	3524303	Jaboticabal	3544
35	3524402	Jacareí	3545
35	3524501	Jaci	3546
35	3524600	Jacupiranga	3547
35	3524709	Jaguariúna	3548
35	3524808	Jales	3549
35	3524907	Jambeiro	3550
35	3525003	Jandira	3551
35	3525102	Jardinópolis	3552
35	3525201	Jarinu	3553
35	3525300	Jaú	3554
35	3525409	Jeriquara	3555
35	3525508	Joanópolis	3556
35	3525607	João Ramalho	3557
35	3525706	José Bonifácio	3558
35	3525805	Júlio Mesquita	3559
35	3525854	Jumirim	3560
35	3525904	Jundiaí	3561
35	3526001	Junqueirópolis	3562
35	3526100	Juquiá	3563
35	3526209	Juquitiba	3564
35	3526308	Lagoinha	3565
35	3526407	Laranjal Paulista	3566
35	3526506	Lavínia	3567
35	3526605	Lavrinhas	3568
35	3526704	Leme	3569
35	3526803	Lençóis Paulista	3570
35	3526902	Limeira	3571
35	3527009	Lindóia	3572
35	3527108	Lins	3573
35	3527207	Lorena	3574
35	3527256	Lourdes	3575
35	3527306	Louveira	3576
35	3527405	Lucélia	3577
35	3527504	Lucianópolis	3578
35	3527603	Luís Antônio	3579
35	3527702	Luiziânia	3580
35	3527801	Lupércio	3581
35	3527900	Lutécia	3582
35	3528007	Macatuba	3583
35	3528106	Macaubal	3584
35	3528205	Macedônia	3585
35	3528304	Magda	3586
35	3528403	Mairinque	3587
35	3528502	Mairiporã	3588
35	3528601	Manduri	3589
35	3528700	Marabá Paulista	3590
35	3528809	Maracaí	3591
35	3528858	Marapoama	3592
35	3528908	Mariápolis	3593
35	3529005	Marília	3594
35	3529104	Marinópolis	3595
35	3529203	Martinópolis	3596
35	3529302	Matão	3597
35	3529401	Mauá	3598
35	3529500	Mendonça	3599
35	3529609	Meridiano	3600
35	3529658	Mesópolis	3601
35	3529708	Miguelópolis	3602
35	3529807	Mineiros do Tietê	3603
35	3529906	Miracatu	3604
35	3530003	Mira Estrela	3605
35	3530102	Mirandópolis	3606
35	3530201	Mirante do Paranapanema	3607
35	3530300	Mirassol	3608
35	3530409	Mirassolândia	3609
35	3530508	Mococa	3610
35	3530607	Mogi das Cruzes	3611
35	3530706	Mogi Guaçu	3612
35	3530805	Mogi Mirim	3613
35	3530904	Mombuca	3614
35	3531001	Monções	3615
35	3531100	Mongaguá	3616
35	3531209	Monte Alegre do Sul	3617
35	3531308	Monte Alto	3618
35	3531407	Monte Aprazível	3619
35	3531506	Monte Azul Paulista	3620
35	3531605	Monte Castelo	3621
35	3531704	Monteiro Lobato	3622
35	3531803	Monte Mor	3623
35	3531902	Morro Agudo	3624
35	3532009	Morungaba	3625
35	3532058	Motuca	3626
35	3532108	Murutinga do Sul	3627
35	3532157	Nantes	3628
35	3532207	Narandiba	3629
35	3532306	Natividade da Serra	3630
35	3532405	Nazaré Paulista	3631
35	3532504	Neves Paulista	3632
35	3532603	Nhandeara	3633
35	3532702	Nipoã	3634
35	3532801	Nova Aliança	3635
35	3532827	Nova Campina	3636
35	3532843	Nova Canaã Paulista	3637
35	3532868	Nova Castilho	3638
35	3532900	Nova Europa	3639
35	3533007	Nova Granada	3640
35	3533106	Nova Guataporanga	3641
35	3533205	Nova Independência	3642
35	3533254	Novais	3643
35	3533304	Nova Luzitânia	3644
35	3533403	Nova Odessa	3645
35	3533502	Novo Horizonte	3646
35	3533601	Nuporanga	3647
35	3533700	Ocauçu	3648
35	3533809	Óleo	3649
35	3533908	Olímpia	3650
35	3534005	Onda Verde	3651
35	3534104	Oriente	3652
35	3534203	Orindiúva	3653
35	3534302	Orlândia	3654
35	3534401	Osasco	3655
35	3534500	Oscar Bressane	3656
35	3534609	Osvaldo Cruz	3657
35	3534708	Ourinhos	3658
35	3534757	Ouroeste	3659
35	3534807	Ouro Verde	3660
35	3534906	Pacaembu	3661
35	3535002	Palestina	3662
35	3535101	Palmares Paulista	3663
35	3535200	Palmeira D'oeste	3664
35	3535309	Palmital	3665
35	3535408	Panorama	3666
35	3535507	Paraguaçu Paulista	3667
35	3535606	Paraibuna	3668
35	3535705	Paraíso	3669
35	3535804	Paranapanema	3670
35	3535903	Paranapuã	3671
35	3536000	Parapuã	3672
35	3536109	Pardinho	3673
35	3536208	Pariquera-Açu	3674
35	3536257	Parisi	3675
35	3536307	Patrocínio Paulista	3676
35	3536406	Paulicéia	3677
35	3536505	Paulínia	3678
35	3536570	Paulistânia	3679
35	3536604	Paulo de Faria	3680
35	3536703	Pederneiras	3681
35	3536802	Pedra Bela	3682
35	3536901	Pedranópolis	3683
35	3537008	Pedregulho	3684
35	3537107	Pedreira	3685
35	3537156	Pedrinhas Paulista	3686
35	3537206	Pedro de Toledo	3687
35	3537305	Penápolis	3688
35	3537404	Pereira Barreto	3689
35	3537503	Pereiras	3690
35	3537602	Peruíbe	3691
35	3537701	Piacatu	3692
35	3537800	Piedade	3693
35	3537909	Pilar do Sul	3694
35	3538006	Pindamonhangaba	3695
35	3538105	Pindorama	3696
35	3538204	Pinhalzinho	3697
35	3538303	Piquerobi	3698
35	3538501	Piquete	3699
35	3538600	Piracaia	3700
35	3538709	Piracicaba	3701
35	3538808	Piraju	3702
35	3538907	Pirajuí	3703
35	3539004	Pirangi	3704
35	3539103	Pirapora do Bom Jesus	3705
35	3539202	Pirapozinho	3706
35	3539301	Pirassununga	3707
35	3539400	Piratininga	3708
35	3539509	Pitangueiras	3709
35	3539608	Planalto	3710
35	3539707	Platina	3711
35	3539806	Poá	3712
35	3539905	Poloni	3713
35	3540002	Pompéia	3714
35	3540101	Pongaí	3715
35	3540200	Pontal	3716
35	3540259	Pontalinda	3717
35	3540309	Pontes Gestal	3718
35	3540408	Populina	3719
35	3540507	Porangaba	3720
35	3540606	Porto Feliz	3721
35	3540705	Porto Ferreira	3722
35	3540754	Potim	3723
35	3540804	Potirendaba	3724
35	3540853	Pracinha	3725
35	3540903	Pradópolis	3726
35	3541000	Praia Grande	3727
35	3541059	Pratânia	3728
35	3541109	Presidente Alves	3729
35	3541208	Presidente Bernardes	3730
35	3541307	Presidente Epitácio	3731
35	3541406	Presidente Prudente	3732
35	3541505	Presidente Venceslau	3733
35	3541604	Promissão	3734
35	3541653	Quadra	3735
35	3541703	Quatá	3736
35	3541802	Queiroz	3737
35	3541901	Queluz	3738
35	3542008	Quintana	3739
35	3542107	Rafard	3740
35	3542206	Rancharia	3741
35	3542305	Redenção da Serra	3742
35	3542404	Regente Feijó	3743
35	3542503	Reginópolis	3744
35	3542602	Registro	3745
35	3542701	Restinga	3746
35	3542800	Ribeira	3747
35	3542909	Ribeirão Bonito	3748
35	3543006	Ribeirão Branco	3749
35	3543105	Ribeirão Corrente	3750
35	3543204	Ribeirão do Sul	3751
35	3543238	Ribeirão dos Índios	3752
35	3543253	Ribeirão Grande	3753
35	3543303	Ribeirão Pires	3754
35	3543402	Ribeirão Preto	3755
35	3543501	Riversul	3756
35	3543600	Rifaina	3757
35	3543709	Rincão	3758
35	3543808	Rinópolis	3759
35	3543907	Rio Claro	3760
35	3544004	Rio das Pedras	3761
35	3544103	Rio Grande da Serra	3762
35	3544202	Riolândia	3763
43	4318507	São José do Norte	3764
43	4318606	São José do Ouro	3765
43	4318614	São José do Sul	3766
43	4318622	São José dos Ausentes	3767
43	4318705	São Leopoldo	3768
43	4318804	São Lourenço do Sul	3769
43	4318903	São Luiz Gonzaga	3770
43	4319000	São Marcos	3771
43	4319109	São Martinho	3772
43	4319125	São Martinho da Serra	3773
43	4319158	São Miguel das Missões	3774
43	4319208	São Nicolau	3775
43	4319307	São Paulo das Missões	3776
43	4319356	São Pedro da Serra	3777
43	4319364	São Pedro das Missões	3778
43	4319372	São Pedro do Butiá	3779
43	4319406	São Pedro do Sul	3780
43	4319505	São Sebastião do Caí	3781
43	4319604	São Sepé	3782
43	4319703	São Valentim	3783
43	4319711	São Valentim do Sul	3784
43	4319737	São Valério do Sul	3785
43	4319752	São Vendelino	3786
43	4319802	São Vicente do Sul	3787
43	4319901	Sapiranga	3788
43	4320008	Sapucaia do Sul	3789
43	4320107	Sarandi	3790
43	4320206	Seberi	3791
43	4320230	Sede Nova	3792
43	4320263	Segredo	3793
43	4320305	Selbach	3794
43	4320321	Senador Salgado Filho	3795
43	4320354	Sentinela do Sul	3796
43	4320404	Serafina Corrêa	3797
43	4320453	Sério	3798
43	4320503	Sertão	3799
43	4320552	Sertão Santana	3800
43	4320578	Sete de Setembro	3801
43	4320602	Severiano de Almeida	3802
43	4320651	Silveira Martins	3803
43	4320677	Sinimbu	3804
43	4320701	Sobradinho	3805
43	4320800	Soledade	3806
43	4320859	Tabaí	3807
43	4320909	Tapejara	3808
43	4321006	Tapera	3809
43	4321105	Tapes	3810
43	4321204	Taquara	3811
43	4321303	Taquari	3812
43	4321329	Taquaruçu do Sul	3813
43	4321352	Tavares	3814
43	4321402	Tenente Portela	3815
43	4321436	Terra de Areia	3816
43	4321451	Teutônia	3817
43	4321469	Tio Hugo	3818
43	4321477	Tiradentes do Sul	3819
43	4321493	Toropi	3820
43	4321501	Torres	3821
43	4321600	Tramandaí	3822
43	4321626	Travesseiro	3823
43	4321634	Três Arroios	3824
43	4321667	Três Cachoeiras	3825
43	4321709	Três Coroas	3826
43	4321808	Três de Maio	3827
43	4321832	Três Forquilhas	3828
43	4321857	Três Palmeiras	3829
43	4321907	Três Passos	3830
43	4321956	Trindade do Sul	3831
43	4322004	Triunfo	3832
43	4322103	Tucunduva	3833
43	4322152	Tunas	3834
43	4322186	Tupanci do Sul	3835
43	4322202	Tupanciretã	3836
43	4322251	Tupandi	3837
43	4322301	Tuparendi	3838
43	4322327	Turuçu	3839
43	4322343	Ubiretama	3840
43	4322350	União da Serra	3841
43	4322376	Unistalda	3842
43	4322400	Uruguaiana	3843
43	4322509	Vacaria	3844
43	4322525	Vale Verde	3845
43	4322533	Vale do Sol	3846
43	4322541	Vale Real	3847
43	4322558	Vanini	3848
43	4322608	Venâncio Aires	3849
43	4322707	Vera Cruz	3850
43	4322806	Veranópolis	3851
43	4322855	Vespasiano Correa	3852
43	4322905	Viadutos	3853
43	4323002	Viamão	3854
43	4323101	Vicente Dutra	3855
43	4323200	Victor Graeff	3856
43	4323309	Vila Flores	3857
43	4323358	Vila Lângaro	3858
43	4323408	Vila Maria	3859
43	4323457	Vila Nova do Sul	3860
43	4323507	Vista Alegre	3861
43	4323606	Vista Alegre do Prata	3862
43	4323705	Vista Gaúcha	3863
43	4323754	Vitória das Missões	3864
43	4323770	Westfalia	3865
43	4323804	Xangri-Lá	3866
50	5000203	Água Clara	3867
50	5000252	Alcinópolis	3868
50	5000609	Amambai	3869
50	5000708	Anastácio	3870
50	5000807	Anaurilândia	3871
50	5000856	Angélica	3872
50	5000906	Antônio João	3873
50	5001003	Aparecida do Taboado	3874
50	5001102	Aquidauana	3875
50	5001243	Aral Moreira	3876
50	5001508	Bandeirantes	3877
50	5001904	Bataguassu	3878
50	5002001	Batayporã	3879
50	5002100	Bela Vista	3880
50	5002159	Bodoquena	3881
50	5002209	Bonito	3882
50	5002308	Brasilândia	3883
50	5002407	Caarapó	3884
50	5002605	Camapuã	3885
50	5002704	Campo Grande	3886
50	5002803	Caracol	3887
50	5002902	Cassilândia	3888
50	5002951	Chapadão do Sul	3889
50	5003108	Corguinho	3890
50	5003157	Coronel Sapucaia	3891
50	5003207	Corumbá	3892
50	5003256	Costa Rica	3893
50	5003306	Coxim	3894
50	5003454	deodápolis	3895
50	5003488	dois Irmãos do Buriti	3896
50	5003504	douradina	3897
35	3544251	Rosana	3898
35	3544301	Roseira	3899
35	3544400	Rubiácea	3900
35	3544509	Rubinéia	3901
35	3544608	Sabino	3902
35	3544707	Sagres	3903
35	3544806	Sales	3904
35	3544905	Sales Oliveira	3905
35	3545001	Salesópolis	3906
35	3545100	Salmourão	3907
35	3545159	Saltinho	3908
35	3545209	Salto	3909
35	3545308	Salto de Pirapora	3910
35	3545407	Salto Grande	3911
35	3545506	Sandovalina	3912
35	3545605	Santa Adélia	3913
35	3545704	Santa Albertina	3914
35	3545803	Santa Bárbara D'oeste	3915
35	3546009	Santa Branca	3916
35	3546108	Santa Clara D'oeste	3917
35	3546207	Santa Cruz da Conceição	3918
35	3546256	Santa Cruz da Esperança	3919
35	3546306	Santa Cruz das Palmeiras	3920
35	3546405	Santa Cruz do Rio Pardo	3921
35	3546504	Santa Ernestina	3922
35	3546603	Santa Fé do Sul	3923
35	3546702	Santa Gertrudes	3924
35	3546801	Santa Isabel	3925
35	3546900	Santa Lúcia	3926
35	3547007	Santa Maria da Serra	3927
35	3547106	Santa Mercedes	3928
35	3547205	Santana da Ponte Pensa	3929
35	3547304	Santana de Parnaíba	3930
35	3547403	Santa Rita D'oeste	3931
35	3547502	Santa Rita do Passa Quatro	3932
35	3547601	Santa Rosa de Viterbo	3933
35	3547650	Santa Salete	3934
35	3547700	Santo Anastácio	3935
35	3547809	Santo André	3936
35	3547908	Santo Antônio da Alegria	3937
35	3548005	Santo Antônio de Posse	3938
35	3548054	Santo Antônio do Aracanguá	3939
35	3548104	Santo Antônio do Jardim	3940
35	3548203	Santo Antônio do Pinhal	3941
35	3548302	Santo Expedito	3942
35	3548401	Santópolis do Aguapeí	3943
35	3548500	Santos	3944
35	3548609	São Bento do Sapucaí	3945
35	3548708	São Bernardo do Campo	3946
35	3548807	São Caetano do Sul	3947
35	3548906	São Carlos	3948
35	3549003	São Francisco	3949
35	3549102	São João da Boa Vista	3950
35	3549201	São João das Duas Pontes	3951
35	3549250	São João de Iracema	3952
35	3549300	São João do Pau D'alho	3953
35	3549409	São Joaquim da Barra	3954
35	3549508	São José da Bela Vista	3955
35	3549607	São José do Barreiro	3956
35	3549706	São José do Rio Pardo	3957
35	3549805	São José do Rio Preto	3958
35	3549904	São José dos Campos	3959
35	3549953	São Lourenço da Serra	3960
35	3550001	São Luís do Paraitinga	3961
35	3550100	São Manuel	3962
35	3550209	São Miguel Arcanjo	3963
35	3550308	São Paulo	3964
35	3550407	São Pedro	3965
35	3550506	São Pedro do Turvo	3966
35	3550605	São Roque	3967
35	3550704	São Sebastião	3968
35	3550803	São Sebastião da Grama	3969
35	3550902	São Simão	3970
35	3551009	São Vicente	3971
35	3551108	Sarapuí	3972
35	3551207	Sarutaiá	3973
35	3551306	Sebastianópolis do Sul	3974
35	3551405	Serra Azul	3975
35	3551504	Serrana	3976
35	3551603	Serra Negra	3977
35	3551702	Sertãozinho	3978
35	3551801	Sete Barras	3979
35	3551900	Severínia	3980
35	3552007	Silveiras	3981
35	3552106	Socorro	3982
35	3552205	Sorocaba	3983
35	3552304	Sud Mennucci	3984
35	3552403	Sumaré	3985
35	3552502	Suzano	3986
35	3552551	Suzanápolis	3987
35	3552601	Tabapuã	3988
35	3552700	Tabatinga	3989
35	3552809	Taboão da Serra	3990
35	3552908	Taciba	3991
35	3553005	Taguaí	3992
35	3553104	Taiaçu	3993
35	3553203	Taiúva	3994
35	3553302	Tambaú	3995
35	3553401	Tanabi	3996
35	3553500	Tapiraí	3997
35	3553609	Tapiratiba	3998
35	3553658	Taquaral	3999
35	3553708	Taquaritinga	4000
35	3553807	Taquarituba	4001
35	3553856	Taquarivaí	4002
35	3553906	Tarabai	4003
35	3553955	Tarumã	4004
35	3554003	Tatuí	4005
35	3554102	Taubaté	4006
35	3554201	Tejupá	4007
35	3554300	Teodoro Sampaio	4008
35	3554409	Terra Roxa	4009
35	3554508	Tietê	4010
35	3554607	Timburi	4011
35	3554656	Torre de Pedra	4012
35	3554706	Torrinha	4013
35	3554755	Trabiju	4014
35	3554805	Tremembé	4015
35	3554904	Três Fronteiras	4016
35	3554953	Tuiuti	4017
35	3555000	Tupã	4018
35	3555109	Tupi Paulista	4019
35	3555208	Turiúba	4020
35	3555307	Turmalina	4021
35	3555356	Ubarana	4022
35	3555406	Ubatuba	4023
35	3555505	Ubirajara	4024
35	3555604	Uchoa	4025
35	3555703	União Paulista	4026
35	3555802	Urânia	4027
35	3555901	Uru	4028
35	3556008	Urupês	4029
35	3556107	Valentim Gentil	4030
35	3556206	Valinhos	4031
35	3556305	Valparaíso	4032
35	3556354	Vargem	4033
35	3556404	Vargem Grande do Sul	4034
35	3556453	Vargem Grande Paulista	4035
35	3556503	Várzea Paulista	4036
35	3556602	Vera Cruz	4037
35	3556701	Vinhedo	4038
35	3556800	Viradouro	4039
35	3556909	Vista Alegre do Alto	4040
35	3556958	Vitória Brasil	4041
35	3557006	Votorantim	4042
35	3557105	Votuporanga	4043
35	3557154	Zacarias	4044
35	3557204	Chavantes	4045
35	3557303	Estiva Gerbi	4046
41	4100103	Abatiá	4047
41	4100202	Adrianópolis	4048
41	4100301	Agudos do Sul	4049
41	4100400	Almirante Tamandaré	4050
41	4100459	Altamira do Paraná	4051
41	4100509	Altônia	4052
41	4100608	Alto Paraná	4053
41	4100707	Alto Piquiri	4054
41	4100806	Alvorada do Sul	4055
41	4100905	Amaporã	4056
41	4101002	Ampére	4057
41	4101051	Anahy	4058
41	4101101	Andirá	4059
41	4101150	Ângulo	4060
41	4101200	Antonina	4061
41	4101309	Antônio Olinto	4062
41	4101408	Apucarana	4063
41	4101507	Arapongas	4064
41	4101606	Arapoti	4065
41	4101655	Arapuã	4066
41	4101705	Araruna	4067
41	4101804	Araucária	4068
41	4101853	Ariranha do Ivaí	4069
41	4101903	Assaí	4070
41	4102000	Assis Chateaubriand	4071
41	4102109	Astorga	4072
41	4102208	Atalaia	4073
41	4102307	Balsa Nova	4074
41	4102406	Bandeirantes	4075
41	4102505	Barbosa Ferraz	4076
41	4102604	Barracão	4077
41	4102703	Barra do Jacaré	4078
41	4102752	Bela Vista da Caroba	4079
41	4102802	Bela Vista do Paraíso	4080
41	4102901	Bituruna	4081
41	4103008	Boa Esperança	4082
41	4103024	Boa Esperança do Iguaçu	4083
41	4103040	Boa Ventura de São Roque	4084
41	4103057	Boa Vista da Aparecida	4085
41	4103107	Bocaiúva do Sul	4086
41	4103156	Bom Jesus do Sul	4087
41	4103206	Bom Sucesso	4088
41	4103222	Bom Sucesso do Sul	4089
41	4103305	Borrazópolis	4090
41	4103354	Braganey	4091
41	4103370	Brasilândia do Sul	4092
41	4103404	Cafeara	4093
41	4103453	Cafelândia	4094
41	4103479	Cafezal do Sul	4095
41	4103503	Califórnia	4096
41	4103602	Cambará	4097
41	4103701	Cambé	4098
41	4103800	Cambira	4099
41	4103909	Campina da Lagoa	4100
41	4103958	Campina do Simão	4101
41	4104006	Campina Grande do Sul	4102
41	4104055	Campo Bonito	4103
41	4104105	Campo do Tenente	4104
41	4104204	Campo Largo	4105
41	4104253	Campo Magro	4106
41	4104303	Campo Mourão	4107
41	4104402	Cândido de Abreu	4108
41	4104428	Candói	4109
41	4104451	Cantagalo	4110
41	4104501	Capanema	4111
41	4104600	Capitão Leônidas Marques	4112
41	4104659	Carambeí	4113
41	4104709	Carlópolis	4114
41	4104808	Cascavel	4115
41	4104907	Castro	4116
41	4105003	Catanduvas	4117
41	4105102	Centenário do Sul	4118
41	4105201	Cerro Azul	4119
41	4105300	Céu Azul	4120
41	4105409	Chopinzinho	4121
41	4105508	Cianorte	4122
41	4105607	Cidade Gaúcha	4123
41	4105706	Clevelândia	4124
41	4105805	Colombo	4125
41	4105904	Colorado	4126
41	4106001	Congonhinhas	4127
41	4106100	Conselheiro Mairinck	4128
41	4106209	Contenda	4129
41	4106308	Corbélia	4130
41	4106407	Cornélio Procópio	4131
41	4106456	Coronel domingos Soares	4132
41	4106506	Coronel Vivida	4133
41	4106555	Corumbataí do Sul	4134
41	4106571	Cruzeiro do Iguaçu	4135
41	4106605	Cruzeiro do Oeste	4136
41	4106704	Cruzeiro do Sul	4137
41	4106803	Cruz Machado	4138
41	4106852	Cruzmaltina	4139
41	4106902	Curitiba	4140
41	4107009	Curiúva	4141
41	4107108	Diamante do Norte	4142
41	4107124	Diamante do Sul	4143
41	4107157	Diamante D'oeste	4144
41	4107207	dois Vizinhos	4145
41	4107256	douradina	4146
41	4107306	doutor Camargo	4147
41	4107405	Enéas Marques	4148
41	4107504	Engenheiro Beltrão	4149
41	4107520	Esperança Nova	4150
41	4107538	Entre Rios do Oeste	4151
41	4107546	Espigão Alto do Iguaçu	4152
41	4107553	Farol	4153
41	4107603	Faxinal	4154
41	4107652	Fazenda Rio Grande	4155
41	4107702	Fênix	4156
41	4107736	Fernandes Pinheiro	4157
41	4107751	Figueira	4158
41	4107801	Floraí	4159
41	4107850	Flor da Serra do Sul	4160
41	4107900	Floresta	4161
41	4108007	Florestópolis	4162
41	4108106	Flórida	4163
41	4108205	Formosa do Oeste	4164
41	4108304	Foz do Iguaçu	4165
41	4108320	Francisco Alves	4166
41	4108403	Francisco Beltrão	4167
41	4108452	Foz do Jordão	4168
41	4108502	General Carneiro	4169
41	4108551	Godoy Moreira	4170
41	4108601	Goioerê	4171
41	4108650	Goioxim	4172
41	4108700	Grandes Rios	4173
41	4108809	Guaíra	4174
41	4108908	Guairaçá	4175
41	4108957	Guamiranga	4176
41	4109005	Guapirama	4177
41	4109104	Guaporema	4178
41	4109203	Guaraci	4179
41	4109302	Guaraniaçu	4180
41	4109401	Guarapuava	4181
41	4109500	Guaraqueçaba	4182
41	4109609	Guaratuba	4183
41	4109658	Honório Serpa	4184
41	4109708	Ibaiti	4185
41	4109757	Ibema	4186
41	4109807	Ibiporã	4187
41	4109906	Icaraíma	4188
41	4110003	Iguaraçu	4189
41	4110052	Iguatu	4190
41	4110078	Imbaú	4191
41	4110102	Imbituva	4192
41	4110201	Inácio Martins	4193
41	4110300	Inajá	4194
41	4110409	Indianópolis	4195
41	4110508	Ipiranga	4196
41	4110607	Iporã	4197
41	4110656	Iracema do Oeste	4198
41	4110706	Irati	4199
41	4110805	Iretama	4200
41	4110904	Itaguajé	4201
41	4110953	Itaipulândia	4202
41	4111001	Itambaracá	4203
41	4111100	Itambé	4204
41	4111209	Itapejara D'oeste	4205
41	4111258	Itaperuçu	4206
41	4111308	Itaúna do Sul	4207
41	4111407	Ivaí	4208
41	4111506	Ivaiporã	4209
41	4111555	Ivaté	4210
41	4111605	Ivatuba	4211
41	4111704	Jaboti	4212
41	4111803	Jacarezinho	4213
41	4111902	Jaguapitã	4214
41	4112009	Jaguariaíva	4215
41	4112108	Jandaia do Sul	4216
41	4112207	Janiópolis	4217
41	4112306	Japira	4218
41	4112405	Japurá	4219
41	4112504	Jardim Alegre	4220
41	4112603	Jardim Olinda	4221
41	4112702	Jataizinho	4222
41	4112751	Jesuítas	4223
41	4112801	Joaquim Távora	4224
41	4112900	Jundiaí do Sul	4225
41	4112959	Juranda	4226
41	4113007	Jussara	4227
41	4113106	Kaloré	4228
41	4113205	Lapa	4229
41	4113254	Laranjal	4230
41	4113304	Laranjeiras do Sul	4231
41	4113403	Leópolis	4232
41	4113429	Lidianópolis	4233
41	4113452	Lindoeste	4234
41	4113502	Loanda	4235
41	4113601	Lobato	4236
41	4113700	Londrina	4237
41	4113734	Luiziana	4238
41	4113759	Lunardelli	4239
41	4113809	Lupionópolis	4240
41	4113908	Mallet	4241
41	4114005	Mamborê	4242
41	4114104	Mandaguaçu	4243
41	4114203	Mandaguari	4244
41	4114302	Mandirituba	4245
41	4114351	Manfrinópolis	4246
41	4114401	Mangueirinha	4247
41	4114500	Manoel Ribas	4248
41	4114609	Marechal Cândido Rondon	4249
41	4114708	Maria Helena	4250
41	4114807	Marialva	4251
41	4114906	Marilândia do Sul	4252
41	4115002	Marilena	4253
41	4115101	Mariluz	4254
41	4115200	Maringá	4255
41	4115309	Mariópolis	4256
41	4115358	Maripá	4257
41	4115408	Marmeleiro	4258
41	4115457	Marquinho	4259
41	4115507	Marumbi	4260
41	4115606	Matelândia	4261
41	4115705	Matinhos	4262
41	4115739	Mato Rico	4263
41	4115754	Mauá da Serra	4264
41	4115804	Medianeira	4265
41	4115853	Mercedes	4266
41	4115903	Mirador	4267
41	4116000	Miraselva	4268
41	4116059	Missal	4269
41	4116109	Moreira Sales	4270
41	4116208	Morretes	4271
41	4116307	Munhoz de Melo	4272
41	4116406	Nossa Senhora das Graças	4273
41	4116505	Nova Aliança do Ivaí	4274
41	4116604	Nova América da Colina	4275
41	4116703	Nova Aurora	4276
41	4116802	Nova Cantu	4277
41	4116901	Nova Esperança	4278
41	4116950	Nova Esperança do Sudoeste	4279
41	4117008	Nova Fátima	4280
41	4117057	Nova Laranjeiras	4281
41	4117107	Nova Londrina	4282
41	4117206	Nova Olímpia	4283
41	4117214	Nova Santa Bárbara	4284
41	4117222	Nova Santa Rosa	4285
41	4117255	Nova Prata do Iguaçu	4286
41	4117271	Nova Tebas	4287
41	4117297	Novo Itacolomi	4288
41	4117305	Ortigueira	4289
41	4117404	Ourizona	4290
41	4117453	Ouro Verde do Oeste	4291
41	4117503	Paiçandu	4292
41	4117602	Palmas	4293
41	4117701	Palmeira	4294
41	4117800	Palmital	4295
41	4117909	Palotina	4296
41	4118006	Paraíso do Norte	4297
41	4118105	Paranacity	4298
41	4118204	Paranaguá	4299
41	4118303	Paranapoema	4300
41	4118402	Paranavaí	4301
41	4118451	Pato Bragado	4302
41	4118501	Pato Branco	4303
41	4118600	Paula Freitas	4304
41	4118709	Paulo Frontin	4305
41	4118808	Peabiru	4306
41	4118857	Perobal	4307
41	4118907	Pérola	4308
41	4119004	Pérola D'oeste	4309
41	4119103	Piên	4310
41	4119152	Pinhais	4311
41	4119202	Pinhalão	4312
41	4119251	Pinhal de São Bento	4313
41	4119301	Pinhão	4314
41	4119400	Piraí do Sul	4315
41	4119509	Piraquara	4316
41	4119608	Pitanga	4317
41	4119657	Pitangueiras	4318
41	4119707	Planaltina do Paraná	4319
41	4119806	Planalto	4320
41	4119905	Ponta Grossa	4321
41	4119954	Pontal do Paraná	4322
41	4120002	Porecatu	4323
41	4120101	Porto Amazonas	4324
41	4120150	Porto Barreiro	4325
41	4120200	Porto Rico	4326
41	4120309	Porto Vitória	4327
41	4120333	Prado Ferreira	4328
41	4120358	Pranchita	4329
41	4120408	Presidente Castelo Branco	4330
41	4120507	Primeiro de Maio	4331
41	4120606	Prudentópolis	4332
41	4120655	Quarto Centenário	4333
41	4120705	Quatiguá	4334
41	4120804	Quatro Barras	4335
41	4120853	Quatro Pontes	4336
41	4120903	Quedas do Iguaçu	4337
41	4121000	Querência do Norte	4338
41	4121109	Quinta do Sol	4339
41	4121208	Quitandinha	4340
41	4121257	Ramilândia	4341
41	4121307	Rancho Alegre	4342
41	4121356	Rancho Alegre D'oeste	4343
41	4121406	Realeza	4344
41	4121505	Rebouças	4345
41	4121604	Renascença	4346
41	4121703	Reserva	4347
41	4121752	Reserva do Iguaçu	4348
41	4121802	Ribeirão Claro	4349
41	4121901	Ribeirão do Pinhal	4350
41	4122008	Rio Azul	4351
41	4122107	Rio Bom	4352
41	4122156	Rio Bonito do Iguaçu	4353
41	4122172	Rio Branco do Ivaí	4354
41	4122206	Rio Branco do Sul	4355
41	4122305	Rio Negro	4356
41	4122404	Rolândia	4357
41	4122503	Roncador	4358
41	4122602	Rondon	4359
41	4122651	Rosário do Ivaí	4360
41	4122701	Sabáudia	4361
41	4122800	Salgado Filho	4362
41	4122909	Salto do Itararé	4363
41	4123006	Salto do Lontra	4364
41	4123105	Santa Amélia	4365
41	4123204	Santa Cecília do Pavão	4366
41	4123303	Santa Cruz de Monte Castelo	4367
41	4123402	Santa Fé	4368
41	4123501	Santa Helena	4369
41	4123600	Santa Inês	4370
41	4123709	Santa Isabel do Ivaí	4371
41	4123808	Santa Izabel do Oeste	4372
41	4123824	Santa Lúcia	4373
41	4123857	Santa Maria do Oeste	4374
41	4123907	Santa Mariana	4375
41	4123956	Santa Mônica	4376
41	4124004	Santana do Itararé	4377
41	4124020	Santa Tereza do Oeste	4378
41	4124053	Santa Terezinha de Itaipu	4379
41	4124103	Santo Antônio da Platina	4380
41	4124202	Santo Antônio do Caiuá	4381
41	4124301	Santo Antônio do Paraíso	4382
41	4124400	Santo Antônio do Sudoeste	4383
41	4124509	Santo Inácio	4384
41	4124608	São Carlos do Ivaí	4385
41	4124707	São Jerônimo da Serra	4386
41	4124806	São João	4387
41	4124905	São João do Caiuá	4388
41	4125001	São João do Ivaí	4389
41	4125100	São João do Triunfo	4390
41	4125209	São Jorge D'oeste	4391
41	4125308	São Jorge do Ivaí	4392
41	4125357	São Jorge do Patrocínio	4393
41	4125407	São José da Boa Vista	4394
41	4125456	São José das Palmeiras	4395
41	4125506	São José dos Pinhais	4396
41	4125555	São Manoel do Paraná	4397
41	4125605	São Mateus do Sul	4398
41	4125704	São Miguel do Iguaçu	4399
41	4125753	São Pedro do Iguaçu	4400
41	4125803	São Pedro do Ivaí	4401
41	4125902	São Pedro do Paraná	4402
41	4126009	São Sebastião da Amoreira	4403
41	4126108	São Tomé	4404
41	4126207	Sapopema	4405
41	4126256	Sarandi	4406
41	4126272	Saudade do Iguaçu	4407
41	4126306	Sengés	4408
41	4126355	Serranópolis do Iguaçu	4409
41	4126405	Sertaneja	4410
41	4126504	Sertanópolis	4411
41	4126603	Siqueira Campos	4412
41	4126652	Sulina	4413
41	4126678	Tamarana	4414
41	4126702	Tamboara	4415
41	4126801	Tapejara	4416
41	4126900	Tapira	4417
41	4127007	Teixeira Soares	4418
41	4127106	Telêmaco Borba	4419
41	4127205	Terra Boa	4420
41	4127304	Terra Rica	4421
41	4127403	Terra Roxa	4422
41	4127502	Tibagi	4423
41	4127601	Tijucas do Sul	4424
41	4127700	Toledo	4425
41	4127809	Tomazina	4426
41	4127858	Três Barras do Paraná	4427
41	4127882	Tunas do Paraná	4428
41	4127908	Tuneiras do Oeste	4429
41	4127957	Tupãssi	4430
41	4127965	Turvo	4431
41	4128005	Ubiratã	4432
41	4128104	Umuarama	4433
41	4128203	União da Vitória	4434
41	4128302	Uniflor	4435
41	4128401	Uraí	4436
41	4128500	Wenceslau Braz	4437
41	4128534	Ventania	4438
41	4128559	Vera Cruz do Oeste	4439
41	4128609	Verê	4440
41	4128625	Alto Paraíso	4441
41	4128633	doutor Ulysses	4442
41	4128658	Virmond	4443
41	4128708	Vitorino	4444
41	4128807	Xambrê	4445
42	4200051	Abdon Batista	4446
42	4200101	Abelardo Luz	4447
42	4200200	Agrolândia	4448
42	4200309	Agronômica	4449
42	4200408	Água doce	4450
42	4200507	Águas de Chapecó	4451
42	4200556	Águas Frias	4452
42	4200606	Águas Mornas	4453
42	4200705	Alfredo Wagner	4454
42	4200754	Alto Bela Vista	4455
42	4200804	Anchieta	4456
42	4200903	Angelina	4457
42	4201000	Anita Garibaldi	4458
42	4201109	Anitápolis	4459
42	4201208	Antônio Carlos	4460
42	4201257	Apiúna	4461
42	4201273	Arabutã	4462
42	4201307	Araquari	4463
42	4201406	Araranguá	4464
42	4201505	Armazém	4465
42	4201604	Arroio Trinta	4466
42	4201653	Arvoredo	4467
42	4201703	Ascurra	4468
42	4201802	Atalanta	4469
42	4201901	Aurora	4470
42	4201950	Balneário Arroio do Silva	4471
42	4202008	Balneário Camboriú	4472
42	4202057	Balneário Barra do Sul	4473
42	4202073	Balneário Gaivota	4474
42	4202081	Bandeirante	4475
42	4202099	Barra Bonita	4476
42	4202107	Barra Velha	4477
42	4202131	Bela Vista do Toldo	4478
42	4202156	Belmonte	4479
42	4202206	Benedito Novo	4480
42	4202305	Biguaçu	4481
42	4202404	Blumenau	4482
42	4202438	Bocaina do Sul	4483
42	4202453	Bombinhas	4484
42	4202503	Bom Jardim da Serra	4485
42	4202537	Bom Jesus	4486
42	4202578	Bom Jesus do Oeste	4487
42	4202602	Bom Retiro	4488
42	4202701	Botuverá	4489
42	4202800	Braço do Norte	4490
42	4202859	Braço do Trombudo	4491
42	4202875	Brunópolis	4492
42	4202909	Brusque	4493
42	4203006	Caçador	4494
42	4203105	Caibi	4495
42	4203154	Calmon	4496
42	4203204	Camboriú	4497
42	4203253	Capão Alto	4498
42	4203303	Campo Alegre	4499
42	4203402	Campo Belo do Sul	4500
42	4203501	Campo Erê	4501
42	4203600	Campos Novos	4502
42	4203709	Canelinha	4503
42	4203808	Canoinhas	4504
42	4203907	Capinzal	4505
42	4203956	Capivari de Baixo	4506
42	4204004	Catanduvas	4507
42	4204103	Caxambu do Sul	4508
42	4204152	Celso Ramos	4509
42	4204178	Cerro Negro	4510
42	4204194	Chapadão do Lageado	4511
42	4204202	Chapecó	4512
42	4204251	Cocal do Sul	4513
42	4204301	Concórdia	4514
42	4204350	Cordilheira Alta	4515
42	4204400	Coronel Freitas	4516
42	4204459	Coronel Martins	4517
42	4204509	Corupá	4518
42	4204558	Correia Pinto	4519
42	4204608	Criciúma	4520
42	4204707	Cunha Porã	4521
42	4204756	Cunhataí	4522
42	4204806	Curitibanos	4523
42	4204905	descanso	4524
42	4205001	Dionísio Cerqueira	4525
42	4205100	dona Emma	4526
42	4205159	doutor Pedrinho	4527
42	4205175	Entre Rios	4528
42	4205191	Ermo	4529
42	4205209	Erval Velho	4530
42	4205308	Faxinal dos Guedes	4531
42	4205357	Flor do Sertão	4532
42	4205407	Florianópolis	4533
42	4205431	Formosa do Sul	4534
42	4205456	Forquilhinha	4535
42	4205506	Fraiburgo	4536
42	4205555	Frei Rogério	4537
42	4205605	Galvão	4538
42	4205704	Garopaba	4539
42	4205803	Garuva	4540
42	4205902	Gaspar	4541
42	4206009	Governador Celso Ramos	4542
42	4206108	Grão Pará	4543
42	4206207	Gravatal	4544
42	4206306	Guabiruba	4545
42	4206405	Guaraciaba	4546
42	4206504	Guaramirim	4547
42	4206603	Guarujá do Sul	4548
42	4206652	Guatambú	4549
42	4206702	Herval D'oeste	4550
42	4206751	Ibiam	4551
42	4206801	Ibicaré	4552
42	4206900	Ibirama	4553
42	4207007	Içara	4554
42	4207106	Ilhota	4555
42	4207205	Imaruí	4556
42	4207304	Imbituba	4557
42	4207403	Imbuia	4558
42	4207502	Indaial	4559
42	4207577	Iomerê	4560
42	4207601	Ipira	4561
42	4207650	Iporã do Oeste	4562
42	4207684	Ipuaçu	4563
42	4207700	Ipumirim	4564
42	4207759	Iraceminha	4565
42	4207809	Irani	4566
42	4207858	Irati	4567
42	4207908	Irineópolis	4568
42	4208005	Itá	4569
42	4208104	Itaiópolis	4570
42	4208203	Itajaí	4571
42	4208302	Itapema	4572
42	4208401	Itapiranga	4573
42	4208450	Itapoá	4574
42	4208500	Ituporanga	4575
42	4208609	Jaborá	4576
42	4208708	Jacinto Machado	4577
42	4208807	Jaguaruna	4578
42	4208906	Jaraguá do Sul	4579
42	4208955	Jardinópolis	4580
42	4209003	Joaçaba	4581
42	4209102	Joinville	4582
42	4209151	José Boiteux	4583
42	4209177	Jupiá	4584
42	4209201	Lacerdópolis	4585
42	4209300	Lages	4586
42	4209409	Laguna	4587
42	4209458	Lajeado Grande	4588
42	4209508	Laurentino	4589
42	4209607	Lauro Muller	4590
42	4209706	Lebon Régis	4591
42	4209805	Leoberto Leal	4592
42	4209854	Lindóia do Sul	4593
42	4209904	Lontras	4594
42	4210001	Luiz Alves	4595
42	4210035	Luzerna	4596
42	4210050	Macieira	4597
42	4210100	Mafra	4598
42	4210209	Major Gercino	4599
42	4210308	Major Vieira	4600
42	4210407	Maracajá	4601
42	4210506	Maravilha	4602
42	4210555	Marema	4603
42	4210605	Massaranduba	4604
42	4210704	Matos Costa	4605
42	4210803	Meleiro	4606
42	4210852	Mirim doce	4607
42	4210902	Modelo	4608
42	4211009	Mondaí	4609
42	4211058	Monte Carlo	4610
42	4211108	Monte Castelo	4611
42	4211207	Morro da Fumaça	4612
42	4211256	Morro Grande	4613
42	4211306	Navegantes	4614
42	4211405	Nova Erechim	4615
42	4211454	Nova Itaberaba	4616
42	4211504	Nova Trento	4617
42	4211603	Nova Veneza	4618
42	4211652	Novo Horizonte	4619
42	4211702	Orleans	4620
42	4211751	Otacílio Costa	4621
42	4211801	Ouro	4622
42	4211850	Ouro Verde	4623
42	4211876	Paial	4624
42	4211892	Painel	4625
42	4211900	Palhoça	4626
42	4212007	Palma Sola	4627
42	4212056	Palmeira	4628
42	4212106	Palmitos	4629
42	4212205	Papanduva	4630
42	4212239	Paraíso	4631
42	4212254	Passo de Torres	4632
42	4212270	Passos Maia	4633
42	4212304	Paulo Lopes	4634
42	4212403	Pedras Grandes	4635
42	4212502	Penha	4636
42	4212601	Peritiba	4637
42	4212650	Pescaria Brava	4638
42	4212700	Petrolândia	4639
42	4212809	Balneário Piçarras	4640
42	4212908	Pinhalzinho	4641
42	4213005	Pinheiro Preto	4642
42	4213104	Piratuba	4643
42	4213153	Planalto Alegre	4644
42	4213203	Pomerode	4645
42	4213302	Ponte Alta	4646
42	4213351	Ponte Alta do Norte	4647
42	4213401	Ponte Serrada	4648
42	4213500	Porto Belo	4649
42	4213609	Porto União	4650
42	4213708	Pouso Redondo	4651
42	4213807	Praia Grande	4652
42	4213906	Presidente Castello Branco	4653
42	4214003	Presidente Getúlio	4654
42	4214102	Presidente Nereu	4655
42	4214151	Princesa	4656
42	4214201	Quilombo	4657
42	4214300	Rancho Queimado	4658
42	4214409	Rio das Antas	4659
42	4214508	Rio do Campo	4660
42	4214607	Rio do Oeste	4661
42	4214706	Rio dos Cedros	4662
42	4214805	Rio do Sul	4663
42	4214904	Rio Fortuna	4664
42	4215000	Rio Negrinho	4665
42	4215059	Rio Rufino	4666
42	4215075	Riqueza	4667
42	4215109	Rodeio	4668
42	4215208	Romelândia	4669
42	4215307	Salete	4670
42	4215356	Saltinho	4671
42	4215406	Salto Veloso	4672
42	4215455	Sangão	4673
42	4215505	Santa Cecília	4674
42	4215554	Santa Helena	4675
42	4215604	Santa Rosa de Lima	4676
42	4215653	Santa Rosa do Sul	4677
42	4215679	Santa Terezinha	4678
42	4215687	Santa Terezinha do Progresso	4679
42	4215695	Santiago do Sul	4680
42	4215703	Santo Amaro da Imperatriz	4681
42	4215752	São Bernardino	4682
42	4215802	São Bento do Sul	4683
42	4215901	São Bonifácio	4684
42	4216008	São Carlos	4685
42	4216057	São Cristovão do Sul	4686
42	4216107	São domingos	4687
42	4216206	São Francisco do Sul	4688
42	4216255	São João do Oeste	4689
42	4216305	São João Batista	4690
42	4216354	São João do Itaperiú	4691
42	4216404	São João do Sul	4692
42	4216503	São Joaquim	4693
42	4216602	São José	4694
42	4216701	São José do Cedro	4695
42	4216800	São José do Cerrito	4696
42	4216909	São Lourenço do Oeste	4697
42	4217006	São Ludgero	4698
42	4217105	São Martinho	4699
42	4217154	São Miguel da Boa Vista	4700
42	4217204	São Miguel do Oeste	4701
42	4217253	São Pedro de Alcântara	4702
42	4217303	Saudades	4703
42	4217402	Schroeder	4704
42	4217501	Seara	4705
42	4217550	Serra Alta	4706
42	4217600	Siderópolis	4707
42	4217709	Sombrio	4708
42	4217758	Sul Brasil	4709
42	4217808	Taió	4710
42	4217907	Tangará	4711
42	4217956	Tigrinhos	4712
42	4218004	Tijucas	4713
42	4218103	Timbé do Sul	4714
42	4218202	Timbó	4715
42	4218251	Timbó Grande	4716
42	4218301	Três Barras	4717
42	4218350	Treviso	4718
42	4218400	Treze de Maio	4719
42	4218509	Treze Tílias	4720
42	4218608	Trombudo Central	4721
42	4218707	Tubarão	4722
42	4218756	Tunápolis	4723
42	4218806	Turvo	4724
42	4218855	União do Oeste	4725
42	4218905	Urubici	4726
42	4218954	Urupema	4727
42	4219002	Urussanga	4728
42	4219101	Vargeão	4729
42	4219150	Vargem	4730
42	4219176	Vargem Bonita	4731
42	4219200	Vidal Ramos	4732
42	4219309	Videira	4733
42	4219358	Vitor Meireles	4734
42	4219408	Witmarsum	4735
42	4219507	Xanxerê	4736
42	4219606	Xavantina	4737
42	4219705	Xaxim	4738
42	4219853	Zortéa	4739
42	4220000	Balneário Rincão	4740
43	4300034	Aceguá	4741
43	4300059	Água Santa	4742
43	4300109	Agudo	4743
43	4300208	Ajuricaba	4744
43	4300307	Alecrim	4745
43	4300406	Alegrete	4746
43	4300455	Alegria	4747
43	4300471	Almirante Tamandaré do Sul	4748
43	4300505	Alpestre	4749
43	4300554	Alto Alegre	4750
43	4300570	Alto Feliz	4751
43	4300604	Alvorada	4752
43	4300638	Amaral Ferrador	4753
43	4300646	Ametista do Sul	4754
43	4300661	André da Rocha	4755
43	4300703	Anta Gorda	4756
43	4300802	Antônio Prado	4757
43	4300851	Arambaré	4758
43	4300877	Araricá	4759
43	4300901	Aratiba	4760
43	4301008	Arroio do Meio	4761
43	4301057	Arroio do Sal	4762
43	4301073	Arroio do Padre	4763
43	4301107	Arroio dos Ratos	4764
43	4301206	Arroio do Tigre	4765
43	4301305	Arroio Grande	4766
43	4301404	Arvorezinha	4767
43	4301503	Augusto Pestana	4768
43	4301552	Áurea	4769
43	4301602	Bagé	4770
43	4301636	Balneário Pinhal	4771
43	4301651	Barão	4772
43	4301701	Barão de Cotegipe	4773
43	4301750	Barão do Triunfo	4774
43	4301800	Barracão	4775
43	4301859	Barra do Guarita	4776
43	4301875	Barra do Quaraí	4777
43	4301909	Barra do Ribeiro	4778
43	4301925	Barra do Rio Azul	4779
43	4301958	Barra Funda	4780
43	4302006	Barros Cassal	4781
43	4302055	Benjamin Constant do Sul	4782
43	4302105	Bento Gonçalves	4783
43	4302154	Boa Vista das Missões	4784
43	4302204	Boa Vista do Buricá	4785
43	4302220	Boa Vista do Cadeado	4786
43	4302238	Boa Vista do Incra	4787
43	4302253	Boa Vista do Sul	4788
43	4302303	Bom Jesus	4789
43	4302352	Bom Princípio	4790
43	4302378	Bom Progresso	4791
43	4302402	Bom Retiro do Sul	4792
43	4302451	Boqueirão do Leão	4793
43	4302501	Bossoroca	4794
43	4302584	Bozano	4795
43	4302600	Braga	4796
43	4302659	Brochier	4797
43	4302709	Butiá	4798
43	4302808	Caçapava do Sul	4799
43	4302907	Cacequi	4800
43	4303004	Cachoeira do Sul	4801
43	4303103	Cachoeirinha	4802
43	4303202	Cacique doble	4803
43	4303301	Caibaté	4804
43	4303400	Caiçara	4805
43	4303509	Camaquã	4806
43	4303558	Camargo	4807
43	4303608	Cambará do Sul	4808
43	4303673	Campestre da Serra	4809
43	4303707	Campina das Missões	4810
43	4303806	Campinas do Sul	4811
43	4303905	Campo Bom	4812
43	4304002	Campo Novo	4813
43	4304101	Campos Borges	4814
43	4304200	Candelária	4815
43	4304309	Cândido Godói	4816
43	4304358	Candiota	4817
43	4304408	Canela	4818
43	4304507	Canguçu	4819
43	4304606	Canoas	4820
43	4304614	Canudos do Vale	4821
43	4304622	Capão Bonito do Sul	4822
43	4304630	Capão da Canoa	4823
43	4304655	Capão do Cipó	4824
43	4304663	Capão do Leão	4825
43	4304671	Capivari do Sul	4826
43	4304689	Capela de Santana	4827
43	4304697	Capitão	4828
43	4304705	Carazinho	4829
43	4304713	Caraá	4830
43	4304804	Carlos Barbosa	4831
43	4304853	Carlos Gomes	4832
43	4304903	Casca	4833
43	4304952	Caseiros	4834
43	4305009	Catuípe	4835
43	4305108	Caxias do Sul	4836
43	4305116	Centenário	4837
43	4305124	Cerrito	4838
43	4305132	Cerro Branco	4839
43	4305157	Cerro Grande	4840
43	4305173	Cerro Grande do Sul	4841
43	4305207	Cerro Largo	4842
43	4305306	Chapada	4843
43	4305355	Charqueadas	4844
43	4305371	Charrua	4845
43	4305405	Chiapetta	4846
43	4305439	Chuí	4847
43	4305447	Chuvisca	4848
43	4305454	Cidreira	4849
43	4305504	Ciríaco	4850
43	4305587	Colinas	4851
43	4305603	Colorado	4852
43	4305702	Condor	4853
43	4305801	Constantina	4854
43	4305835	Coqueiro Baixo	4855
43	4305850	Coqueiros do Sul	4856
43	4305871	Coronel Barros	4857
43	4305900	Coronel Bicaco	4858
43	4305934	Coronel Pilar	4859
43	4305959	Cotiporã	4860
43	4305975	Coxilha	4861
43	4306007	Crissiumal	4862
43	4306056	Cristal	4863
43	4306072	Cristal do Sul	4864
43	4306106	Cruz Alta	4865
43	4306130	Cruzaltense	4866
43	4306205	Cruzeiro do Sul	4867
43	4306304	david Canabarro	4868
43	4306320	derrubadas	4869
43	4306353	dezesseis de Novembro	4870
43	4306379	Dilermando de Aguiar	4871
43	4306403	dois Irmãos	4872
43	4306429	dois Irmãos das Missões	4873
43	4306452	dois Lajeados	4874
43	4306502	dom Feliciano	4875
43	4306551	dom Pedro de Alcântara	4876
43	4306601	dom Pedrito	4877
43	4306700	dona Francisca	4878
43	4306734	doutor Maurício Cardoso	4879
43	4306759	doutor Ricardo	4880
43	4306767	Eldorado do Sul	4881
43	4306809	Encantado	4882
43	4306908	Encruzilhada do Sul	4883
43	4306924	Engenho Velho	4884
43	4306932	Entre-Ijuís	4885
43	4306957	Entre Rios do Sul	4886
43	4306973	Erebango	4887
43	4307005	Erechim	4888
43	4307054	Ernestina	4889
43	4307104	Herval	4890
43	4307203	Erval Grande	4891
43	4307302	Erval Seco	4892
43	4307401	Esmeralda	4893
43	4307450	Esperança do Sul	4894
43	4307500	Espumoso	4895
43	4307559	Estação	4896
43	4307609	Estância Velha	4897
43	4307708	Esteio	4898
43	4307807	Estrela	4899
43	4307815	Estrela Velha	4900
43	4307831	Eugênio de Castro	4901
43	4307864	Fagundes Varela	4902
43	4307906	Farroupilha	4903
43	4308003	Faxinal do Soturno	4904
43	4308052	Faxinalzinho	4905
43	4308078	Fazenda Vilanova	4906
43	4308102	Feliz	4907
43	4308201	Flores da Cunha	4908
43	4308250	Floriano Peixoto	4909
43	4308300	Fontoura Xavier	4910
43	4308409	Formigueiro	4911
43	4308433	Forquetinha	4912
43	4308458	Fortaleza dos Valos	4913
43	4308508	Frederico Westphalen	4914
43	4308607	Garibaldi	4915
43	4308656	Garruchos	4916
43	4308706	Gaurama	4917
43	4308805	General Câmara	4918
43	4308854	Gentil	4919
43	4308904	Getúlio Vargas	4920
43	4309001	Giruá	4921
43	4309050	Glorinha	4922
43	4309100	Gramado	4923
43	4309126	Gramado dos Loureiros	4924
43	4309159	Gramado Xavier	4925
43	4309209	Gravataí	4926
43	4309258	Guabiju	4927
43	4309308	Guaíba	4928
43	4309407	Guaporé	4929
43	4309506	Guarani das Missões	4930
43	4309555	Harmonia	4931
43	4309571	Herveiras	4932
43	4309605	Horizontina	4933
43	4309654	Hulha Negra	4934
43	4309704	Humaitá	4935
43	4309753	Ibarama	4936
43	4309803	Ibiaçá	4937
43	4309902	Ibiraiaras	4938
43	4309951	Ibirapuitã	4939
43	4310009	Ibirubá	4940
43	4310108	Igrejinha	4941
43	4310207	Ijuí	4942
43	4310306	Ilópolis	4943
43	4310330	Imbé	4944
43	4310363	Imigrante	4945
43	4310405	Independência	4946
43	4310413	Inhacorá	4947
43	4310439	Ipê	4948
43	4310462	Ipiranga do Sul	4949
43	4310504	Iraí	4950
43	4310538	Itaara	4951
43	4310553	Itacurubi	4952
43	4310579	Itapuca	4953
43	4310603	Itaqui	4954
43	4310652	Itati	4955
43	4310702	Itatiba do Sul	4956
43	4310751	Ivorá	4957
43	4310801	Ivoti	4958
43	4310850	Jaboticaba	4959
43	4310876	Jacuizinho	4960
43	4310900	Jacutinga	4961
43	4311007	Jaguarão	4962
43	4311106	Jaguari	4963
43	4311122	Jaquirana	4964
43	4311130	Jari	4965
43	4311155	Jóia	4966
43	4311205	Júlio de Castilhos	4967
43	4311239	Lagoa Bonita do Sul	4968
43	4311254	Lagoão	4969
43	4311270	Lagoa dos Três Cantos	4970
43	4311304	Lagoa Vermelha	4971
43	4311403	Lajeado	4972
43	4311429	Lajeado do Bugre	4973
43	4311502	Lavras do Sul	4974
43	4311601	Liberato Salzano	4975
43	4311627	Lindolfo Collor	4976
43	4311643	Linha Nova	4977
43	4311700	Machadinho	4978
43	4311718	Maçambará	4979
43	4311734	Mampituba	4980
43	4311759	Manoel Viana	4981
43	4311775	Maquiné	4982
43	4311791	Maratá	4983
43	4311809	Marau	4984
43	4311908	Marcelino Ramos	4985
43	4311981	Mariana Pimentel	4986
43	4312005	Mariano Moro	4987
43	4312054	Marques de Souza	4988
43	4312104	Mata	4989
43	4312138	Mato Castelhano	4990
43	4312153	Mato Leitão	4991
43	4312179	Mato Queimado	4992
43	4312203	Maximiliano de Almeida	4993
43	4312252	Minas do Leão	4994
43	4312302	Miraguaí	4995
43	4312351	Montauri	4996
43	4312377	Monte Alegre dos Campos	4997
43	4312385	Monte Belo do Sul	4998
43	4312401	Montenegro	4999
43	4312427	Mormaço	5000
43	4312443	Morrinhos do Sul	5001
43	4312450	Morro Redondo	5002
43	4312476	Morro Reuter	5003
43	4312500	Mostardas	5004
43	4312609	Muçum	5005
43	4312617	Muitos Capões	5006
43	4312625	Muliterno	5007
43	4312658	Não-Me-Toque	5008
43	4312674	Nicolau Vergueiro	5009
43	4312708	Nonoai	5010
43	4312757	Nova Alvorada	5011
43	4312807	Nova Araçá	5012
43	4312906	Nova Bassano	5013
43	4312955	Nova Boa Vista	5014
43	4313003	Nova Bréscia	5015
43	4313011	Nova Candelária	5016
43	4313037	Nova Esperança do Sul	5017
43	4313060	Nova Hartz	5018
43	4313086	Nova Pádua	5019
43	4313102	Nova Palma	5020
43	4313201	Nova Petrópolis	5021
43	4313300	Nova Prata	5022
43	4313334	Nova Ramada	5023
43	4313359	Nova Roma do Sul	5024
43	4313375	Nova Santa Rita	5025
43	4313391	Novo Cabrais	5026
43	4313409	Novo Hamburgo	5027
43	4313425	Novo Machado	5028
43	4313441	Novo Tiradentes	5029
43	4313466	Novo Xingu	5030
43	4313490	Novo Barreiro	5031
43	4313508	Osório	5032
43	4313607	Paim Filho	5033
43	4313656	Palmares do Sul	5034
43	4313706	Palmeira das Missões	5035
43	4313805	Palmitinho	5036
43	4313904	Panambi	5037
43	4313953	Pantano Grande	5038
43	4314001	Paraí	5039
43	4314027	Paraíso do Sul	5040
43	4314035	Pareci Novo	5041
43	4314050	Parobé	5042
43	4314068	Passa Sete	5043
43	4314076	Passo do Sobrado	5044
43	4314100	Passo Fundo	5045
43	4314134	Paulo Bento	5046
43	4314159	Paverama	5047
43	4314175	Pedras Altas	5048
43	4314209	Pedro Osório	5049
43	4314308	Pejuçara	5050
43	4314407	Pelotas	5051
43	4314423	Picada Café	5052
43	4314456	Pinhal	5053
43	4314464	Pinhal da Serra	5054
43	4314472	Pinhal Grande	5055
43	4314498	Pinheirinho do Vale	5056
43	4314506	Pinheiro Machado	5057
43	4314548	Pinto Bandeira	5058
43	4314555	Pirapó	5059
43	4314605	Piratini	5060
43	4314704	Planalto	5061
43	4314753	Poço das Antas	5062
43	4314779	Pontão	5063
43	4314787	Ponte Preta	5064
43	4314803	Portão	5065
43	4314902	Porto Alegre	5066
43	4315008	Porto Lucena	5067
43	4315057	Porto Mauá	5068
43	4315073	Porto Vera Cruz	5069
43	4315107	Porto Xavier	5070
43	4315131	Pouso Novo	5071
43	4315149	Presidente Lucena	5072
43	4315156	Progresso	5073
43	4315172	Protásio Alves	5074
43	4315206	Putinga	5075
43	4315305	Quaraí	5076
43	4315313	Quatro Irmãos	5077
43	4315321	Quevedos	5078
43	4315354	Quinze de Novembro	5079
43	4315404	Redentora	5080
43	4315453	Relvado	5081
43	4315503	Restinga Seca	5082
43	4315552	Rio dos Índios	5083
43	4315602	Rio Grande	5084
43	4315701	Rio Pardo	5085
43	4315750	Riozinho	5086
43	4315800	Roca Sales	5087
43	4315909	Rodeio Bonito	5088
43	4315958	Rolador	5089
43	4316006	Rolante	5090
43	4316105	Ronda Alta	5091
43	4316204	Rondinha	5092
43	4316303	Roque Gonzales	5093
43	4316402	Rosário do Sul	5094
43	4316428	Sagrada Família	5095
43	4316436	Saldanha Marinho	5096
43	4316451	Salto do Jacuí	5097
43	4316477	Salvador das Missões	5098
43	4316501	Salvador do Sul	5099
43	4316600	Sananduva	5100
43	4316709	Santa Bárbara do Sul	5101
43	4316733	Santa Cecília do Sul	5102
43	4316758	Santa Clara do Sul	5103
43	4316808	Santa Cruz do Sul	5104
43	4316907	Santa Maria	5105
43	4316956	Santa Maria do Herval	5106
43	4316972	Santa Margarida do Sul	5107
43	4317004	Santana da Boa Vista	5108
43	4317103	Sant'ana do Livramento	5109
43	4317202	Santa Rosa	5110
43	4317251	Santa Tereza	5111
43	4317301	Santa Vitória do Palmar	5112
43	4317400	Santiago	5113
43	4317509	Santo Ângelo	5114
43	4317558	Santo Antônio do Palma	5115
43	4317608	Santo Antônio da Patrulha	5116
43	4317707	Santo Antônio das Missões	5117
43	4317756	Santo Antônio do Planalto	5118
43	4317806	Santo Augusto	5119
43	4317905	Santo Cristo	5120
43	4317954	Santo Expedito do Sul	5121
43	4318002	São Borja	5122
43	4318051	São domingos do Sul	5123
43	4318101	São Francisco de Assis	5124
43	4318200	São Francisco de Paula	5125
43	4318309	São Gabriel	5126
43	4318408	São Jerônimo	5127
43	4318424	São João da Urtiga	5128
43	4318432	São João do Polêsine	5129
43	4318440	São Jorge	5130
43	4318457	São José das Missões	5131
43	4318465	São José do Herval	5132
43	4318481	São José do Hortêncio	5133
43	4318499	São José do Inhacorá	5134
50	5003702	dourados	5135
50	5003751	Eldorado	5136
50	5003801	Fátima do Sul	5137
50	5003900	Figueirão	5138
50	5004007	Glória de dourados	5139
50	5004106	Guia Lopes da Laguna	5140
50	5004304	Iguatemi	5141
50	5004403	Inocência	5142
50	5004502	Itaporã	5143
50	5004601	Itaquiraí	5144
50	5004700	Ivinhema	5145
50	5004809	Japorã	5146
50	5004908	Jaraguari	5147
50	5005004	Jardim	5148
50	5005103	Jateí	5149
50	5005152	Juti	5150
50	5005202	Ladário	5151
50	5005251	Laguna Carapã	5152
50	5005400	Maracaju	5153
50	5005608	Miranda	5154
50	5005681	Mundo Novo	5155
50	5005707	Naviraí	5156
50	5005806	Nioaque	5157
50	5006002	Nova Alvorada do Sul	5158
50	5006200	Nova Andradina	5159
50	5006259	Novo Horizonte do Sul	5160
50	5006275	Paraíso das Águas	5161
50	5006309	Paranaíba	5162
50	5006358	Paranhos	5163
50	5006408	Pedro Gomes	5164
50	5006606	Ponta Porã	5165
50	5006903	Porto Murtinho	5166
50	5007109	Ribas do Rio Pardo	5167
50	5007208	Rio Brilhante	5168
50	5007307	Rio Negro	5169
50	5007406	Rio Verde de Mato Grosso	5170
50	5007505	Rochedo	5171
50	5007554	Santa Rita do Pardo	5172
50	5007695	São Gabriel do Oeste	5173
50	5007703	Sete Quedas	5174
50	5007802	Selvíria	5175
50	5007901	Sidrolândia	5176
50	5007935	Sonora	5177
50	5007950	Tacuru	5178
50	5007976	Taquarussu	5179
50	5008008	Terenos	5180
50	5008305	Três Lagoas	5181
50	5008404	Vicentina	5182
51	5100102	Acorizal	5183
51	5100201	Água Boa	5184
51	5100250	Alta Floresta	5185
51	5100300	Alto Araguaia	5186
51	5100359	Alto Boa Vista	5187
51	5100409	Alto Garças	5188
51	5100508	Alto Paraguai	5189
51	5100607	Alto Taquari	5190
51	5100805	Apiacás	5191
51	5101001	Araguaiana	5192
51	5101209	Araguainha	5193
51	5101258	Araputanga	5194
51	5101308	Arenápolis	5195
51	5101407	Aripuanã	5196
51	5101605	Barão de Melgaço	5197
51	5101704	Barra do Bugres	5198
51	5101803	Barra do Garças	5199
51	5101852	Bom Jesus do Araguaia	5200
51	5101902	Brasnorte	5201
51	5102504	Cáceres	5202
51	5102603	Campinápolis	5203
51	5102637	Campo Novo do Parecis	5204
51	5102678	Campo Verde	5205
51	5102686	Campos de Júlio	5206
51	5102694	Canabrava do Norte	5207
51	5102702	Canarana	5208
51	5102793	Carlinda	5209
51	5102850	Castanheira	5210
51	5103007	Chapada dos Guimarães	5211
51	5103056	Cláudia	5212
51	5103106	Cocalinho	5213
51	5103205	Colíder	5214
51	5103254	Colniza	5215
51	5103304	Comodoro	5216
51	5103353	Confresa	5217
51	5103361	Conquista D'oeste	5218
51	5103379	Cotriguaçu	5219
51	5103403	Cuiabá	5220
51	5103437	Curvelândia	5221
51	5103452	denise	5222
51	5103502	Diamantino	5223
51	5103601	dom Aquino	5224
51	5103700	Feliz Natal	5225
51	5103809	Figueirópolis D'oeste	5226
51	5103858	Gaúcha do Norte	5227
51	5103908	General Carneiro	5228
51	5103957	Glória D'oeste	5229
51	5104104	Guarantã do Norte	5230
51	5104203	Guiratinga	5231
51	5104500	Indiavaí	5232
51	5104526	Ipiranga do Norte	5233
51	5104542	Itanhangá	5234
51	5104559	Itaúba	5235
51	5104609	Itiquira	5236
51	5104807	Jaciara	5237
51	5104906	Jangada	5238
51	5105002	Jauru	5239
51	5105101	Juara	5240
51	5105150	Juína	5241
51	5105176	Juruena	5242
51	5105200	Juscimeira	5243
51	5105234	Lambari D'oeste	5244
51	5105259	Lucas do Rio Verde	5245
51	5105309	Luciara	5246
51	5105507	Vila Bela da Santíssima Trindade	5247
51	5105580	Marcelândia	5248
51	5105606	Matupá	5249
51	5105622	Mirassol D'oeste	5250
51	5105903	Nobres	5251
51	5106000	Nortelândia	5252
51	5106109	Nossa Senhora do Livramento	5253
51	5106158	Nova Bandeirantes	5254
51	5106174	Nova Nazaré	5255
51	5106182	Nova Lacerda	5256
51	5106190	Nova Santa Helena	5257
51	5106208	Nova Brasilândia	5258
51	5106216	Nova Canaã do Norte	5259
51	5106224	Nova Mutum	5260
51	5106232	Nova Olímpia	5261
51	5106240	Nova Ubiratã	5262
51	5106257	Nova Xavantina	5263
51	5106265	Novo Mundo	5264
51	5106273	Novo Horizonte do Norte	5265
51	5106281	Novo São Joaquim	5266
51	5106299	Paranaíta	5267
51	5106307	Paranatinga	5268
51	5106315	Novo Santo Antônio	5269
51	5106372	Pedra Preta	5270
51	5106422	Peixoto de Azevedo	5271
51	5106455	Planalto da Serra	5272
51	5106505	Poconé	5273
51	5106653	Pontal do Araguaia	5274
51	5106703	Ponte Branca	5275
51	5106752	Pontes E Lacerda	5276
51	5106778	Porto Alegre do Norte	5277
51	5106802	Porto dos Gaúchos	5278
51	5106828	Porto Esperidião	5279
51	5106851	Porto Estrela	5280
51	5107008	Poxoréu	5281
51	5107040	Primavera do Leste	5282
51	5107065	Querência	5283
51	5107107	São José dos Quatro Marcos	5284
51	5107156	Reserva do Cabaçal	5285
51	5107180	Ribeirão Cascalheira	5286
51	5107198	Ribeirãozinho	5287
51	5107206	Rio Branco	5288
51	5107248	Santa Carmem	5289
51	5107263	Santo Afonso	5290
51	5107297	São José do Povo	5291
51	5107305	São José do Rio Claro	5292
51	5107354	São José do Xingu	5293
51	5107404	São Pedro da Cipa	5294
51	5107578	Rondolândia	5295
51	5107602	Rondonópolis	5296
51	5107701	Rosário Oeste	5297
51	5107743	Santa Cruz do Xingu	5298
51	5107750	Salto do Céu	5299
51	5107768	Santa Rita do Trivelato	5300
51	5107776	Santa Terezinha	5301
51	5107792	Santo Antônio do Leste	5302
51	5107800	Santo Antônio do Leverger	5303
51	5107859	São Félix do Araguaia	5304
51	5107875	Sapezal	5305
51	5107883	Serra Nova dourada	5306
51	5107909	Sinop	5307
51	5107925	Sorriso	5308
51	5107941	Tabaporã	5309
51	5107958	Tangará da Serra	5310
51	5108006	Tapurah	5311
51	5108055	Terra Nova do Norte	5312
51	5108105	Tesouro	5313
51	5108204	Torixoréu	5314
51	5108303	União do Sul	5315
51	5108352	Vale de São domingos	5316
51	5108402	Várzea Grande	5317
51	5108501	Vera	5318
51	5108600	Vila Rica	5319
51	5108808	Nova Guarita	5320
51	5108857	Nova Marilândia	5321
51	5108907	Nova Maringá	5322
51	5108956	Nova Monte Verde	5323
52	5200050	Abadia de Goiás	5324
52	5200100	Abadiânia	5325
52	5200134	Acreúna	5326
52	5200159	Adelândia	5327
52	5200175	Água Fria de Goiás	5328
52	5200209	Água Limpa	5329
52	5200258	Águas Lindas de Goiás	5330
52	5200308	Alexânia	5331
52	5200506	Aloândia	5332
52	5200555	Alto Horizonte	5333
52	5200605	Alto Paraíso de Goiás	5334
52	5200803	Alvorada do Norte	5335
52	5200829	Amaralina	5336
52	5200852	Americano do Brasil	5337
52	5200902	Amorinópolis	5338
52	5201108	Anápolis	5339
52	5201207	Anhanguera	5340
52	5201306	Anicuns	5341
52	5201405	Aparecida de Goiânia	5342
52	5201454	Aparecida do Rio doce	5343
52	5201504	Aporé	5344
52	5201603	Araçu	5345
52	5201702	Aragarças	5346
52	5201801	Aragoiânia	5347
52	5202155	Araguapaz	5348
52	5202353	Arenópolis	5349
52	5202502	Aruanã	5350
52	5202601	Aurilândia	5351
52	5202809	Avelinópolis	5352
52	5203104	Baliza	5353
52	5203203	Barro Alto	5354
52	5203302	Bela Vista de Goiás	5355
52	5203401	Bom Jardim de Goiás	5356
52	5203500	Bom Jesus de Goiás	5357
52	5203559	Bonfinópolis	5358
52	5203575	Bonópolis	5359
52	5203609	Brazabrantes	5360
52	5203807	Britânia	5361
52	5203906	Buriti Alegre	5362
52	5203939	Buriti de Goiás	5363
52	5203962	Buritinópolis	5364
52	5204003	Cabeceiras	5365
52	5204102	Cachoeira Alta	5366
52	5204201	Cachoeira de Goiás	5367
52	5204250	Cachoeira dourada	5368
52	5204300	Caçu	5369
52	5204409	Caiapônia	5370
52	5204508	Caldas Novas	5371
52	5204557	Caldazinha	5372
52	5204607	Campestre de Goiás	5373
52	5204656	Campinaçu	5374
52	5204706	Campinorte	5375
52	5204805	Campo Alegre de Goiás	5376
52	5204854	Campo Limpo de Goiás	5377
52	5204904	Campos Belos	5378
52	5204953	Campos Verdes	5379
52	5205000	Carmo do Rio Verde	5380
52	5205059	Castelândia	5381
52	5205109	Catalão	5382
52	5205208	Caturaí	5383
52	5205307	Cavalcante	5384
52	5205406	Ceres	5385
52	5205455	Cezarina	5386
52	5205471	Chapadão do Céu	5387
52	5205497	Cidade Ocidental	5388
52	5205513	Cocalzinho de Goiás	5389
52	5205521	Colinas do Sul	5390
52	5205703	Córrego do Ouro	5391
52	5205802	Corumbá de Goiás	5392
52	5205901	Corumbaíba	5393
52	5206206	Cristalina	5394
52	5206305	Cristianópolis	5395
52	5206404	Crixás	5396
52	5206503	Cromínia	5397
52	5206602	Cumari	5398
52	5206701	damianópolis	5399
52	5206800	damolândia	5400
52	5206909	davinópolis	5401
52	5207105	Diorama	5402
52	5207253	doverlândia	5403
52	5207352	Edealina	5404
52	5207402	Edéia	5405
52	5207501	Estrela do Norte	5406
52	5207535	Faina	5407
52	5207600	Fazenda Nova	5408
52	5207808	Firminópolis	5409
52	5207907	Flores de Goiás	5410
52	5208004	Formosa	5411
52	5208103	Formoso	5412
52	5208152	Gameleira de Goiás	5413
52	5208301	Divinópolis de Goiás	5414
52	5208400	Goianápolis	5415
52	5208509	Goiandira	5416
52	5208608	Goianésia	5417
52	5208707	Goiânia	5418
52	5208806	Goianira	5419
52	5208905	Goiás	5420
52	5209101	Goiatuba	5421
52	5209150	Gouvelândia	5422
52	5209200	Guapó	5423
52	5209291	Guaraíta	5424
52	5209408	Guarani de Goiás	5425
52	5209457	Guarinos	5426
52	5209606	Heitoraí	5427
52	5209705	Hidrolândia	5428
52	5209804	Hidrolina	5429
52	5209903	Iaciara	5430
52	5209937	Inaciolândia	5431
52	5209952	Indiara	5432
52	5210000	Inhumas	5433
52	5210109	Ipameri	5434
52	5210158	Ipiranga de Goiás	5435
52	5210208	Iporá	5436
52	5210307	Israelândia	5437
52	5210406	Itaberaí	5438
52	5210562	Itaguari	5439
52	5210604	Itaguaru	5440
52	5210802	Itajá	5441
52	5210901	Itapaci	5442
52	5211008	Itapirapuã	5443
52	5211206	Itapuranga	5444
52	5211305	Itarumã	5445
52	5211404	Itauçu	5446
52	5211503	Itumbiara	5447
52	5211602	Ivolândia	5448
52	5211701	Jandaia	5449
52	5211800	Jaraguá	5450
52	5211909	Jataí	5451
52	5212006	Jaupaci	5452
52	5212055	Jesúpolis	5453
52	5212105	Joviânia	5454
52	5212204	Jussara	5455
52	5212253	Lagoa Santa	5456
52	5212303	Leopoldo de Bulhões	5457
52	5212501	Luziânia	5458
52	5212600	Mairipotaba	5459
52	5212709	Mambaí	5460
52	5212808	Mara Rosa	5461
52	5212907	Marzagão	5462
52	5212956	Matrinchã	5463
52	5213004	Maurilândia	5464
52	5213053	Mimoso de Goiás	5465
52	5213087	Minaçu	5466
52	5213103	Mineiros	5467
52	5213400	Moiporá	5468
52	5213509	Monte Alegre de Goiás	5469
52	5213707	Montes Claros de Goiás	5470
52	5213756	Montividiu	5471
52	5213772	Montividiu do Norte	5472
52	5213806	Morrinhos	5473
52	5213855	Morro Agudo de Goiás	5474
52	5213905	Mossâmedes	5475
52	5214002	Mozarlândia	5476
52	5214051	Mundo Novo	5477
52	5214101	Mutunópolis	5478
52	5214408	Nazário	5479
52	5214507	Nerópolis	5480
52	5214606	Niquelândia	5481
52	5214705	Nova América	5482
52	5214804	Nova Aurora	5483
52	5214838	Nova Crixás	5484
52	5214861	Nova Glória	5485
52	5214879	Nova Iguaçu de Goiás	5486
52	5214903	Nova Roma	5487
52	5215009	Nova Veneza	5488
52	5215207	Novo Brasil	5489
52	5215231	Novo Gama	5490
52	5215256	Novo Planalto	5491
52	5215306	Orizona	5492
52	5215405	Ouro Verde de Goiás	5493
52	5215504	Ouvidor	5494
52	5215603	Padre Bernardo	5495
52	5215652	Palestina de Goiás	5496
52	5215702	Palmeiras de Goiás	5497
52	5215801	Palmelo	5498
52	5215900	Palminópolis	5499
52	5216007	Panamá	5500
52	5216304	Paranaiguara	5501
52	5216403	Paraúna	5502
52	5216452	Perolândia	5503
52	5216809	Petrolina de Goiás	5504
52	5216908	Pilar de Goiás	5505
52	5217104	Piracanjuba	5506
52	5217203	Piranhas	5507
52	5217302	Pirenópolis	5508
52	5217401	Pires do Rio	5509
52	5217609	Planaltina	5510
52	5217708	Pontalina	5511
52	5218003	Porangatu	5512
52	5218052	Porteirão	5513
52	5218102	Portelândia	5514
52	5218300	Posse	5515
52	5218391	Professor Jamil	5516
52	5218508	Quirinópolis	5517
52	5218607	Rialma	5518
52	5218706	Rianápolis	5519
52	5218789	Rio Quente	5520
52	5218805	Rio Verde	5521
52	5218904	Rubiataba	5522
52	5219001	Sanclerlândia	5523
52	5219100	Santa Bárbara de Goiás	5524
52	5219209	Santa Cruz de Goiás	5525
52	5219258	Santa Fé de Goiás	5526
52	5219308	Santa Helena de Goiás	5527
52	5219357	Santa Isabel	5528
52	5219407	Santa Rita do Araguaia	5529
52	5219456	Santa Rita do Novo destino	5530
52	5219506	Santa Rosa de Goiás	5531
52	5219605	Santa Tereza de Goiás	5532
52	5219704	Santa Terezinha de Goiás	5533
52	5219712	Santo Antônio da Barra	5534
52	5219738	Santo Antônio de Goiás	5535
52	5219753	Santo Antônio do descoberto	5536
52	5219803	São domingos	5537
52	5219902	São Francisco de Goiás	5538
52	5220009	São João D'aliança	5539
52	5220058	São João da Paraúna	5540
52	5220108	São Luís de Montes Belos	5541
52	5220157	São Luíz do Norte	5542
52	5220207	São Miguel do Araguaia	5543
52	5220264	São Miguel do Passa Quatro	5544
52	5220280	São Patrício	5545
52	5220405	São Simão	5546
52	5220454	Senador Canedo	5547
52	5220504	Serranópolis	5548
52	5220603	Silvânia	5549
52	5220686	Simolândia	5550
52	5220702	Sítio D'abadia	5551
52	5221007	Taquaral de Goiás	5552
52	5221080	Teresina de Goiás	5553
52	5221197	Terezópolis de Goiás	5554
52	5221304	Três Ranchos	5555
52	5221403	Trindade	5556
52	5221452	Trombas	5557
52	5221502	Turvânia	5558
52	5221551	Turvelândia	5559
52	5221577	Uirapuru	5560
52	5221601	Uruaçu	5561
52	5221700	Uruana	5562
52	5221809	Urutaí	5563
52	5221858	Valparaíso de Goiás	5564
52	5221908	Varjão	5565
52	5222005	Vianópolis	5566
52	5222054	Vicentinópolis	5567
52	5222203	Vila Boa	5568
52	5222302	Vila Propício	5569
53	5300108	Brasília	5570
\.


--
-- Data for Name: procedimentos; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.procedimentos (procedimento_id, membro_id, procedimento_no, unidade, procedimento_tipo, crime, data) FROM stdin;
\.


--
-- Data for Name: processos; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.processos (processo_id, membro_id, acao_penal_no, vara, situaco_juridica, regime, situacao_reu) FROM stdin;
\.


--
-- Data for Name: relacionamentos_membros; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.relacionamentos_membros (id, membro_01_id, membro_02_) FROM stdin;
\.


--
-- Data for Name: tipos_usuarios; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.tipos_usuarios (tipo_usuario_id, descricao, nivel) FROM stdin;
1	Administrador	1
2	Desenvolvedor	2
3	Gestor	3
4	Analista	4
5	Visualizador	5
6	Operacional	6
7	Simples	7
8	Básico	9
9	Fez o cadastro	9
\.


--
-- Data for Name: usuarios; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.usuarios (created_at, nome_completo, email, user_id, usuario_id, foto_path, descricao, acesso_at, tipo_usuario_id, agencia_id) FROM stdin;
2024-11-05 11:33:13.660173+00	Djalma Ferreira Torquato	djalmatorquato@hotmail.com	65ef475c-beff-46a3-b81b-ad117a5e0be9	15	https://lwbmyeixfxysrddcvnjo.supabase.co/storage/v1/object/public/uploads/usuarios/1730891892781000.png	O melhor camisa 10 da SSPAL.	2024-11-06 08:18:14.206+00	1	4
2024-11-05 13:26:12.92738+00	Genival Junior	genival.silva@seds.al.gov.br	8642fe0a-1c60-4873-a874-d91409a11165	16	https://lwbmyeixfxysrddcvnjo.supabase.co/storage/v1/object/public/uploads/usuarios/1730891910130000.png	Juninho	2024-11-06 08:18:31.44+00	2	4
2024-10-07 19:59:23.576395+00	Grazielly Nunes da Silva	grazielly_nunes@hotmail.com	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	4	https://lwbmyeixfxysrddcvnjo.supabase.co/storage/v1/object/public/uploads/usuarios/1729781044151000.png	Super Nerdinha	2024-10-24 11:44:05.941+00	2	4
2024-09-26 18:06:53.014691+00	Carlos Roberto	tenroberto2011@gmail.com	15e35919-cc42-42b9-b291-6fae96a073bf	1	https://lwbmyeixfxysrddcvnjo.supabase.co/storage/v1/object/public/uploads/usuarios/1730892113974000.png	Estudante de PhD em Porto Rico (EUA)	2024-11-06 08:21:55.169+00	2	4
2024-11-04 13:36:32.77951+00	Danilo	danilorlsa@gmail.com	aaf972d2-3bfa-48b1-822c-208e4c12ac44	14	https://lwbmyeixfxysrddcvnjo.supabase.co/storage/v1/object/public/uploads/usuarios/1730891972893000.png	Soneca	2024-11-06 15:11:48.731+00	1	4
2024-11-06 18:06:21.006079+00	Carlos Roberto	carlos.roberto.ti.dr@gmail.com	fe8199d7-c809-4d51-896f-75626d52f935	17	https://lwbmyeixfxysrddcvnjo.supabase.co/storage/v1/object/public/uploads/usuarios/1730988303809000.png		2024-11-07 11:05:05.666+00	9	26
2024-12-12 13:20:11.867808+00	Thais Lima	thaislima.mcz@hotmail.com	1073b901-a06e-4f42-b5d3-d2359047b2cf	18	https://storage.googleapis.com/flutterflow-io-6f20.appspot.com/projects/mondaha-be2293/assets/wvfh9ab6exyb/botao-redondo-da-conta-com-o-usuario-dentro.png	\N	2024-12-12 13:20:11.867808+00	9	26
\.


--
-- Data for Name: vara; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.vara (vara_id, created_at, nome, descricao, estado_id, municipio_id) FROM stdin;
\.


--
-- Data for Name: wappler_migrations; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.wappler_migrations (id, name, batch, migration_time) FROM stdin;
\.


--
-- Data for Name: wappler_migrations_lock; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.wappler_migrations_lock (index, is_locked) FROM stdin;
1	0
\.


--
-- Data for Name: messages_2024_11_17; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.messages_2024_11_17 (topic, extension, payload, event, private, updated_at, inserted_at, id) FROM stdin;
\.


--
-- Data for Name: messages_2024_11_18; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.messages_2024_11_18 (topic, extension, payload, event, private, updated_at, inserted_at, id) FROM stdin;
\.


--
-- Data for Name: messages_2024_11_19; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.messages_2024_11_19 (topic, extension, payload, event, private, updated_at, inserted_at, id) FROM stdin;
\.


--
-- Data for Name: messages_2024_11_20; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.messages_2024_11_20 (topic, extension, payload, event, private, updated_at, inserted_at, id) FROM stdin;
\.


--
-- Data for Name: messages_2024_11_21; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.messages_2024_11_21 (topic, extension, payload, event, private, updated_at, inserted_at, id) FROM stdin;
\.


--
-- Data for Name: messages_2024_11_22; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.messages_2024_11_22 (topic, extension, payload, event, private, updated_at, inserted_at, id) FROM stdin;
\.


--
-- Data for Name: messages_2024_11_24; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.messages_2024_11_24 (topic, extension, payload, event, private, updated_at, inserted_at, id) FROM stdin;
\.


--
-- Data for Name: messages_2024_11_25; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.messages_2024_11_25 (topic, extension, payload, event, private, updated_at, inserted_at, id) FROM stdin;
\.


--
-- Data for Name: messages_2024_11_26; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.messages_2024_11_26 (topic, extension, payload, event, private, updated_at, inserted_at, id) FROM stdin;
\.


--
-- Data for Name: messages_2024_11_27; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.messages_2024_11_27 (topic, extension, payload, event, private, updated_at, inserted_at, id) FROM stdin;
\.


--
-- Data for Name: messages_2024_11_28; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.messages_2024_11_28 (topic, extension, payload, event, private, updated_at, inserted_at, id) FROM stdin;
\.


--
-- Data for Name: messages_2024_11_29; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.messages_2024_11_29 (topic, extension, payload, event, private, updated_at, inserted_at, id) FROM stdin;
\.


--
-- Data for Name: messages_2024_12_01; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.messages_2024_12_01 (topic, extension, payload, event, private, updated_at, inserted_at, id) FROM stdin;
\.


--
-- Data for Name: messages_2024_12_02; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.messages_2024_12_02 (topic, extension, payload, event, private, updated_at, inserted_at, id) FROM stdin;
\.


--
-- Data for Name: messages_2024_12_03; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.messages_2024_12_03 (topic, extension, payload, event, private, updated_at, inserted_at, id) FROM stdin;
\.


--
-- Data for Name: messages_2024_12_04; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.messages_2024_12_04 (topic, extension, payload, event, private, updated_at, inserted_at, id) FROM stdin;
\.


--
-- Data for Name: messages_2024_12_05; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.messages_2024_12_05 (topic, extension, payload, event, private, updated_at, inserted_at, id) FROM stdin;
\.


--
-- Data for Name: messages_2024_12_06; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.messages_2024_12_06 (topic, extension, payload, event, private, updated_at, inserted_at, id) FROM stdin;
\.


--
-- Data for Name: messages_2024_12_07; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.messages_2024_12_07 (topic, extension, payload, event, private, updated_at, inserted_at, id) FROM stdin;
\.


--
-- Data for Name: messages_2024_12_11; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.messages_2024_12_11 (topic, extension, payload, event, private, updated_at, inserted_at, id) FROM stdin;
\.


--
-- Data for Name: messages_2024_12_12; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.messages_2024_12_12 (topic, extension, payload, event, private, updated_at, inserted_at, id) FROM stdin;
\.


--
-- Data for Name: messages_2024_12_13; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.messages_2024_12_13 (topic, extension, payload, event, private, updated_at, inserted_at, id) FROM stdin;
\.


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.schema_migrations (version, inserted_at) FROM stdin;
20211116024918	2024-09-19 16:31:39
20211116045059	2024-09-19 16:31:39
20211116050929	2024-09-19 16:31:39
20211116051442	2024-09-19 16:31:39
20211116212300	2024-09-19 16:31:39
20211116213355	2024-09-19 16:31:39
20211116213934	2024-09-19 16:31:39
20211116214523	2024-09-19 16:31:39
20211122062447	2024-09-19 16:31:39
20211124070109	2024-09-19 16:31:39
20211202204204	2024-09-19 16:31:39
20211202204605	2024-09-19 16:31:39
20211210212804	2024-09-19 16:31:39
20211228014915	2024-09-19 16:31:39
20220107221237	2024-09-19 16:31:39
20220228202821	2024-09-19 16:31:39
20220312004840	2024-09-19 16:31:39
20220603231003	2024-09-19 16:31:39
20220603232444	2024-09-19 16:31:39
20220615214548	2024-09-19 16:31:39
20220712093339	2024-09-19 16:31:39
20220908172859	2024-09-19 16:31:39
20220916233421	2024-09-19 16:31:39
20230119133233	2024-09-19 16:31:39
20230128025114	2024-09-19 16:31:39
20230128025212	2024-09-19 16:31:39
20230227211149	2024-09-19 16:31:39
20230228184745	2024-09-19 16:31:39
20230308225145	2024-09-19 16:31:39
20230328144023	2024-09-19 16:31:39
20231018144023	2024-09-19 16:31:39
20231204144023	2024-09-19 16:31:39
20231204144024	2024-09-19 16:31:39
20231204144025	2024-09-19 16:31:39
20240108234812	2024-09-19 16:31:40
20240109165339	2024-09-19 16:31:40
20240227174441	2024-09-19 16:31:40
20240311171622	2024-09-19 16:31:40
20240321100241	2024-09-19 16:31:40
20240401105812	2024-09-19 16:31:40
20240418121054	2024-09-19 16:31:40
20240523004032	2024-09-19 16:31:40
20240618124746	2024-09-19 16:31:40
20240801235015	2024-09-19 16:31:40
20240805133720	2024-09-19 16:31:40
20240827160934	2024-09-19 16:31:40
20240919163303	2024-11-11 11:38:03
20240919163305	2024-11-11 11:38:03
20241019105805	2024-11-11 11:38:03
20241030150047	2024-11-18 20:11:09
20241108114728	2024-11-18 20:11:09
20241121104152	2024-11-25 11:15:54
20241130184212	2024-12-02 12:44:38
\.


--
-- Data for Name: subscription; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.subscription (id, subscription_id, entity, filters, claims, created_at) FROM stdin;
\.


--
-- Data for Name: buckets; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.buckets (id, name, owner, created_at, updated_at, public, avif_autodetection, file_size_limit, allowed_mime_types, owner_id) FROM stdin;
uploads	uploads	\N	2024-09-26 21:43:21.295805+00	2024-09-26 21:43:21.295805+00	t	f	\N	\N	\N
\.


--
-- Data for Name: migrations; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.migrations (id, name, hash, executed_at) FROM stdin;
0	create-migrations-table	e18db593bcde2aca2a408c4d1100f6abba2195df	2024-09-19 16:30:22.700668
1	initialmigration	6ab16121fbaa08bbd11b712d05f358f9b555d777	2024-09-19 16:30:22.768294
2	storage-schema	5c7968fd083fcea04050c1b7f6253c9771b99011	2024-09-19 16:30:22.819707
3	pathtoken-column	2cb1b0004b817b29d5b0a971af16bafeede4b70d	2024-09-19 16:30:22.900184
4	add-migrations-rls	427c5b63fe1c5937495d9c635c263ee7a5905058	2024-09-19 16:30:22.988838
5	add-size-functions	79e081a1455b63666c1294a440f8ad4b1e6a7f84	2024-09-19 16:30:23.043692
6	change-column-name-in-get-size	f93f62afdf6613ee5e7e815b30d02dc990201044	2024-09-19 16:30:23.098084
7	add-rls-to-buckets	e7e7f86adbc51049f341dfe8d30256c1abca17aa	2024-09-19 16:30:23.10768
8	add-public-to-buckets	fd670db39ed65f9d08b01db09d6202503ca2bab3	2024-09-19 16:30:23.116483
9	fix-search-function	3a0af29f42e35a4d101c259ed955b67e1bee6825	2024-09-19 16:30:23.171929
10	search-files-search-function	68dc14822daad0ffac3746a502234f486182ef6e	2024-09-19 16:30:23.229832
11	add-trigger-to-auto-update-updated_at-column	7425bdb14366d1739fa8a18c83100636d74dcaa2	2024-09-19 16:30:23.284651
12	add-automatic-avif-detection-flag	8e92e1266eb29518b6a4c5313ab8f29dd0d08df9	2024-09-19 16:30:23.352156
13	add-bucket-custom-limits	cce962054138135cd9a8c4bcd531598684b25e7d	2024-09-19 16:30:23.365348
14	use-bytes-for-max-size	941c41b346f9802b411f06f30e972ad4744dad27	2024-09-19 16:30:23.37661
15	add-can-insert-object-function	934146bc38ead475f4ef4b555c524ee5d66799e5	2024-09-19 16:30:23.414029
16	add-version	76debf38d3fd07dcfc747ca49096457d95b1221b	2024-09-19 16:30:23.467968
17	drop-owner-foreign-key	f1cbb288f1b7a4c1eb8c38504b80ae2a0153d101	2024-09-19 16:30:23.528862
18	add_owner_id_column_deprecate_owner	e7a511b379110b08e2f214be852c35414749fe66	2024-09-19 16:30:23.58353
19	alter-default-value-objects-id	02e5e22a78626187e00d173dc45f58fa66a4f043	2024-09-19 16:30:23.60686
20	list-objects-with-delimiter	cd694ae708e51ba82bf012bba00caf4f3b6393b7	2024-09-19 16:30:23.660615
21	s3-multipart-uploads	8c804d4a566c40cd1e4cc5b3725a664a9303657f	2024-09-19 16:30:23.720056
22	s3-multipart-uploads-big-ints	9737dc258d2397953c9953d9b86920b8be0cdb73	2024-09-19 16:30:23.823332
23	optimize-search-function	9d7e604cddc4b56a5422dc68c9313f4a1b6f132c	2024-09-19 16:30:23.901215
24	operation-function	8312e37c2bf9e76bbe841aa5fda889206d2bf8aa	2024-09-19 16:30:23.95553
25	custom-metadata	67eb93b7e8d401cafcdc97f9ac779e71a79bfe03	2024-09-19 16:30:24.018699
\.


--
-- Data for Name: objects; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.objects (id, bucket_id, name, owner, created_at, updated_at, last_accessed_at, metadata, version, owner_id, user_metadata) FROM stdin;
7a276055-0d0e-4ce2-8ea9-14aeac33360e	uploads	membros/1729518129934000_0.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:42:11.062809+00	2024-10-21 13:42:11.062809+00	2024-10-21 13:42:11.062809+00	{"eTag": "\\"4ba727ceb337963e7fa9956c8aa24192\\"", "size": 15611, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:42:11.000Z", "contentLength": 15611, "httpStatusCode": 200}	5219387c-225d-47a3-a7ed-6a9c21157644	15e35919-cc42-42b9-b291-6fae96a073bf	{}
d2699fcc-0c6a-46b9-8407-5503614994c9	uploads	membros/1729544635859000_3.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 21:03:59.885029+00	2024-10-21 21:03:59.885029+00	2024-10-21 21:03:59.885029+00	{"eTag": "\\"5df5cdb3d9b1070001bb9386e3ba5856\\"", "size": 15230, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T21:04:00.000Z", "contentLength": 15230, "httpStatusCode": 200}	a654ca5d-70fb-4dd8-9934-23c3a4286610	15e35919-cc42-42b9-b291-6fae96a073bf	{}
a7100661-46a4-4e06-8f5b-010617c66ae4	uploads	membros/1729519110066000_0.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:58:30.987592+00	2024-10-21 13:58:30.987592+00	2024-10-21 13:58:30.987592+00	{"eTag": "\\"4ba727ceb337963e7fa9956c8aa24192\\"", "size": 15611, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:58:31.000Z", "contentLength": 15611, "httpStatusCode": 200}	772dcd89-5d9e-4c57-9652-e80d8eb6290c	15e35919-cc42-42b9-b291-6fae96a073bf	{}
e0a397da-9d96-4b46-850d-ac9421188e1f	uploads	usuarios/.emptyFolderPlaceholder	\N	2024-09-26 21:44:11.020094+00	2024-09-26 21:44:11.020094+00	2024-09-26 21:44:11.020094+00	{"eTag": "\\"d41d8cd98f00b204e9800998ecf8427e\\"", "size": 0, "mimetype": "application/octet-stream", "cacheControl": "max-age=3600", "lastModified": "2024-09-26T21:44:11.000Z", "contentLength": 0, "httpStatusCode": 200}	8fd016b0-febb-47f0-be2c-9fbcce5acc59	\N	{}
b54a4d17-f997-4a20-b66a-f7cac25700b7	uploads	faccoes/.emptyFolderPlaceholder	\N	2024-09-26 21:44:15.299973+00	2024-09-26 21:44:15.299973+00	2024-09-26 21:44:15.299973+00	{"eTag": "\\"d41d8cd98f00b204e9800998ecf8427e\\"", "size": 0, "mimetype": "application/octet-stream", "cacheControl": "max-age=3600", "lastModified": "2024-09-26T21:44:16.000Z", "contentLength": 0, "httpStatusCode": 200}	1bef764c-0a10-4e50-99e6-4c33e5ce4ea6	\N	{}
e7a44d5f-53cc-4bc4-8367-d762beed1cfc	uploads	membros/.emptyFolderPlaceholder	\N	2024-09-26 21:44:18.810401+00	2024-09-26 21:44:18.810401+00	2024-09-26 21:44:18.810401+00	{"eTag": "\\"d41d8cd98f00b204e9800998ecf8427e\\"", "size": 0, "mimetype": "application/octet-stream", "cacheControl": "max-age=3600", "lastModified": "2024-09-26T21:44:19.000Z", "contentLength": 0, "httpStatusCode": 200}	e5ebb616-56a3-488f-8ccc-152ea9207720	\N	{}
b18e31ef-b2a1-4b27-bd71-79bf33273536	uploads	usuarios/1727393572362000.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-09-26 23:32:53.149455+00	2024-09-26 23:32:53.149455+00	2024-09-26 23:32:53.149455+00	{"eTag": "\\"d98abf5e620026a6437d81ee5e6dbf95\\"", "size": 11134, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-09-26T23:32:54.000Z", "contentLength": 11134, "httpStatusCode": 200}	d230c2c1-ee2f-45c9-b819-4fda93595ce6	15e35919-cc42-42b9-b291-6fae96a073bf	{}
6c052411-474d-4403-993c-29dbf538f76b	uploads	usuarios/1727393661788000.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-09-26 23:34:23.272003+00	2024-09-26 23:34:23.272003+00	2024-09-26 23:34:23.272003+00	{"eTag": "\\"d98abf5e620026a6437d81ee5e6dbf95\\"", "size": 11134, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-09-26T23:34:24.000Z", "contentLength": 11134, "httpStatusCode": 200}	78c20439-1440-4846-9d0c-8bf510bdfdad	15e35919-cc42-42b9-b291-6fae96a073bf	{}
533faa63-2b16-4c32-b274-88d7e0aaf73a	uploads	faccoes/1728054328058000.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-04 15:05:29.103119+00	2024-10-04 15:05:29.103119+00	2024-10-04 15:05:29.103119+00	{"eTag": "\\"efef918041fbd8eece9b5c54ca3ba9a0\\"", "size": 4431, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-04T15:05:30.000Z", "contentLength": 4431, "httpStatusCode": 200}	9a10d4d2-91d4-4437-8acf-86588de9481f	15e35919-cc42-42b9-b291-6fae96a073bf	{}
bcc5491b-730f-4ed0-8796-b28e3772a57d	uploads	faccoes/1728218229633000.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-06 12:37:13.199989+00	2024-10-06 12:37:13.199989+00	2024-10-06 12:37:13.199989+00	{"eTag": "\\"e95b9d48b26906dfa87132f8bf3a95a1\\"", "size": 10191, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-06T12:37:14.000Z", "contentLength": 10191, "httpStatusCode": 200}	22095b4f-218e-4295-b988-2b26893fdf3e	15e35919-cc42-42b9-b291-6fae96a073bf	{}
5193bdf7-2147-4c34-963a-fcf5224728ac	uploads	faccoes/1728300822795000.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-07 11:33:43.754099+00	2024-10-07 11:33:43.754099+00	2024-10-07 11:33:43.754099+00	{"eTag": "\\"59965eec7eea15c4ff1eaa096556de21\\"", "size": 8543, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-07T11:33:44.000Z", "contentLength": 8543, "httpStatusCode": 200}	00475c4a-3697-4b75-9aed-9146c56ab560	15e35919-cc42-42b9-b291-6fae96a073bf	{}
46991936-c373-4ab7-8eb5-fe35bacbda98	uploads	faccoes/1728420845879000.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-08 20:54:07.032853+00	2024-10-08 20:54:07.032853+00	2024-10-08 20:54:07.032853+00	{"eTag": "\\"801a1c4652a09c32359f1bb5516773fc\\"", "size": 12660, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-08T20:54:07.000Z", "contentLength": 12660, "httpStatusCode": 200}	7cb2000a-65ae-4735-ba24-7105458607ef	15e35919-cc42-42b9-b291-6fae96a073bf	{}
85f9c5f3-4e4e-424b-ac22-75c35b76c9f4	uploads	faccoes/1728422162025000.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-08 21:16:03.232266+00	2024-10-08 21:16:03.232266+00	2024-10-08 21:16:03.232266+00	{"eTag": "\\"a5273e4a04f9dbb07b52f555de957dd8\\"", "size": 7701, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-08T21:16:04.000Z", "contentLength": 7701, "httpStatusCode": 200}	4bb50eb9-86ea-4f0a-8e92-864db01cf346	15e35919-cc42-42b9-b291-6fae96a073bf	{}
e0ed51c2-d237-44b6-a23c-d1c2048f2e6b	uploads	faccoes/1728466237227000.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-09 09:30:38.563391+00	2024-10-09 09:30:38.563391+00	2024-10-09 09:30:38.563391+00	{"eTag": "\\"7a6dbac46080aad1e17e81595ed8c431\\"", "size": 13805, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-09T09:30:39.000Z", "contentLength": 13805, "httpStatusCode": 200}	3097266c-99c3-4fd8-96d2-da9b8f8edd8e	15e35919-cc42-42b9-b291-6fae96a073bf	{}
a09ec47c-0fb4-4331-b4e7-32ec0f5233d7	uploads	faccoes/1728479476452000.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-09 13:11:17.54008+00	2024-10-09 13:11:17.54008+00	2024-10-09 13:11:17.54008+00	{"eTag": "\\"7a6dbac46080aad1e17e81595ed8c431\\"", "size": 13805, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-09T13:11:18.000Z", "contentLength": 13805, "httpStatusCode": 200}	3e71383c-f288-4650-aca4-e33bd27c85b1	15e35919-cc42-42b9-b291-6fae96a073bf	{}
71325006-293f-48af-830b-5ae2d2453ebf	uploads	faccoes/1728479682320000.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-09 13:14:43.456618+00	2024-10-09 13:14:43.456618+00	2024-10-09 13:14:43.456618+00	{"eTag": "\\"c5c7e10fd177aefea369b158f94a6c8e\\"", "size": 4702, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-09T13:14:44.000Z", "contentLength": 4702, "httpStatusCode": 200}	8e61cc66-a002-43e4-8d9f-ced831d88531	15e35919-cc42-42b9-b291-6fae96a073bf	{}
5c1672f8-6d68-4351-bae8-d793f123d0d0	uploads	usuarios/1730634781021000.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-11-03 11:53:08.18318+00	2024-11-03 11:53:08.18318+00	2024-11-03 11:53:08.18318+00	{"eTag": "\\"19d3afbbf441bfd34f9b421b689a94ad\\"", "size": 8921, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-11-03T11:53:09.000Z", "contentLength": 8921, "httpStatusCode": 200}	27ceb8de-160a-48ab-9b5f-90e05739446f	15e35919-cc42-42b9-b291-6fae96a073bf	{}
ebb71f4b-4878-444a-9982-7b0cb03239e2	uploads	faccoes/1728483831007000.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-09 14:23:52.200969+00	2024-10-09 14:23:52.200969+00	2024-10-09 14:23:52.200969+00	{"eTag": "\\"ca5bf4640cde36da80a8c4c4d061689f\\"", "size": 9918, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-09T14:23:52.000Z", "contentLength": 9918, "httpStatusCode": 200}	1910f86c-d304-49ae-b4fd-cca5ba179c7e	15e35919-cc42-42b9-b291-6fae96a073bf	{}
1d4f2578-8d96-4f26-9d05-db18b88466d9	uploads	membros/1729518129934000_2.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:42:10.976123+00	2024-10-21 13:42:10.976123+00	2024-10-21 13:42:10.976123+00	{"eTag": "\\"c4ebbcedcb2ac5d0414931eff0431f73\\"", "size": 10390, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:42:11.000Z", "contentLength": 10390, "httpStatusCode": 200}	8e69adcf-1da1-4b4a-9936-59855409646b	15e35919-cc42-42b9-b291-6fae96a073bf	{}
49bc4a6a-cf9f-437e-b235-eb9d95780078	uploads	faccoes/1728484687850000.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-09 14:38:08.759314+00	2024-10-09 14:38:08.759314+00	2024-10-09 14:38:08.759314+00	{"eTag": "\\"ca5bf4640cde36da80a8c4c4d061689f\\"", "size": 9918, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-09T14:38:09.000Z", "contentLength": 9918, "httpStatusCode": 200}	98d7f720-7fd6-474e-a397-38e005540ec9	15e35919-cc42-42b9-b291-6fae96a073bf	{}
4392418c-ede9-46a5-92f8-bfe362bed673	uploads	membros/1729544635859000_1.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 21:03:59.853253+00	2024-10-21 21:03:59.853253+00	2024-10-21 21:03:59.853253+00	{"eTag": "\\"771ae12c96b8e4470af8af20631d081b\\"", "size": 13054, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T21:04:00.000Z", "contentLength": 13054, "httpStatusCode": 200}	c666f624-2897-41ad-b800-434e5c55e1b0	15e35919-cc42-42b9-b291-6fae96a073bf	{}
32377534-08a4-41d0-a88e-43759308d38f	uploads	faccoes/1728485269956000.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-09 14:47:51.127133+00	2024-10-09 14:47:51.127133+00	2024-10-09 14:47:51.127133+00	{"eTag": "\\"6f581cafb7061089e8543cc67a2eeabe\\"", "size": 5577, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-09T14:47:52.000Z", "contentLength": 5577, "httpStatusCode": 200}	42a713b7-8b4f-4e17-81e1-0a5ee754f917	15e35919-cc42-42b9-b291-6fae96a073bf	{}
e72041a2-ec9c-4cf1-861a-dab0bcc04ec1	uploads	membros/1729519110066000_1.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:58:30.972482+00	2024-10-21 13:58:30.972482+00	2024-10-21 13:58:30.972482+00	{"eTag": "\\"8250dee2d5891eb6b38dc7cb679bf9d4\\"", "size": 18277, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:58:31.000Z", "contentLength": 18277, "httpStatusCode": 200}	5036336d-df23-4cdc-9403-e187213da1ba	15e35919-cc42-42b9-b291-6fae96a073bf	{}
9d4056fc-d980-4b72-9996-dd4294274007	uploads	faccoes/1728485791776000.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-09 14:56:32.712671+00	2024-10-09 14:56:32.712671+00	2024-10-09 14:56:32.712671+00	{"eTag": "\\"6f581cafb7061089e8543cc67a2eeabe\\"", "size": 5577, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-09T14:56:33.000Z", "contentLength": 5577, "httpStatusCode": 200}	7d157c66-7580-4a75-948a-072906afd560	15e35919-cc42-42b9-b291-6fae96a073bf	{}
013f031e-1899-45fc-b236-ecc4b46e6e20	uploads	faccoes/1728485924393000.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-09 14:58:45.333111+00	2024-10-09 14:58:45.333111+00	2024-10-09 14:58:45.333111+00	{"eTag": "\\"d9963a346546243349e3e27d718d6d13\\"", "size": 19752, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-09T14:58:46.000Z", "contentLength": 19752, "httpStatusCode": 200}	b4deae3c-a59d-4705-8d87-df9b109cf0b4	15e35919-cc42-42b9-b291-6fae96a073bf	{}
3f5743e1-6a53-404e-bafc-c26fe5d39149	uploads	membros/1729524302495000_2.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 15:25:03.655916+00	2024-10-21 15:25:03.655916+00	2024-10-21 15:25:03.655916+00	{"eTag": "\\"c4ebbcedcb2ac5d0414931eff0431f73\\"", "size": 10390, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T15:25:04.000Z", "contentLength": 10390, "httpStatusCode": 200}	f2c8741f-fb57-402f-9f3e-6dd4a19d0780	15e35919-cc42-42b9-b291-6fae96a073bf	{}
cd56f5b9-cd9d-4fa0-9078-1eefa04c9bf9	uploads	faccoes/1728486039651000.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-09 15:00:40.569709+00	2024-10-09 15:00:40.569709+00	2024-10-09 15:00:40.569709+00	{"eTag": "\\"44a8be413d49bac34a334734ebb3fa55\\"", "size": 6089, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-09T15:00:41.000Z", "contentLength": 6089, "httpStatusCode": 200}	b1240f71-57b0-4014-a236-98dcbde80a03	15e35919-cc42-42b9-b291-6fae96a073bf	{}
a5a7efc1-a50a-438c-91d2-2cb231adda3d	uploads	faccoes/1728486263351000.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-09 15:04:24.304534+00	2024-10-09 15:04:24.304534+00	2024-10-09 15:04:24.304534+00	{"eTag": "\\"6f581cafb7061089e8543cc67a2eeabe\\"", "size": 5577, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-09T15:04:25.000Z", "contentLength": 5577, "httpStatusCode": 200}	e66e16ac-d3ce-4b45-87a8-cca25c4795a6	15e35919-cc42-42b9-b291-6fae96a073bf	{}
15f23572-2e36-47a7-ad85-81f2cad7905b	uploads	membros/1729541394116000_2.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 20:09:58.706461+00	2024-10-21 20:09:58.706461+00	2024-10-21 20:09:58.706461+00	{"eTag": "\\"274bce446c278bd2ee46e98adfb03f7e\\"", "size": 9620, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T20:09:59.000Z", "contentLength": 9620, "httpStatusCode": 200}	525d6a11-10bf-4073-9601-c33bfc2a9c7b	15e35919-cc42-42b9-b291-6fae96a073bf	{}
b182f626-2f27-4068-bab8-173c706339b7	uploads	faccoes/1728486413983000.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-09 15:06:54.899657+00	2024-10-09 15:06:54.899657+00	2024-10-09 15:06:54.899657+00	{"eTag": "\\"6f581cafb7061089e8543cc67a2eeabe\\"", "size": 5577, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-09T15:06:55.000Z", "contentLength": 5577, "httpStatusCode": 200}	a0841926-cb53-48c5-ac51-75d924d33ab5	15e35919-cc42-42b9-b291-6fae96a073bf	{}
e44bf521-e828-4e0d-88db-8ef4810a3ad8	uploads	faccoes/1728486583445000.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-09 15:09:44.43622+00	2024-10-09 15:09:44.43622+00	2024-10-09 15:09:44.43622+00	{"eTag": "\\"6f581cafb7061089e8543cc67a2eeabe\\"", "size": 5577, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-09T15:09:45.000Z", "contentLength": 5577, "httpStatusCode": 200}	685cb60d-8fe3-4a26-9c8d-e1fe307603b5	15e35919-cc42-42b9-b291-6fae96a073bf	{}
b0cf3b3d-4721-49d3-8eb2-a7a2f2cb55f5	uploads	membros/1729518129934000_1.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:42:10.976216+00	2024-10-21 13:42:10.976216+00	2024-10-21 13:42:10.976216+00	{"eTag": "\\"8250dee2d5891eb6b38dc7cb679bf9d4\\"", "size": 18277, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:42:11.000Z", "contentLength": 18277, "httpStatusCode": 200}	a6e052be-3f38-41e3-994c-8bd13e28a619	15e35919-cc42-42b9-b291-6fae96a073bf	{}
7a6b7de1-8167-46ae-aa01-545c05c3c0df	uploads	membros/1729519837306000_1.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 14:10:38.088403+00	2024-10-21 14:10:38.088403+00	2024-10-21 14:10:38.088403+00	{"eTag": "\\"8250dee2d5891eb6b38dc7cb679bf9d4\\"", "size": 18277, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T14:10:38.000Z", "contentLength": 18277, "httpStatusCode": 200}	4650b81c-9352-4b07-995e-09c867ab62e6	15e35919-cc42-42b9-b291-6fae96a073bf	{}
0cfe8ddf-301f-4b93-b08e-1449495740fd	uploads	membros/1729519904603000_1.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 14:11:45.394901+00	2024-10-21 14:11:45.394901+00	2024-10-21 14:11:45.394901+00	{"eTag": "\\"8250dee2d5891eb6b38dc7cb679bf9d4\\"", "size": 18277, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T14:11:46.000Z", "contentLength": 18277, "httpStatusCode": 200}	b4499f98-eb5e-44ac-815d-176a222200c8	15e35919-cc42-42b9-b291-6fae96a073bf	{}
50ad88a3-e392-4a3d-87d7-1a18c1bf0f99	uploads	membros/1729544673890000_3.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 21:04:38.339127+00	2024-10-21 21:04:38.339127+00	2024-10-21 21:04:38.339127+00	{"eTag": "\\"5df5cdb3d9b1070001bb9386e3ba5856\\"", "size": 15230, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T21:04:39.000Z", "contentLength": 15230, "httpStatusCode": 200}	ca47ed28-423c-441a-ab96-e1cfc37cd0c9	15e35919-cc42-42b9-b291-6fae96a073bf	{}
51788f53-2d6b-4e52-b1cc-639f0f032fe9	uploads	membros/1729520026429000_1.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 14:13:47.261416+00	2024-10-21 14:13:47.261416+00	2024-10-21 14:13:47.261416+00	{"eTag": "\\"8250dee2d5891eb6b38dc7cb679bf9d4\\"", "size": 18277, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T14:13:48.000Z", "contentLength": 18277, "httpStatusCode": 200}	ebccf659-8411-47dd-ac00-a918e60335eb	15e35919-cc42-42b9-b291-6fae96a073bf	{}
be5c2607-2574-4155-bd54-059b9114782e	uploads	membros/1729545877644000_0.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 21:24:41.938597+00	2024-10-21 21:24:41.938597+00	2024-10-21 21:24:41.938597+00	{"eTag": "\\"94b57905ad1efac84a78ae68cb89d5e0\\"", "size": 15321, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T21:24:42.000Z", "contentLength": 15321, "httpStatusCode": 200}	54f6d4da-d925-47b3-80b4-2328589f138d	15e35919-cc42-42b9-b291-6fae96a073bf	{}
e059fc39-93af-4cc1-912b-a9c81ca1e091	uploads	membros/1729520057148000_2.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 14:14:18.08357+00	2024-10-21 14:14:18.08357+00	2024-10-21 14:14:18.08357+00	{"eTag": "\\"c4ebbcedcb2ac5d0414931eff0431f73\\"", "size": 10390, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T14:14:18.000Z", "contentLength": 10390, "httpStatusCode": 200}	ee2b0a6e-5c90-4f76-bd3f-b6569392736d	15e35919-cc42-42b9-b291-6fae96a073bf	{}
899971b7-9b71-46a8-8b66-235e54f1f547	uploads	usuarios/1729690354814000.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-23 13:32:35.895644+00	2024-10-23 13:32:35.895644+00	2024-10-23 13:32:35.895644+00	{"eTag": "\\"676d37433e90fdd4c52832356f2d569d\\"", "size": 30645, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-23T13:32:36.000Z", "contentLength": 30645, "httpStatusCode": 200}	50625dff-6d01-4a32-b320-c97199dfdc59	15e35919-cc42-42b9-b291-6fae96a073bf	{}
fc587e50-ef9b-4ee7-8ae5-26a0f9ceadc5	uploads	membros/1729520129027000_1.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 14:15:29.973836+00	2024-10-21 14:15:29.973836+00	2024-10-21 14:15:29.973836+00	{"eTag": "\\"8250dee2d5891eb6b38dc7cb679bf9d4\\"", "size": 18277, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T14:15:30.000Z", "contentLength": 18277, "httpStatusCode": 200}	00b5b33f-5aa6-4159-9429-70299d84a4cc	15e35919-cc42-42b9-b291-6fae96a073bf	{}
5417c5bf-58f3-4cb9-bd4d-ecd5916fac86	uploads	membros/1729524302495000_1.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 15:25:03.438201+00	2024-10-21 15:25:03.438201+00	2024-10-21 15:25:03.438201+00	{"eTag": "\\"8250dee2d5891eb6b38dc7cb679bf9d4\\"", "size": 18277, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T15:25:04.000Z", "contentLength": 18277, "httpStatusCode": 200}	9fc39b21-8407-4b1f-9513-195e85e1d581	15e35919-cc42-42b9-b291-6fae96a073bf	{}
1a12da22-ce0f-46e2-8a6a-19867016f76e	uploads	membros/1729541394116000_0.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 20:09:58.679668+00	2024-10-21 20:09:58.679668+00	2024-10-21 20:09:58.679668+00	{"eTag": "\\"94b57905ad1efac84a78ae68cb89d5e0\\"", "size": 15321, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T20:09:59.000Z", "contentLength": 15321, "httpStatusCode": 200}	a97af116-a03e-4a84-bbb2-db10990e6230	15e35919-cc42-42b9-b291-6fae96a073bf	{}
d5a35eb6-6516-4429-a97e-0f9351c061f1	uploads	membros/1729542335810000_2.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 20:25:40.318924+00	2024-10-21 20:25:40.318924+00	2024-10-21 20:25:40.318924+00	{"eTag": "\\"274bce446c278bd2ee46e98adfb03f7e\\"", "size": 9620, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T20:25:41.000Z", "contentLength": 9620, "httpStatusCode": 200}	0dc4c5da-570d-49a0-b080-c4b7b20de1a7	15e35919-cc42-42b9-b291-6fae96a073bf	{}
ed814ad6-8778-4b6d-bae5-300ffd78bb1e	uploads	membros/1729544405908000_3.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 21:00:10.216689+00	2024-10-21 21:00:10.216689+00	2024-10-21 21:00:10.216689+00	{"eTag": "\\"5df5cdb3d9b1070001bb9386e3ba5856\\"", "size": 15230, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T21:00:11.000Z", "contentLength": 15230, "httpStatusCode": 200}	838461a8-66b8-401b-b3ae-bfe32ba84bbf	15e35919-cc42-42b9-b291-6fae96a073bf	{}
7e2b30d5-6e9b-4258-b7a3-f6958465c811	uploads	membros/1729544405908000_1.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 21:00:14.212866+00	2024-10-21 21:00:14.212866+00	2024-10-21 21:00:14.212866+00	{"eTag": "\\"771ae12c96b8e4470af8af20631d081b\\"", "size": 13054, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T21:00:15.000Z", "contentLength": 13054, "httpStatusCode": 200}	cb0f07df-5841-48cb-abd5-cfb6a21f559b	15e35919-cc42-42b9-b291-6fae96a073bf	{}
38f38f19-63c2-4f72-b8b9-5139635eb163	uploads	membros/1729518129934000_3.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:42:10.936606+00	2024-10-21 13:42:10.936606+00	2024-10-21 13:42:10.936606+00	{"eTag": "\\"f02439823062d3c66e0dd51d0ca55b4c\\"", "size": 11217, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:42:11.000Z", "contentLength": 11217, "httpStatusCode": 200}	90ed9379-bd12-4e62-b58b-f8ec85d0c3fd	15e35919-cc42-42b9-b291-6fae96a073bf	{}
23a81dc2-703e-4040-aa57-e62560909274	uploads	membros/1729544635859000_0.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 21:04:00.309556+00	2024-10-21 21:04:00.309556+00	2024-10-21 21:04:00.309556+00	{"eTag": "\\"94b57905ad1efac84a78ae68cb89d5e0\\"", "size": 15321, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T21:04:01.000Z", "contentLength": 15321, "httpStatusCode": 200}	c806d753-2cd2-4a78-8a53-226c178712b9	15e35919-cc42-42b9-b291-6fae96a073bf	{}
1330949f-7043-47b6-b2ac-04354d98075c	uploads	membros/1729519837306000_3.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 14:10:38.355266+00	2024-10-21 14:10:38.355266+00	2024-10-21 14:10:38.355266+00	{"eTag": "\\"f02439823062d3c66e0dd51d0ca55b4c\\"", "size": 11217, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T14:10:39.000Z", "contentLength": 11217, "httpStatusCode": 200}	f16e1ece-edef-4263-8c18-774035580a1b	15e35919-cc42-42b9-b291-6fae96a073bf	{}
116971e8-39aa-4255-86b5-4b8ece50e42d	uploads	membros/1729545877644000_3.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 21:24:42.112353+00	2024-10-21 21:24:42.112353+00	2024-10-21 21:24:42.112353+00	{"eTag": "\\"5df5cdb3d9b1070001bb9386e3ba5856\\"", "size": 15230, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T21:24:43.000Z", "contentLength": 15230, "httpStatusCode": 200}	9e18bc03-744c-4a23-85a5-6f9a5976f760	15e35919-cc42-42b9-b291-6fae96a073bf	{}
5280c92b-4334-407f-a549-885cc22fa9f0	uploads	membros/1729519904603000_3.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 14:11:45.527851+00	2024-10-21 14:11:45.527851+00	2024-10-21 14:11:45.527851+00	{"eTag": "\\"f02439823062d3c66e0dd51d0ca55b4c\\"", "size": 11217, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T14:11:46.000Z", "contentLength": 11217, "httpStatusCode": 200}	809184e9-cc30-499d-8bb0-85e26f2ec7d8	15e35919-cc42-42b9-b291-6fae96a073bf	{}
1c033686-b812-464d-9dac-5a8079a4e924	uploads	membros/1729520057148000_3.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 14:14:18.091294+00	2024-10-21 14:14:18.091294+00	2024-10-21 14:14:18.091294+00	{"eTag": "\\"f02439823062d3c66e0dd51d0ca55b4c\\"", "size": 11217, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T14:14:19.000Z", "contentLength": 11217, "httpStatusCode": 200}	0b5458aa-b222-47fd-9a62-323484a49cba	15e35919-cc42-42b9-b291-6fae96a073bf	{}
9267f600-5a40-4fce-93e9-267fa193e98f	uploads	usuarios/1729690910490000.jpeg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-23 13:41:51.576646+00	2024-10-23 13:41:51.576646+00	2024-10-23 13:41:51.576646+00	{"eTag": "\\"9404b9706702747a7776cd864282395c\\"", "size": 74099, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-23T13:41:52.000Z", "contentLength": 74099, "httpStatusCode": 200}	83213143-d46b-4d45-84c2-fb2d60aac3ab	15e35919-cc42-42b9-b291-6fae96a073bf	{}
1945614d-55fd-489c-acea-9fdff3d7974c	uploads	membros/1729520129027000_0.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 14:15:29.969519+00	2024-10-21 14:15:29.969519+00	2024-10-21 14:15:29.969519+00	{"eTag": "\\"4ba727ceb337963e7fa9956c8aa24192\\"", "size": 15611, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T14:15:30.000Z", "contentLength": 15611, "httpStatusCode": 200}	bcb926ae-0a08-4e8e-afbd-5e99c9153cfa	15e35919-cc42-42b9-b291-6fae96a073bf	{}
4945d2e4-57ed-432c-830c-6d813dd37643	uploads	usuarios/1729708465605000.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-23 18:34:26.840703+00	2024-10-23 18:34:26.840703+00	2024-10-23 18:34:26.840703+00	{"eTag": "\\"4e11e36d222e4f897a6be8fea6a4a2c6\\"", "size": 71960, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-23T18:34:27.000Z", "contentLength": 71960, "httpStatusCode": 200}	62647def-7261-4c5c-974f-5499d693cb57	15e35919-cc42-42b9-b291-6fae96a073bf	{}
3189bdad-b400-491b-8846-895bf8059b4f	uploads	membros/1729539455518000_1.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 19:37:40.129729+00	2024-10-21 19:37:40.129729+00	2024-10-21 19:37:40.129729+00	{"eTag": "\\"b1c9ff54302e1bc4825c36343214e8b1\\"", "size": 23812, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T19:37:41.000Z", "contentLength": 23812, "httpStatusCode": 200}	dea26c63-6be5-483a-8400-52e2bd789efa	15e35919-cc42-42b9-b291-6fae96a073bf	{}
a6ad8357-6fcc-412f-ac29-714f922c8a71	uploads	membros/1729539562755000_1.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 19:39:27.2565+00	2024-10-21 19:39:27.2565+00	2024-10-21 19:39:27.2565+00	{"eTag": "\\"b1c9ff54302e1bc4825c36343214e8b1\\"", "size": 23812, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T19:39:28.000Z", "contentLength": 23812, "httpStatusCode": 200}	eebb57e6-7661-4888-a75b-474360b9eec8	15e35919-cc42-42b9-b291-6fae96a073bf	{}
1a37c834-7abd-4483-b27c-7c21d0845c61	uploads	membros/1729539623190000_1.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 19:40:27.704592+00	2024-10-21 19:40:27.704592+00	2024-10-21 19:40:27.704592+00	{"eTag": "\\"b1c9ff54302e1bc4825c36343214e8b1\\"", "size": 23812, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T19:40:28.000Z", "contentLength": 23812, "httpStatusCode": 200}	142632c5-a743-4583-9cc9-62a273afb177	15e35919-cc42-42b9-b291-6fae96a073bf	{}
ff7ed430-65db-4f3b-92e9-a9584bf85ebb	uploads	membros/1729541394116000_3.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 20:09:58.777826+00	2024-10-21 20:09:58.777826+00	2024-10-21 20:09:58.777826+00	{"eTag": "\\"5df5cdb3d9b1070001bb9386e3ba5856\\"", "size": 15230, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T20:09:59.000Z", "contentLength": 15230, "httpStatusCode": 200}	05de5a8e-747c-4506-88cb-9ada17fe9521	15e35919-cc42-42b9-b291-6fae96a073bf	{}
7db86f47-0882-4cb4-a2cc-6f32596a1415	uploads	membros/1729542786882000_0.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 20:33:11.429045+00	2024-10-21 20:33:11.429045+00	2024-10-21 20:33:11.429045+00	{"eTag": "\\"771ae12c96b8e4470af8af20631d081b\\"", "size": 13054, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T20:33:12.000Z", "contentLength": 13054, "httpStatusCode": 200}	d1fd397e-ebe3-4c9f-b394-9aa2d123b42e	15e35919-cc42-42b9-b291-6fae96a073bf	{}
b7cd3c95-fe80-4ff3-a530-86ecd7def1d0	uploads	membros/1729544635859000_2.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 21:04:00.357174+00	2024-10-21 21:04:00.357174+00	2024-10-21 21:04:00.357174+00	{"eTag": "\\"274bce446c278bd2ee46e98adfb03f7e\\"", "size": 9620, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T21:04:01.000Z", "contentLength": 9620, "httpStatusCode": 200}	3ea6c803-e05a-4129-96e1-a11673925d63	15e35919-cc42-42b9-b291-6fae96a073bf	{}
ca2e413c-b6ce-47da-8072-66ac38e13cf8	uploads	membros/1729518314986000_1.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:45:16.022805+00	2024-10-21 13:45:16.022805+00	2024-10-21 13:45:16.022805+00	{"eTag": "\\"8250dee2d5891eb6b38dc7cb679bf9d4\\"", "size": 18277, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:45:16.000Z", "contentLength": 18277, "httpStatusCode": 200}	8e718084-f2ac-4bdb-9b03-c013382a08c8	15e35919-cc42-42b9-b291-6fae96a073bf	{}
c32af21b-3caf-461f-8431-e9077640872f	uploads	membros/1729519837306000_2.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 14:10:38.273973+00	2024-10-21 14:10:38.273973+00	2024-10-21 14:10:38.273973+00	{"eTag": "\\"c4ebbcedcb2ac5d0414931eff0431f73\\"", "size": 10390, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T14:10:39.000Z", "contentLength": 10390, "httpStatusCode": 200}	a21cbbdf-5f04-405e-8598-d5070cf93f70	15e35919-cc42-42b9-b291-6fae96a073bf	{}
a188c6a0-37cf-4efa-a99f-bc884547867c	uploads	membros/1729544673890000_0.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 21:04:37.90283+00	2024-10-21 21:04:37.90283+00	2024-10-21 21:04:37.90283+00	{"eTag": "\\"94b57905ad1efac84a78ae68cb89d5e0\\"", "size": 15321, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T21:04:38.000Z", "contentLength": 15321, "httpStatusCode": 200}	20c8141e-941d-4482-a42e-d2590f340db5	15e35919-cc42-42b9-b291-6fae96a073bf	{}
9222ce57-e884-48fd-a170-b69a81cd47e1	uploads	membros/1729520026429000_3.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 14:13:47.50184+00	2024-10-21 14:13:47.50184+00	2024-10-21 14:13:47.50184+00	{"eTag": "\\"f02439823062d3c66e0dd51d0ca55b4c\\"", "size": 11217, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T14:13:48.000Z", "contentLength": 11217, "httpStatusCode": 200}	5fab288a-1c40-4ade-963a-9bb94d07fd32	15e35919-cc42-42b9-b291-6fae96a073bf	{}
df1c4ff3-97ff-40d5-bac8-7faf3477fd60	uploads	membros/1729520057148000_0.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 14:14:17.988669+00	2024-10-21 14:14:17.988669+00	2024-10-21 14:14:17.988669+00	{"eTag": "\\"4ba727ceb337963e7fa9956c8aa24192\\"", "size": 15611, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T14:14:18.000Z", "contentLength": 15611, "httpStatusCode": 200}	807e64ef-7a9c-4aa9-b734-ba6fb4bea9fd	15e35919-cc42-42b9-b291-6fae96a073bf	{}
c5190b54-8830-49d6-b884-833f23fffd5b	uploads	membros/1729515806157000_0.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:03:27.032995+00	2024-10-21 13:03:27.032995+00	2024-10-21 13:03:27.032995+00	{"eTag": "\\"4ba727ceb337963e7fa9956c8aa24192\\"", "size": 15611, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:03:27.000Z", "contentLength": 15611, "httpStatusCode": 200}	39f0878c-a67e-4f32-bce8-9c213faefa20	15e35919-cc42-42b9-b291-6fae96a073bf	{}
4ccec679-4ac6-4c4c-8403-eaea4527bbae	uploads	membros/1729515806157000_4.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:03:27.035419+00	2024-10-21 13:03:27.035419+00	2024-10-21 13:03:27.035419+00	{"eTag": "\\"f02439823062d3c66e0dd51d0ca55b4c\\"", "size": 11217, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:03:27.000Z", "contentLength": 11217, "httpStatusCode": 200}	43946a0f-1acc-4948-85c0-0a533eb70adb	15e35919-cc42-42b9-b291-6fae96a073bf	{}
09f90b14-87d4-48d0-b0aa-c11f12cedc02	uploads	membros/1729515806157000_1.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:03:27.102288+00	2024-10-21 13:03:27.102288+00	2024-10-21 13:03:27.102288+00	{"eTag": "\\"8250dee2d5891eb6b38dc7cb679bf9d4\\"", "size": 18277, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:03:28.000Z", "contentLength": 18277, "httpStatusCode": 200}	99b81a02-a54e-4e1d-ab2d-eea9d17c4e03	15e35919-cc42-42b9-b291-6fae96a073bf	{}
7bcbf472-5fd4-4bf0-9cf3-6bfdd7a368ef	uploads	membros/1729515806157000_3.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:03:27.133039+00	2024-10-21 13:03:27.133039+00	2024-10-21 13:03:27.133039+00	{"eTag": "\\"c4ebbcedcb2ac5d0414931eff0431f73\\"", "size": 10390, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:03:28.000Z", "contentLength": 10390, "httpStatusCode": 200}	e1397afc-4839-411f-8dff-978129b633f8	15e35919-cc42-42b9-b291-6fae96a073bf	{}
7eadcda0-fed9-422a-923a-0445a1932e8f	uploads	membros/1729515806157000_2.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:03:27.166503+00	2024-10-21 13:03:27.166503+00	2024-10-21 13:03:27.166503+00	{"eTag": "\\"a1bdad7922b512535ab686eb5e297873\\"", "size": 3347, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:03:28.000Z", "contentLength": 3347, "httpStatusCode": 200}	3b134fae-486f-4aa3-82c1-d400ff367cd5	15e35919-cc42-42b9-b291-6fae96a073bf	{}
c13702cc-370e-403a-8e47-ba345c8842c4	uploads	membros/1729515889426000_3.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:04:50.293048+00	2024-10-21 13:04:50.293048+00	2024-10-21 13:04:50.293048+00	{"eTag": "\\"c4ebbcedcb2ac5d0414931eff0431f73\\"", "size": 10390, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:04:51.000Z", "contentLength": 10390, "httpStatusCode": 200}	7c0aef36-f143-455a-b676-4e4f5eb05497	15e35919-cc42-42b9-b291-6fae96a073bf	{}
7f8d2131-a313-460a-babc-84f065fd2e30	uploads	membros/1729515889426000_2.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:04:50.324963+00	2024-10-21 13:04:50.324963+00	2024-10-21 13:04:50.324963+00	{"eTag": "\\"a1bdad7922b512535ab686eb5e297873\\"", "size": 3347, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:04:51.000Z", "contentLength": 3347, "httpStatusCode": 200}	bfe08650-e6c5-4362-81cd-67cd0e2ed271	15e35919-cc42-42b9-b291-6fae96a073bf	{}
196f41e7-c2bc-44d3-a12b-a62992663027	uploads	membros/1729515889426000_4.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:04:50.448478+00	2024-10-21 13:04:50.448478+00	2024-10-21 13:04:50.448478+00	{"eTag": "\\"f02439823062d3c66e0dd51d0ca55b4c\\"", "size": 11217, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:04:51.000Z", "contentLength": 11217, "httpStatusCode": 200}	c250a7a9-7445-4fe2-9faf-067e9e9e5369	15e35919-cc42-42b9-b291-6fae96a073bf	{}
df223369-11da-4264-91d4-3122dca74e69	uploads	membros/1729515889426000_0.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:04:50.367652+00	2024-10-21 13:04:50.367652+00	2024-10-21 13:04:50.367652+00	{"eTag": "\\"4ba727ceb337963e7fa9956c8aa24192\\"", "size": 15611, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:04:51.000Z", "contentLength": 15611, "httpStatusCode": 200}	b8dea096-12c4-49f0-97f3-a91cee5ce6d2	15e35919-cc42-42b9-b291-6fae96a073bf	{}
c3bc94f0-d6ca-46a4-8a10-859adb8f32f7	uploads	membros/1729544673890000_1.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 21:04:38.276583+00	2024-10-21 21:04:38.276583+00	2024-10-21 21:04:38.276583+00	{"eTag": "\\"771ae12c96b8e4470af8af20631d081b\\"", "size": 13054, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T21:04:39.000Z", "contentLength": 13054, "httpStatusCode": 200}	7d153fa6-3290-4c2c-8b21-34b0d3a62ffb	15e35919-cc42-42b9-b291-6fae96a073bf	{}
f7c2dd66-5231-4041-995f-3e487571b2f9	uploads	membros/1729515889426000_1.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:04:50.547822+00	2024-10-21 13:04:50.547822+00	2024-10-21 13:04:50.547822+00	{"eTag": "\\"8250dee2d5891eb6b38dc7cb679bf9d4\\"", "size": 18277, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:04:51.000Z", "contentLength": 18277, "httpStatusCode": 200}	7b03588a-0d48-4d7a-a3ce-fad5899d79bb	15e35919-cc42-42b9-b291-6fae96a073bf	{}
70293408-e86b-4900-a15a-208c9d00e327	uploads	membros/1729518314986000_2.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:45:15.871401+00	2024-10-21 13:45:15.871401+00	2024-10-21 13:45:15.871401+00	{"eTag": "\\"c4ebbcedcb2ac5d0414931eff0431f73\\"", "size": 10390, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:45:16.000Z", "contentLength": 10390, "httpStatusCode": 200}	3bb137ba-0ac7-4bba-b230-4f4826f5c453	15e35919-cc42-42b9-b291-6fae96a073bf	{}
961caf75-e967-44dd-94d1-2b9387b505c7	uploads	membros/1729600495969000_0.PNG	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	2024-10-22 12:34:57.616523+00	2024-10-22 12:34:57.616523+00	2024-10-22 12:34:57.616523+00	{"eTag": "\\"d0ce9ab1979fceda6def04799a2e34b4\\"", "size": 17738, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-22T12:34:58.000Z", "contentLength": 17738, "httpStatusCode": 200}	c9b6896e-906d-44b2-b862-4070812e586d	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	{}
4998e6fc-cd43-4ddb-b1e9-1f7746331b8b	uploads	membros/1729519837306000_0.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 14:10:38.322443+00	2024-10-21 14:10:38.322443+00	2024-10-21 14:10:38.322443+00	{"eTag": "\\"4ba727ceb337963e7fa9956c8aa24192\\"", "size": 15611, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T14:10:39.000Z", "contentLength": 15611, "httpStatusCode": 200}	fb825600-3734-4162-8e5f-791a69f487ae	15e35919-cc42-42b9-b291-6fae96a073bf	{}
7125fc7b-aba4-4923-b0b2-cc1253fa9b38	uploads	membros/1729519904603000_2.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 14:11:45.247096+00	2024-10-21 14:11:45.247096+00	2024-10-21 14:11:45.247096+00	{"eTag": "\\"c4ebbcedcb2ac5d0414931eff0431f73\\"", "size": 10390, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T14:11:46.000Z", "contentLength": 10390, "httpStatusCode": 200}	f878496b-745a-4f1e-891f-66ae351fdb5c	15e35919-cc42-42b9-b291-6fae96a073bf	{}
d0be147f-17ab-49bc-b1da-6210813def45	uploads	membros/1729516344556000_2.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:12:25.479233+00	2024-10-21 13:12:25.479233+00	2024-10-21 13:12:25.479233+00	{"eTag": "\\"a1bdad7922b512535ab686eb5e297873\\"", "size": 3347, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:12:26.000Z", "contentLength": 3347, "httpStatusCode": 200}	0deb47f6-339d-47c6-b459-8aece3fe25f9	15e35919-cc42-42b9-b291-6fae96a073bf	{}
560a309e-da57-49fa-817a-f16b5d4dd55d	uploads	membros/1729516344556000_3.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:12:25.612399+00	2024-10-21 13:12:25.612399+00	2024-10-21 13:12:25.612399+00	{"eTag": "\\"c4ebbcedcb2ac5d0414931eff0431f73\\"", "size": 10390, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:12:26.000Z", "contentLength": 10390, "httpStatusCode": 200}	ba874f1c-e900-4fe2-8db3-fb4f25eface6	15e35919-cc42-42b9-b291-6fae96a073bf	{}
bc904991-e102-4ff6-bf6f-95370d8527ee	uploads	membros/1729516344556000_1.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:12:25.582776+00	2024-10-21 13:12:25.582776+00	2024-10-21 13:12:25.582776+00	{"eTag": "\\"8250dee2d5891eb6b38dc7cb679bf9d4\\"", "size": 18277, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:12:26.000Z", "contentLength": 18277, "httpStatusCode": 200}	73717449-af5a-4a0b-b74a-ff41def0b8df	15e35919-cc42-42b9-b291-6fae96a073bf	{}
41f92ba1-6090-4a2e-b0f3-4d5f19fcf8fc	uploads	membros/1729516344555000_0.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:12:25.545218+00	2024-10-21 13:12:25.545218+00	2024-10-21 13:12:25.545218+00	{"eTag": "\\"4ba727ceb337963e7fa9956c8aa24192\\"", "size": 15611, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:12:26.000Z", "contentLength": 15611, "httpStatusCode": 200}	7ad97d6e-ce09-4d5a-b1b8-a4c3b08a0e09	15e35919-cc42-42b9-b291-6fae96a073bf	{}
61be4354-0246-485d-b63b-da8bf7860a73	uploads	membros/1729516344556000_4.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:12:25.597716+00	2024-10-21 13:12:25.597716+00	2024-10-21 13:12:25.597716+00	{"eTag": "\\"f02439823062d3c66e0dd51d0ca55b4c\\"", "size": 11217, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:12:26.000Z", "contentLength": 11217, "httpStatusCode": 200}	a6f98ca5-e584-4d69-bc4f-cca4475c0e59	15e35919-cc42-42b9-b291-6fae96a073bf	{}
fcf07711-c77b-4f9e-a79c-546631c6943c	uploads	membros/1729519904603000_0.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 14:11:45.676314+00	2024-10-21 14:11:45.676314+00	2024-10-21 14:11:45.676314+00	{"eTag": "\\"4ba727ceb337963e7fa9956c8aa24192\\"", "size": 15611, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T14:11:46.000Z", "contentLength": 15611, "httpStatusCode": 200}	bc3b88b6-2b7a-478e-b78d-370bb4b9d331	15e35919-cc42-42b9-b291-6fae96a073bf	{}
e8acf563-4b92-43e8-8537-08173b9e7545	uploads	membros/1729517798819000_2.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:36:39.701486+00	2024-10-21 13:36:39.701486+00	2024-10-21 13:36:39.701486+00	{"eTag": "\\"c4ebbcedcb2ac5d0414931eff0431f73\\"", "size": 10390, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:36:40.000Z", "contentLength": 10390, "httpStatusCode": 200}	5f14e0bb-db16-4ecd-85b4-86afe8d4b2ef	15e35919-cc42-42b9-b291-6fae96a073bf	{}
e7d0501f-0ac4-4244-a5ba-c216e4fd9b83	uploads	membros/1729517798819000_1.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:36:39.787397+00	2024-10-21 13:36:39.787397+00	2024-10-21 13:36:39.787397+00	{"eTag": "\\"8250dee2d5891eb6b38dc7cb679bf9d4\\"", "size": 18277, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:36:40.000Z", "contentLength": 18277, "httpStatusCode": 200}	414d79a8-be8a-49d6-b692-a25ef4f6a93f	15e35919-cc42-42b9-b291-6fae96a073bf	{}
dbfde5c0-c5e1-4784-aeb1-1bb478c4c33a	uploads	membros/1729517798819000_3.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:36:39.742195+00	2024-10-21 13:36:39.742195+00	2024-10-21 13:36:39.742195+00	{"eTag": "\\"f02439823062d3c66e0dd51d0ca55b4c\\"", "size": 11217, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:36:40.000Z", "contentLength": 11217, "httpStatusCode": 200}	e93a58a4-bffb-4721-a35c-6e4e2559535a	15e35919-cc42-42b9-b291-6fae96a073bf	{}
4af82479-5e11-41d3-9490-2c8cfe482224	uploads	membros/1729517798819000_0.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:36:39.815487+00	2024-10-21 13:36:39.815487+00	2024-10-21 13:36:39.815487+00	{"eTag": "\\"4ba727ceb337963e7fa9956c8aa24192\\"", "size": 15611, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:36:40.000Z", "contentLength": 15611, "httpStatusCode": 200}	836ca9af-de61-4bff-9467-227f62adf683	15e35919-cc42-42b9-b291-6fae96a073bf	{}
31e8d895-b92b-422c-9591-5e6147dbd10a	uploads	membros/1729544673890000_2.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 21:04:38.343425+00	2024-10-21 21:04:38.343425+00	2024-10-21 21:04:38.343425+00	{"eTag": "\\"274bce446c278bd2ee46e98adfb03f7e\\"", "size": 9620, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T21:04:39.000Z", "contentLength": 9620, "httpStatusCode": 200}	240d5f9d-9d37-4c8a-a7ea-dd9873f02a01	15e35919-cc42-42b9-b291-6fae96a073bf	{}
dc8093f6-b427-46fb-a00b-67a8e2f7c9d3	uploads	membros/1729517890476000_0.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:38:11.425083+00	2024-10-21 13:38:11.425083+00	2024-10-21 13:38:11.425083+00	{"eTag": "\\"4ba727ceb337963e7fa9956c8aa24192\\"", "size": 15611, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:38:12.000Z", "contentLength": 15611, "httpStatusCode": 200}	c3bd6ee7-22c7-4190-ab94-5ff3e81e2f40	15e35919-cc42-42b9-b291-6fae96a073bf	{}
b84c3ec1-d11e-474f-b7a7-3fc69724a117	uploads	membros/1729518314986000_0.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:45:15.977831+00	2024-10-21 13:45:15.977831+00	2024-10-21 13:45:15.977831+00	{"eTag": "\\"4ba727ceb337963e7fa9956c8aa24192\\"", "size": 15611, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:45:16.000Z", "contentLength": 15611, "httpStatusCode": 200}	db9011ff-c299-4dcd-8ee7-b7339d1eab79	15e35919-cc42-42b9-b291-6fae96a073bf	{}
7d5fa54a-300f-40bb-b24f-bbbd03f13b89	uploads	membros/1729517906056000_1.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:38:26.933981+00	2024-10-21 13:38:26.933981+00	2024-10-21 13:38:26.933981+00	{"eTag": "\\"8250dee2d5891eb6b38dc7cb679bf9d4\\"", "size": 18277, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:38:27.000Z", "contentLength": 18277, "httpStatusCode": 200}	c38125b3-b9ae-44ec-bac4-d49a90fda00e	15e35919-cc42-42b9-b291-6fae96a073bf	{}
ee6153f4-6213-4a81-abe4-53e08dd236bc	uploads	membros/1729520026429000_0.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 14:13:47.072577+00	2024-10-21 14:13:47.072577+00	2024-10-21 14:13:47.072577+00	{"eTag": "\\"4ba727ceb337963e7fa9956c8aa24192\\"", "size": 15611, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T14:13:48.000Z", "contentLength": 15611, "httpStatusCode": 200}	dc50692d-93db-46f8-8b7d-deea74c2ca6a	15e35919-cc42-42b9-b291-6fae96a073bf	{}
5d4dc2b1-d964-4c1c-8ca8-c293f4ca4cdb	uploads	membros/1729520026429000_2.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 14:13:47.490135+00	2024-10-21 14:13:47.490135+00	2024-10-21 14:13:47.490135+00	{"eTag": "\\"c4ebbcedcb2ac5d0414931eff0431f73\\"", "size": 10390, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T14:13:48.000Z", "contentLength": 10390, "httpStatusCode": 200}	23f5d9b3-0b2e-40c5-8bfe-3ae994221eea	15e35919-cc42-42b9-b291-6fae96a073bf	{}
feb1fd3e-b751-4282-911a-ac64409245e0	uploads	membros/1730836438430000_0.PNG	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	2024-11-05 19:53:59.789613+00	2024-11-05 19:53:59.789613+00	2024-11-05 19:53:59.789613+00	{"eTag": "\\"42f6149e2c29fed8cb7c42eb4d8d5a74\\"", "size": 36249, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-11-05T19:54:00.000Z", "contentLength": 36249, "httpStatusCode": 200}	97a3096f-d088-4739-ac32-a2110e0ca0ba	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	{}
1d2c4af7-7ead-4e8f-8e7e-219f9ac3a9b1	uploads	membros/1729600509433000_0.PNG	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	2024-10-22 12:35:11.072438+00	2024-10-22 12:35:11.072438+00	2024-10-22 12:35:11.072438+00	{"eTag": "\\"d0ce9ab1979fceda6def04799a2e34b4\\"", "size": 17738, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-22T12:35:11.000Z", "contentLength": 17738, "httpStatusCode": 200}	e1a8fa8a-bee0-4065-8e5e-3cbc470d8136	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	{}
68c970c6-b58e-4a85-a7d1-d6b2af7c57ee	uploads	membros/1729520057148000_1.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 14:14:18.573734+00	2024-10-21 14:14:18.573734+00	2024-10-21 14:14:18.573734+00	{"eTag": "\\"8250dee2d5891eb6b38dc7cb679bf9d4\\"", "size": 18277, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T14:14:19.000Z", "contentLength": 18277, "httpStatusCode": 200}	3208e70d-6d6c-46eb-858e-6107cef87ffb	15e35919-cc42-42b9-b291-6fae96a073bf	{}
a58841c0-b74d-4dbb-a41f-2debf36ad2a9	uploads	membros/1729520129027000_2.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 14:15:30.136466+00	2024-10-21 14:15:30.136466+00	2024-10-21 14:15:30.136466+00	{"eTag": "\\"c4ebbcedcb2ac5d0414931eff0431f73\\"", "size": 10390, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T14:15:31.000Z", "contentLength": 10390, "httpStatusCode": 200}	6da5a99f-8266-4434-a7e7-e69c2b1e4232	15e35919-cc42-42b9-b291-6fae96a073bf	{}
22369321-0ef1-4714-a86e-1fe04a7f7d1c	uploads	usuarios/1729691129722000.jpeg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-23 13:45:30.997318+00	2024-10-23 13:45:30.997318+00	2024-10-23 13:45:30.997318+00	{"eTag": "\\"7b4fd79ce4141978b4331614af295f6b\\"", "size": 40241, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-23T13:45:31.000Z", "contentLength": 40241, "httpStatusCode": 200}	b1ee98cb-b32f-4842-b239-3217533bbf68	15e35919-cc42-42b9-b291-6fae96a073bf	{}
4a96f5b3-d80c-4936-8728-bd925d36151b	uploads	membros/1729539455518000_0.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 19:37:40.275784+00	2024-10-21 19:37:40.275784+00	2024-10-21 19:37:40.275784+00	{"eTag": "\\"3461e9c2e07cd3da8f696023f748fa04\\"", "size": 25638, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T19:37:41.000Z", "contentLength": 25638, "httpStatusCode": 200}	9e301f10-fab1-4920-b5f1-7700dcd7decf	15e35919-cc42-42b9-b291-6fae96a073bf	{}
5d03fe99-ca47-442c-8ddf-ad2e1d71e613	uploads	membros/1729539562737000_0.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 19:39:27.177014+00	2024-10-21 19:39:27.177014+00	2024-10-21 19:39:27.177014+00	{"eTag": "\\"3461e9c2e07cd3da8f696023f748fa04\\"", "size": 25638, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T19:39:28.000Z", "contentLength": 25638, "httpStatusCode": 200}	ccb39639-dccd-48e8-864f-e846af4b218c	15e35919-cc42-42b9-b291-6fae96a073bf	{}
37d07b40-74f5-4295-a285-5515f30229c1	uploads	membros/1729539623190000_0.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 19:40:27.62172+00	2024-10-21 19:40:27.62172+00	2024-10-21 19:40:27.62172+00	{"eTag": "\\"3461e9c2e07cd3da8f696023f748fa04\\"", "size": 25638, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T19:40:28.000Z", "contentLength": 25638, "httpStatusCode": 200}	6cc29042-8e7f-45e5-b15e-da1ce99258c9	15e35919-cc42-42b9-b291-6fae96a073bf	{}
b6301a1d-ef69-4a32-8ada-4c207dcae63a	uploads	membros/1729541394116000_1.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 20:09:58.811599+00	2024-10-21 20:09:58.811599+00	2024-10-21 20:09:58.811599+00	{"eTag": "\\"771ae12c96b8e4470af8af20631d081b\\"", "size": 13054, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T20:09:59.000Z", "contentLength": 13054, "httpStatusCode": 200}	8c80075f-4f98-4030-95ce-49d68d03e00f	15e35919-cc42-42b9-b291-6fae96a073bf	{}
5793c04f-d1b3-408a-982b-3095e9fbacb7	uploads	membros/1729542786882000_1.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 20:33:11.330667+00	2024-10-21 20:33:11.330667+00	2024-10-21 20:33:11.330667+00	{"eTag": "\\"274bce446c278bd2ee46e98adfb03f7e\\"", "size": 9620, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T20:33:12.000Z", "contentLength": 9620, "httpStatusCode": 200}	2599f30c-c57d-42f2-b32d-a1126df91aad	15e35919-cc42-42b9-b291-6fae96a073bf	{}
c69380a1-720f-472b-a862-d681617ac7de	uploads	membros/1729517890476000_1.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:38:11.539613+00	2024-10-21 13:38:11.539613+00	2024-10-21 13:38:11.539613+00	{"eTag": "\\"8250dee2d5891eb6b38dc7cb679bf9d4\\"", "size": 18277, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:38:12.000Z", "contentLength": 18277, "httpStatusCode": 200}	1b5ce4c0-36a8-44e6-9408-1e47c8659393	15e35919-cc42-42b9-b291-6fae96a073bf	{}
a056f1c5-4c87-4b42-8bb4-459b90b16e41	uploads	membros/1729517906056000_2.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:38:26.715179+00	2024-10-21 13:38:26.715179+00	2024-10-21 13:38:26.715179+00	{"eTag": "\\"c4ebbcedcb2ac5d0414931eff0431f73\\"", "size": 10390, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:38:27.000Z", "contentLength": 10390, "httpStatusCode": 200}	796f2376-62e0-4a9d-9a58-15d6861742bf	15e35919-cc42-42b9-b291-6fae96a073bf	{}
eb1cfccb-70c0-4022-89ea-b71ae7d8225a	uploads	membros/1729518314986000_3.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:45:15.97132+00	2024-10-21 13:45:15.97132+00	2024-10-21 13:45:15.97132+00	{"eTag": "\\"f02439823062d3c66e0dd51d0ca55b4c\\"", "size": 11217, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:45:16.000Z", "contentLength": 11217, "httpStatusCode": 200}	d3ebe15f-7b30-4721-a454-3c54b87b0d8f	15e35919-cc42-42b9-b291-6fae96a073bf	{}
1cf2fb5f-affd-486b-b832-26556694a70e	uploads	membros/1729520129027000_3.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 14:15:30.045533+00	2024-10-21 14:15:30.045533+00	2024-10-21 14:15:30.045533+00	{"eTag": "\\"f02439823062d3c66e0dd51d0ca55b4c\\"", "size": 11217, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T14:15:30.000Z", "contentLength": 11217, "httpStatusCode": 200}	ecd70f12-53c1-4b13-aa53-6b0d8385c41b	15e35919-cc42-42b9-b291-6fae96a073bf	{}
1b004cfe-f270-49ce-af7e-201f810c6832	uploads	membros/1729545794739000_3.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 21:23:19.184334+00	2024-10-21 21:23:19.184334+00	2024-10-21 21:23:19.184334+00	{"eTag": "\\"5df5cdb3d9b1070001bb9386e3ba5856\\"", "size": 15230, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T21:23:20.000Z", "contentLength": 15230, "httpStatusCode": 200}	ac498e12-223a-45c8-85ec-180d14a2474f	15e35919-cc42-42b9-b291-6fae96a073bf	{}
92fb6b25-be78-491b-8cbc-6357aa11c1fe	uploads	membros/1729540222900000_0.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 19:50:27.479118+00	2024-10-21 19:50:27.479118+00	2024-10-21 19:50:27.479118+00	{"eTag": "\\"887d8673ddb724312efe244e6b10bad4\\"", "size": 3226, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T19:50:28.000Z", "contentLength": 3226, "httpStatusCode": 200}	4a9179b9-b67e-4d6b-a026-5fd41cf3e3bb	15e35919-cc42-42b9-b291-6fae96a073bf	{}
772f7c2a-ee72-45c7-8e99-906b38e8f136	uploads	membros/1730836463852000_0.PNG	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	2024-11-05 19:54:25.1382+00	2024-11-05 19:54:25.1382+00	2024-11-05 19:54:25.1382+00	{"eTag": "\\"42f6149e2c29fed8cb7c42eb4d8d5a74\\"", "size": 36249, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-11-05T19:54:26.000Z", "contentLength": 36249, "httpStatusCode": 200}	e56c4e24-d3cd-4b61-b598-e16586ec20da	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	{}
9c1dfcf6-2f07-4adc-b96a-590e7862f52b	uploads	membros/1729540309013000_2.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 19:51:53.477295+00	2024-10-21 19:51:53.477295+00	2024-10-21 19:51:53.477295+00	{"eTag": "\\"bf15014837347bb0310ff06fc1d7b19e\\"", "size": 2710, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T19:51:54.000Z", "contentLength": 2710, "httpStatusCode": 200}	17e9ffff-ac40-4ec2-9e04-da23f77c8977	15e35919-cc42-42b9-b291-6fae96a073bf	{}
ffde91d0-4b52-4cf0-aef9-472a7eed8892	uploads	membros/1729542335810000_0.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 20:25:40.345731+00	2024-10-21 20:25:40.345731+00	2024-10-21 20:25:40.345731+00	{"eTag": "\\"94b57905ad1efac84a78ae68cb89d5e0\\"", "size": 15321, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T20:25:41.000Z", "contentLength": 15321, "httpStatusCode": 200}	4cb41664-5178-4d15-a1e7-74951ddebd98	15e35919-cc42-42b9-b291-6fae96a073bf	{}
b6e6607d-14c0-49e4-92c1-c300b8bf3f1f	uploads	membros/1729542838820000_2.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 20:34:02.889299+00	2024-10-21 20:34:02.889299+00	2024-10-21 20:34:02.889299+00	{"eTag": "\\"5df5cdb3d9b1070001bb9386e3ba5856\\"", "size": 15230, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T20:34:03.000Z", "contentLength": 15230, "httpStatusCode": 200}	e542a3d0-9929-4838-a191-57c950a89d16	15e35919-cc42-42b9-b291-6fae96a073bf	{}
0390bfaf-b12b-4233-9d24-b666edb08def	uploads	usuarios/1729681437466000.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-23 11:04:05.007781+00	2024-10-23 11:04:05.007781+00	2024-10-23 11:04:05.007781+00	{"eTag": "\\"ae174319a1ed5f07d605937691f5dfdb\\"", "size": 21739, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-23T11:04:05.000Z", "contentLength": 21739, "httpStatusCode": 200}	4530eee6-025a-4d71-83f5-dd6a6ebbc79b	15e35919-cc42-42b9-b291-6fae96a073bf	{}
30073fe7-a61e-4c63-98df-d7f049d41ade	uploads	membros/1729544405908000_0.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 21:00:16.037924+00	2024-10-21 21:00:16.037924+00	2024-10-21 21:00:16.037924+00	{"eTag": "\\"94b57905ad1efac84a78ae68cb89d5e0\\"", "size": 15321, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T21:00:16.000Z", "contentLength": 15321, "httpStatusCode": 200}	cadbb6d9-8e25-4755-89ed-a5efaba5374f	15e35919-cc42-42b9-b291-6fae96a073bf	{}
1ddf2058-e44e-4f70-87a9-629216d7ee6e	uploads	membros/1729544405908000_2.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 21:00:20.727069+00	2024-10-21 21:00:20.727069+00	2024-10-21 21:00:20.727069+00	{"eTag": "\\"274bce446c278bd2ee46e98adfb03f7e\\"", "size": 9620, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T21:00:21.000Z", "contentLength": 9620, "httpStatusCode": 200}	313d3e2f-2d0c-42e2-a145-285d3b3d67e0	15e35919-cc42-42b9-b291-6fae96a073bf	{}
6d1811ba-ad80-46bc-937d-88d7d1443ebf	uploads	membros/1729544472692000_0.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 21:01:17.091351+00	2024-10-21 21:01:17.091351+00	2024-10-21 21:01:17.091351+00	{"eTag": "\\"94b57905ad1efac84a78ae68cb89d5e0\\"", "size": 15321, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T21:01:17.000Z", "contentLength": 15321, "httpStatusCode": 200}	4ed9f61f-bd63-4bd9-a629-be6f2b285f3e	15e35919-cc42-42b9-b291-6fae96a073bf	{}
90e1357f-fd8d-4b50-bb23-42bec62bed4a	uploads	membros/1729517890476000_3.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:38:11.526505+00	2024-10-21 13:38:11.526505+00	2024-10-21 13:38:11.526505+00	{"eTag": "\\"f02439823062d3c66e0dd51d0ca55b4c\\"", "size": 11217, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:38:12.000Z", "contentLength": 11217, "httpStatusCode": 200}	7ca999f2-ba06-40ec-94df-015a5a3ec9ab	15e35919-cc42-42b9-b291-6fae96a073bf	{}
214c10bf-3882-46a9-894a-4cf62b315265	uploads	membros/1729517906056000_3.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:38:27.054152+00	2024-10-21 13:38:27.054152+00	2024-10-21 13:38:27.054152+00	{"eTag": "\\"f02439823062d3c66e0dd51d0ca55b4c\\"", "size": 11217, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:38:27.000Z", "contentLength": 11217, "httpStatusCode": 200}	7cbd600e-5f80-4fb4-ad63-f5446e9557d4	15e35919-cc42-42b9-b291-6fae96a073bf	{}
e57ffd8f-7a9c-4937-8560-1a09f417ec5c	uploads	membros/1729519110066000_2.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:58:31.224029+00	2024-10-21 13:58:31.224029+00	2024-10-21 13:58:31.224029+00	{"eTag": "\\"c4ebbcedcb2ac5d0414931eff0431f73\\"", "size": 10390, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:58:31.000Z", "contentLength": 10390, "httpStatusCode": 200}	d7bbf018-700b-482c-ab8e-36e633cea12b	15e35919-cc42-42b9-b291-6fae96a073bf	{}
71ca338b-267e-44c2-9514-b78bab862f72	uploads	membros/1729545794739000_1.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 21:23:19.166202+00	2024-10-21 21:23:19.166202+00	2024-10-21 21:23:19.166202+00	{"eTag": "\\"771ae12c96b8e4470af8af20631d081b\\"", "size": 13054, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T21:23:20.000Z", "contentLength": 13054, "httpStatusCode": 200}	8402aa13-06da-4bd6-9359-3d8d0a6b7862	15e35919-cc42-42b9-b291-6fae96a073bf	{}
a394cb79-9955-4ddd-9973-a25431ef0bd4	uploads	membros/1729524302495000_0.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 15:25:03.530148+00	2024-10-21 15:25:03.530148+00	2024-10-21 15:25:03.530148+00	{"eTag": "\\"4ba727ceb337963e7fa9956c8aa24192\\"", "size": 15611, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T15:25:04.000Z", "contentLength": 15611, "httpStatusCode": 200}	5634e483-b415-463f-b7bb-110788e55a99	15e35919-cc42-42b9-b291-6fae96a073bf	{}
7fc68e62-349b-426c-a68a-4e47698276cb	uploads	usuarios/1730891868111000.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-11-06 11:17:49.141519+00	2024-11-06 11:17:49.141519+00	2024-11-06 11:17:49.141519+00	{"eTag": "\\"040edd5c9fdfb4ee7a7571832e088e5b\\"", "size": 19345, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-11-06T11:17:50.000Z", "contentLength": 19345, "httpStatusCode": 200}	98e0c048-e978-4616-92be-680e2f369f34	15e35919-cc42-42b9-b291-6fae96a073bf	{}
95d4d46c-f63b-476b-842a-f93b87cd01ea	uploads	membros/1729540222900000_2.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 19:50:27.45507+00	2024-10-21 19:50:27.45507+00	2024-10-21 19:50:27.45507+00	{"eTag": "\\"bf15014837347bb0310ff06fc1d7b19e\\"", "size": 2710, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T19:50:28.000Z", "contentLength": 2710, "httpStatusCode": 200}	67327ef5-29fc-472b-a04e-c793bd2bee85	15e35919-cc42-42b9-b291-6fae96a073bf	{}
05da7cf4-cde8-43c2-8c39-501e1f8ec4d6	uploads	membros/1729545828739000_1.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 21:23:52.72403+00	2024-10-21 21:23:52.72403+00	2024-10-21 21:23:52.72403+00	{"eTag": "\\"771ae12c96b8e4470af8af20631d081b\\"", "size": 13054, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T21:23:53.000Z", "contentLength": 13054, "httpStatusCode": 200}	10725de1-cf44-48dd-a496-9c690ef8e027	15e35919-cc42-42b9-b291-6fae96a073bf	{}
1c501f23-b995-40be-9c2a-5f2bb0db5d1e	uploads	membros/1729540309013000_1.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 19:51:53.470178+00	2024-10-21 19:51:53.470178+00	2024-10-21 19:51:53.470178+00	{"eTag": "\\"131bd24c54c6802456adb9bad41d6c5d\\"", "size": 6622, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T19:51:54.000Z", "contentLength": 6622, "httpStatusCode": 200}	d718eac6-b7d5-47db-9d0b-acdfc22a1b77	15e35919-cc42-42b9-b291-6fae96a073bf	{}
3b70cc3e-2ff9-409a-8859-d1e1b661058d	uploads	membros/1729545828739000_2.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 21:23:53.149301+00	2024-10-21 21:23:53.149301+00	2024-10-21 21:23:53.149301+00	{"eTag": "\\"274bce446c278bd2ee46e98adfb03f7e\\"", "size": 9620, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T21:23:54.000Z", "contentLength": 9620, "httpStatusCode": 200}	6485c80e-52f3-4237-9de7-8dd29135c106	15e35919-cc42-42b9-b291-6fae96a073bf	{}
4cd00396-7924-41d0-9304-111258cf18ff	uploads	membros/1729542335810000_3.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 20:25:40.338441+00	2024-10-21 20:25:40.338441+00	2024-10-21 20:25:40.338441+00	{"eTag": "\\"5df5cdb3d9b1070001bb9386e3ba5856\\"", "size": 15230, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T20:25:41.000Z", "contentLength": 15230, "httpStatusCode": 200}	abd48f48-8e4f-4320-9220-e2b86365190f	15e35919-cc42-42b9-b291-6fae96a073bf	{}
67f16d9b-ad37-4489-af9e-40b92858194f	uploads	membros/1729542786882000_2.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 20:33:11.723637+00	2024-10-21 20:33:11.723637+00	2024-10-21 20:33:11.723637+00	{"eTag": "\\"5df5cdb3d9b1070001bb9386e3ba5856\\"", "size": 15230, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T20:33:12.000Z", "contentLength": 15230, "httpStatusCode": 200}	3c50822a-858f-4738-8308-def076a74240	15e35919-cc42-42b9-b291-6fae96a073bf	{}
ee6cfc7c-32d2-43c6-8741-538e99565375	uploads	membros/1729542838820000_0.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 20:34:03.169239+00	2024-10-21 20:34:03.169239+00	2024-10-21 20:34:03.169239+00	{"eTag": "\\"771ae12c96b8e4470af8af20631d081b\\"", "size": 13054, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T20:34:04.000Z", "contentLength": 13054, "httpStatusCode": 200}	b1369747-4837-480c-b384-8ce3cb2a2f37	15e35919-cc42-42b9-b291-6fae96a073bf	{}
f773802b-487d-4865-be66-f81439f65693	uploads	membros/1729544472692000_1.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 21:01:17.215616+00	2024-10-21 21:01:17.215616+00	2024-10-21 21:01:17.215616+00	{"eTag": "\\"771ae12c96b8e4470af8af20631d081b\\"", "size": 13054, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T21:01:18.000Z", "contentLength": 13054, "httpStatusCode": 200}	ac0cc002-a19f-4c14-add7-7f0550fdfc8f	15e35919-cc42-42b9-b291-6fae96a073bf	{}
ebcf26b8-63e0-4950-b570-959cfd3d9345	uploads	membros/1729544472692000_3.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 21:01:17.286073+00	2024-10-21 21:01:17.286073+00	2024-10-21 21:01:17.286073+00	{"eTag": "\\"5df5cdb3d9b1070001bb9386e3ba5856\\"", "size": 15230, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T21:01:18.000Z", "contentLength": 15230, "httpStatusCode": 200}	96c6acd8-da5a-46f7-8721-b13e31fa0b19	15e35919-cc42-42b9-b291-6fae96a073bf	{}
5a5c183c-04ff-48ba-b17d-10bdbd52ef9a	uploads	membros/1729517890476000_2.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:38:11.506796+00	2024-10-21 13:38:11.506796+00	2024-10-21 13:38:11.506796+00	{"eTag": "\\"c4ebbcedcb2ac5d0414931eff0431f73\\"", "size": 10390, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:38:12.000Z", "contentLength": 10390, "httpStatusCode": 200}	0577b8b8-232d-4a96-a4ff-0659577707f8	15e35919-cc42-42b9-b291-6fae96a073bf	{}
50e25c73-aa49-45a1-af99-4bf74348360e	uploads	usuarios/1730891892781000.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-11-06 11:18:13.813324+00	2024-11-06 11:18:13.813324+00	2024-11-06 11:18:13.813324+00	{"eTag": "\\"3dfc852c37cce3ae1051976eea93d0c0\\"", "size": 15101, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-11-06T11:18:14.000Z", "contentLength": 15101, "httpStatusCode": 200}	7eeb6f0b-8e1d-40fe-8df8-4ac86e893648	15e35919-cc42-42b9-b291-6fae96a073bf	{}
79449ed5-aac3-458b-b4a4-949d46c77ebb	uploads	membros/1729519110066000_3.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:58:30.987271+00	2024-10-21 13:58:30.987271+00	2024-10-21 13:58:30.987271+00	{"eTag": "\\"f02439823062d3c66e0dd51d0ca55b4c\\"", "size": 11217, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:58:31.000Z", "contentLength": 11217, "httpStatusCode": 200}	674dfb6f-822f-426f-af7b-8c74f784cd49	15e35919-cc42-42b9-b291-6fae96a073bf	{}
9d37ce5a-a3d9-4c2d-a15c-288de676a6c0	uploads	membros/1729517906056000_0.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 13:38:26.953929+00	2024-10-21 13:38:26.953929+00	2024-10-21 13:38:26.953929+00	{"eTag": "\\"4ba727ceb337963e7fa9956c8aa24192\\"", "size": 15611, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T13:38:27.000Z", "contentLength": 15611, "httpStatusCode": 200}	3a903682-73f8-415e-9c36-f0ad1c9fc5e2	15e35919-cc42-42b9-b291-6fae96a073bf	{}
e29e7385-c66a-49ae-ba81-561a4559eba2	uploads	membros/1729545794739000_0.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 21:23:19.087642+00	2024-10-21 21:23:19.087642+00	2024-10-21 21:23:19.087642+00	{"eTag": "\\"94b57905ad1efac84a78ae68cb89d5e0\\"", "size": 15321, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T21:23:20.000Z", "contentLength": 15321, "httpStatusCode": 200}	c8f8cabd-9f9e-4179-882d-96a9eef5b343	15e35919-cc42-42b9-b291-6fae96a073bf	{}
7ffbc89e-5c86-4c8f-a7b5-04aabe0d5fb7	uploads	membros/1729524302495000_3.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 15:25:03.489596+00	2024-10-21 15:25:03.489596+00	2024-10-21 15:25:03.489596+00	{"eTag": "\\"f02439823062d3c66e0dd51d0ca55b4c\\"", "size": 11217, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T15:25:04.000Z", "contentLength": 11217, "httpStatusCode": 200}	b6e85f39-1252-4f37-ba68-b1ea17c9c99c	15e35919-cc42-42b9-b291-6fae96a073bf	{}
b309edd2-f796-4a77-b4a1-ece09a3f007b	uploads	membros/1729540222900000_1.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 19:50:27.437242+00	2024-10-21 19:50:27.437242+00	2024-10-21 19:50:27.437242+00	{"eTag": "\\"131bd24c54c6802456adb9bad41d6c5d\\"", "size": 6622, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T19:50:28.000Z", "contentLength": 6622, "httpStatusCode": 200}	70523131-4c5e-45a3-bf4e-11be4cc99177	15e35919-cc42-42b9-b291-6fae96a073bf	{}
86574c98-3fa3-4b4c-8591-30abddab4cd9	uploads	membros/1729545828739000_3.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 21:23:53.062989+00	2024-10-21 21:23:53.062989+00	2024-10-21 21:23:53.062989+00	{"eTag": "\\"5df5cdb3d9b1070001bb9386e3ba5856\\"", "size": 15230, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T21:23:53.000Z", "contentLength": 15230, "httpStatusCode": 200}	208d84c5-1ec0-4e0f-a852-273e13f45dd8	15e35919-cc42-42b9-b291-6fae96a073bf	{}
a50d9266-6556-4738-acad-bc7dccc25f89	uploads	membros/1729540309013000_0.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 19:51:53.397655+00	2024-10-21 19:51:53.397655+00	2024-10-21 19:51:53.397655+00	{"eTag": "\\"887d8673ddb724312efe244e6b10bad4\\"", "size": 3226, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T19:51:54.000Z", "contentLength": 3226, "httpStatusCode": 200}	3dbd6c00-238e-446a-90f2-35e333783280	15e35919-cc42-42b9-b291-6fae96a073bf	{}
fcdcbdd6-e904-4318-bcc4-039376aa4e4a	uploads	membros/1729545877644000_1.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 21:24:41.64729+00	2024-10-21 21:24:41.64729+00	2024-10-21 21:24:41.64729+00	{"eTag": "\\"771ae12c96b8e4470af8af20631d081b\\"", "size": 13054, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T21:24:42.000Z", "contentLength": 13054, "httpStatusCode": 200}	9c0e0c8d-e69a-40ad-b802-8f31e4c98bce	15e35919-cc42-42b9-b291-6fae96a073bf	{}
7af0d613-9160-48cf-979f-219b40855d7b	uploads	membros/1729542335810000_1.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 20:25:40.224474+00	2024-10-21 20:25:40.224474+00	2024-10-21 20:25:40.224474+00	{"eTag": "\\"771ae12c96b8e4470af8af20631d081b\\"", "size": 13054, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T20:25:41.000Z", "contentLength": 13054, "httpStatusCode": 200}	2c38383e-6634-4fbe-bcec-3746d69b15cc	15e35919-cc42-42b9-b291-6fae96a073bf	{}
b85bf32d-90ee-47d7-b0f2-aa56cebe1464	uploads	membros/1729542838820000_1.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 20:34:03.12849+00	2024-10-21 20:34:03.12849+00	2024-10-21 20:34:03.12849+00	{"eTag": "\\"274bce446c278bd2ee46e98adfb03f7e\\"", "size": 9620, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T20:34:04.000Z", "contentLength": 9620, "httpStatusCode": 200}	bc8080cc-d000-41f2-820b-375bfcb65e44	15e35919-cc42-42b9-b291-6fae96a073bf	{}
d5386bb1-9312-4367-b128-e924a9cc1c1a	uploads	membros/1729544472692000_2.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 21:01:16.862366+00	2024-10-21 21:01:16.862366+00	2024-10-21 21:01:16.862366+00	{"eTag": "\\"274bce446c278bd2ee46e98adfb03f7e\\"", "size": 9620, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T21:01:17.000Z", "contentLength": 9620, "httpStatusCode": 200}	3af5e6fe-7ce8-4aee-a98c-123d3e425a1a	15e35919-cc42-42b9-b291-6fae96a073bf	{}
27fc2825-e535-4270-9f3d-d720d7475cce	uploads	membros/1729544600299000_2.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 21:03:24.741499+00	2024-10-21 21:03:24.741499+00	2024-10-21 21:03:24.741499+00	{"eTag": "\\"274bce446c278bd2ee46e98adfb03f7e\\"", "size": 9620, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T21:03:25.000Z", "contentLength": 9620, "httpStatusCode": 200}	b160cb64-93a9-4be3-93cd-fa6806f81728	15e35919-cc42-42b9-b291-6fae96a073bf	{}
8baadb33-4da9-45c6-94c6-dbafeeea7af2	uploads	membros/1729544600299000_3.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 21:03:24.811668+00	2024-10-21 21:03:24.811668+00	2024-10-21 21:03:24.811668+00	{"eTag": "\\"5df5cdb3d9b1070001bb9386e3ba5856\\"", "size": 15230, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T21:03:25.000Z", "contentLength": 15230, "httpStatusCode": 200}	aca5e02a-5f59-45e0-b9c9-ec0db31eab44	15e35919-cc42-42b9-b291-6fae96a073bf	{}
09f12aa9-ead6-4080-92bb-2c0ab6684483	uploads	membros/1729544600299000_0.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 21:03:25.029542+00	2024-10-21 21:03:25.029542+00	2024-10-21 21:03:25.029542+00	{"eTag": "\\"94b57905ad1efac84a78ae68cb89d5e0\\"", "size": 15321, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T21:03:25.000Z", "contentLength": 15321, "httpStatusCode": 200}	0b7a7bfc-99ae-41e4-a307-10114a094207	15e35919-cc42-42b9-b291-6fae96a073bf	{}
44411ed2-30fc-47db-bfb7-b586cbe54f3d	uploads	membros/1729544600299000_1.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 21:03:25.375678+00	2024-10-21 21:03:25.375678+00	2024-10-21 21:03:25.375678+00	{"eTag": "\\"771ae12c96b8e4470af8af20631d081b\\"", "size": 13054, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T21:03:26.000Z", "contentLength": 13054, "httpStatusCode": 200}	1a6c0fb9-a332-47bd-ba54-8380d8636145	15e35919-cc42-42b9-b291-6fae96a073bf	{}
3eee85a6-94c2-4602-ba61-06b99bc1d1e6	uploads	membros/1729545794739000_2.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 21:23:19.154529+00	2024-10-21 21:23:19.154529+00	2024-10-21 21:23:19.154529+00	{"eTag": "\\"274bce446c278bd2ee46e98adfb03f7e\\"", "size": 9620, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T21:23:20.000Z", "contentLength": 9620, "httpStatusCode": 200}	cf6c9c70-ee09-4965-a235-e32b8a9a2f45	15e35919-cc42-42b9-b291-6fae96a073bf	{}
20f939fb-f36a-4b87-b1b1-9dacf9c83905	uploads	usuarios/1730891910130000.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-11-06 11:18:31.07371+00	2024-11-06 11:18:31.07371+00	2024-11-06 11:18:31.07371+00	{"eTag": "\\"d74f3868cb910f741712a1bb69a16d09\\"", "size": 20731, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-11-06T11:18:32.000Z", "contentLength": 20731, "httpStatusCode": 200}	693a5f5d-4e5a-4a1e-a493-c7dbef6b98e9	15e35919-cc42-42b9-b291-6fae96a073bf	{}
7516ee1d-ddaf-434b-8532-c8e1097f73f7	uploads	membros/1729545828739000_0.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 21:23:52.73621+00	2024-10-21 21:23:52.73621+00	2024-10-21 21:23:52.73621+00	{"eTag": "\\"94b57905ad1efac84a78ae68cb89d5e0\\"", "size": 15321, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T21:23:53.000Z", "contentLength": 15321, "httpStatusCode": 200}	58843984-7dfd-498c-93e7-e1ef98adc9b0	15e35919-cc42-42b9-b291-6fae96a073bf	{}
1f2255c6-c00d-4daf-a3ca-0366f0dcb4aa	uploads	membros/1729545877644000_2.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-21 21:24:41.99188+00	2024-10-21 21:24:41.99188+00	2024-10-21 21:24:41.99188+00	{"eTag": "\\"274bce446c278bd2ee46e98adfb03f7e\\"", "size": 9620, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-21T21:24:42.000Z", "contentLength": 9620, "httpStatusCode": 200}	9a01c6f8-3313-4c63-bde6-26b88b07a8ec	15e35919-cc42-42b9-b291-6fae96a073bf	{}
b78355f0-a30e-481f-92a2-0b2cc1926860	uploads	usuarios/1730891972893000.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-11-06 11:19:33.804665+00	2024-11-06 11:19:33.804665+00	2024-11-06 11:19:33.804665+00	{"eTag": "\\"73d80ad89cb6137745f148f7b30098b2\\"", "size": 25093, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-11-06T11:19:34.000Z", "contentLength": 25093, "httpStatusCode": 200}	08043c39-e800-4ee0-8233-a9cbfed57252	15e35919-cc42-42b9-b291-6fae96a073bf	{}
07068ef9-bb09-4e11-9644-55b0a89a06b4	uploads	usuarios/1729682335405000.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-23 11:19:03.373883+00	2024-10-23 11:19:03.373883+00	2024-10-23 11:19:03.373883+00	{"eTag": "\\"760eac251ec95195b6f8d64c56be6e81\\"", "size": 33425, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-23T11:19:04.000Z", "contentLength": 33425, "httpStatusCode": 200}	75665e0b-67f1-449e-a8c0-48280704dd6c	15e35919-cc42-42b9-b291-6fae96a073bf	{}
0ce84dad-0a91-4696-b111-e678bc14b20c	uploads	usuarios/1729682404426000.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-23 11:20:12.317559+00	2024-10-23 11:20:12.317559+00	2024-10-23 11:20:12.317559+00	{"eTag": "\\"595dab421aa9808f6ad02b19bec56bc8\\"", "size": 27745, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-23T11:20:13.000Z", "contentLength": 27745, "httpStatusCode": 200}	dd954583-a3c8-465e-9c41-2bfb589f253f	15e35919-cc42-42b9-b291-6fae96a073bf	{}
cfb31f1d-3599-425f-b4cc-6427334929ae	uploads	usuarios/1729691869806000.jpeg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-23 13:57:51.080055+00	2024-10-23 13:57:51.080055+00	2024-10-23 13:57:51.080055+00	{"eTag": "\\"9404b9706702747a7776cd864282395c\\"", "size": 74099, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-23T13:57:51.000Z", "contentLength": 74099, "httpStatusCode": 200}	b7e5936a-f2e0-4862-96b5-bdf46ca31059	15e35919-cc42-42b9-b291-6fae96a073bf	{}
1e0cb501-efdd-486f-8ec3-803aace0575b	uploads	faccoes/1729691926141000.jpeg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-23 13:58:46.821842+00	2024-10-23 13:58:46.821842+00	2024-10-23 13:58:46.821842+00	{"eTag": "\\"2c799a55b86e8d3ebcb97bd77188ee36\\"", "size": 20341, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-23T13:58:47.000Z", "contentLength": 20341, "httpStatusCode": 200}	28ad277c-3ca6-4ef0-a700-385000180b07	15e35919-cc42-42b9-b291-6fae96a073bf	{}
f956abf2-a63a-4f48-b91c-c59af8875d51	uploads	usuarios/1729764095888000.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-24 10:01:36.994617+00	2024-10-24 10:01:36.994617+00	2024-10-24 10:01:36.994617+00	{"eTag": "\\"676d37433e90fdd4c52832356f2d569d\\"", "size": 30645, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-24T10:01:37.000Z", "contentLength": 30645, "httpStatusCode": 200}	f9779873-ba84-4a9d-a8a8-693ecca58975	15e35919-cc42-42b9-b291-6fae96a073bf	{}
b150fc05-3bdc-4bdb-8ae5-fcb68a7afdea	uploads	faccoes/1729764955818000.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-24 10:15:56.95857+00	2024-10-24 10:15:56.95857+00	2024-10-24 10:15:56.95857+00	{"eTag": "\\"ca5bf4640cde36da80a8c4c4d061689f\\"", "size": 9918, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-24T10:15:57.000Z", "contentLength": 9918, "httpStatusCode": 200}	d76cc1ff-2311-4cbf-a1a6-105e9ba3eedc	15e35919-cc42-42b9-b291-6fae96a073bf	{}
fcc4aa65-7052-4f19-a48c-a80a167fddf7	uploads	usuarios/1729765019863000.jpeg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-24 10:17:00.730628+00	2024-10-24 10:17:00.730628+00	2024-10-24 10:17:00.730628+00	{"eTag": "\\"8f17d87975f7748d8773679f1a7cffb5\\"", "size": 72297, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-24T10:17:01.000Z", "contentLength": 72297, "httpStatusCode": 200}	913af35a-c329-4942-86d2-61fe8ac95831	15e35919-cc42-42b9-b291-6fae96a073bf	{}
350fca71-3a7d-4301-9212-fb80bc8a2d92	uploads	faccoes/1729765057618000.jpeg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-24 10:17:38.483413+00	2024-10-24 10:17:38.483413+00	2024-10-24 10:17:38.483413+00	{"eTag": "\\"768f5dcb2bee346c13a377335c97f79f\\"", "size": 19343, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-24T10:17:39.000Z", "contentLength": 19343, "httpStatusCode": 200}	3dc57a2e-a3f6-45cd-b839-0c8a6f44825b	15e35919-cc42-42b9-b291-6fae96a073bf	{}
5b9bf79b-59b9-4b0a-a378-d586c428a3c7	uploads	usuarios/1729767999803000.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-24 11:06:41.26037+00	2024-10-24 11:06:41.26037+00	2024-10-24 11:06:41.26037+00	{"eTag": "\\"676d37433e90fdd4c52832356f2d569d\\"", "size": 30645, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-24T11:06:41.000Z", "contentLength": 30645, "httpStatusCode": 200}	f9cda0ae-4531-4518-9099-cede71d9caa6	15e35919-cc42-42b9-b291-6fae96a073bf	{}
27c5cf6b-8381-472c-ac39-7ded4b0c24a3	uploads	usuarios/1729769787547000.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-24 11:36:28.576329+00	2024-10-24 11:36:28.576329+00	2024-10-24 11:36:28.576329+00	{"eTag": "\\"24fef8f4b74064540e1784745536b47b\\"", "size": 34083, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-24T11:36:29.000Z", "contentLength": 34083, "httpStatusCode": 200}	a50f2e19-095c-4ea1-bfea-b4457bfc011c	15e35919-cc42-42b9-b291-6fae96a073bf	{}
1f6b2201-e8ac-49f6-a0df-cd3d40af3098	uploads	usuarios/1729771218750000.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-24 12:00:19.782209+00	2024-10-24 12:00:19.782209+00	2024-10-24 12:00:19.782209+00	{"eTag": "\\"22ef0c8d13a4d8a46c9183b47ca7f0bc\\"", "size": 29193, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-24T12:00:20.000Z", "contentLength": 29193, "httpStatusCode": 200}	fe0c8578-99f7-4f2b-b458-9c92bd068026	15e35919-cc42-42b9-b291-6fae96a073bf	{}
43cbcb09-e170-438d-9d4b-2078f16feed7	uploads	usuarios/1730892113974000.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-11-06 11:21:54.911041+00	2024-11-06 11:21:54.911041+00	2024-11-06 11:21:54.911041+00	{"eTag": "\\"c342e59c7f06c02d0ea0e8bfe5cd291a\\"", "size": 22241, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-11-06T11:21:55.000Z", "contentLength": 22241, "httpStatusCode": 200}	2f9d9f11-9cb6-4438-9a2b-1ccf4976e78c	15e35919-cc42-42b9-b291-6fae96a073bf	{}
39824a3e-6f7c-4bf9-a449-5d7c3c8378ff	uploads	usuarios/1729771274744000.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-24 12:01:16.703138+00	2024-10-24 12:01:16.703138+00	2024-10-24 12:01:16.703138+00	{"eTag": "\\"676d37433e90fdd4c52832356f2d569d\\"", "size": 30645, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-24T12:01:16.000Z", "contentLength": 30645, "httpStatusCode": 200}	525d0cc2-3c68-4b08-a68d-4c87d7bc8dd2	15e35919-cc42-42b9-b291-6fae96a073bf	{}
1032e605-d5f2-488b-aa26-ce1d35773db6	uploads	faccoes/1729772171094000.jpeg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-24 12:16:12.127057+00	2024-10-24 12:16:12.127057+00	2024-10-24 12:16:12.127057+00	{"eTag": "\\"2534f1dece3fd1c80dad3a5d841093fc\\"", "size": 11568, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-24T12:16:13.000Z", "contentLength": 11568, "httpStatusCode": 200}	7898a5b1-8335-404b-b6cc-65a93a3b0db1	15e35919-cc42-42b9-b291-6fae96a073bf	{}
8a1b950b-46ac-4af3-a756-4ff1bf03d6c1	uploads	usuarios/1729773069616000.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-24 12:31:10.899643+00	2024-10-24 12:31:10.899643+00	2024-10-24 12:31:10.899643+00	{"eTag": "\\"24fef8f4b74064540e1784745536b47b\\"", "size": 34083, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-24T12:31:11.000Z", "contentLength": 34083, "httpStatusCode": 200}	9b7a9c65-aff5-4b89-aacf-2947aaa270cc	15e35919-cc42-42b9-b291-6fae96a073bf	{}
8a0d9a45-ae10-4777-a531-1de2fbcf2dad	uploads	usuarios/1729773849445000.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-24 12:44:10.493311+00	2024-10-24 12:44:10.493311+00	2024-10-24 12:44:10.493311+00	{"eTag": "\\"676d37433e90fdd4c52832356f2d569d\\"", "size": 30645, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-24T12:44:11.000Z", "contentLength": 30645, "httpStatusCode": 200}	fe03a14e-9cb9-43f5-8416-778dca3f27b2	15e35919-cc42-42b9-b291-6fae96a073bf	{}
d25f5be8-c788-4ce9-a4b8-74a7687cc9d1	uploads	usuarios/1729773916412000.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-24 12:45:17.335339+00	2024-10-24 12:45:17.335339+00	2024-10-24 12:45:17.335339+00	{"eTag": "\\"4130263f86f6b1c2e7e52111b44423d2\\"", "size": 15396, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-24T12:45:18.000Z", "contentLength": 15396, "httpStatusCode": 200}	4eb99c8c-1670-41c1-be98-7b1c926859e1	15e35919-cc42-42b9-b291-6fae96a073bf	{}
a2e39ef6-df11-446b-b23d-7efb90e8b044	uploads	faccoes/1729773969484000.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-24 12:46:10.552572+00	2024-10-24 12:46:10.552572+00	2024-10-24 12:46:10.552572+00	{"eTag": "\\"4ba727ceb337963e7fa9956c8aa24192\\"", "size": 15611, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-24T12:46:11.000Z", "contentLength": 15611, "httpStatusCode": 200}	e97e5936-0049-4f5f-a5d5-947d8b4b0036	15e35919-cc42-42b9-b291-6fae96a073bf	{}
d25eee72-c6bb-4d55-8e47-979b3669d815	uploads	usuarios/1729774453303000.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-24 12:54:14.258707+00	2024-10-24 12:54:14.258707+00	2024-10-24 12:54:14.258707+00	{"eTag": "\\"93ca816bfca74f49b6357b8daa5bf181\\"", "size": 11142, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-24T12:54:15.000Z", "contentLength": 11142, "httpStatusCode": 200}	716dec63-3d16-4ad4-a629-429f207d6f83	15e35919-cc42-42b9-b291-6fae96a073bf	{}
4ef909ff-62ef-4674-bd54-38d3bc336c87	uploads	faccoes/1729775860823000.jpeg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-24 13:17:42.125489+00	2024-10-24 13:17:42.125489+00	2024-10-24 13:17:42.125489+00	{"eTag": "\\"b391477e396fed118a39ef71644afce4\\"", "size": 31747, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-24T13:17:43.000Z", "contentLength": 31747, "httpStatusCode": 200}	ec06b9d6-a0ef-4994-adca-64032202f74c	15e35919-cc42-42b9-b291-6fae96a073bf	{}
7c818975-ed90-4da3-a01b-f17b34488546	uploads	usuarios/1729775909377000.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-24 13:18:30.405375+00	2024-10-24 13:18:30.405375+00	2024-10-24 13:18:30.405375+00	{"eTag": "\\"676d37433e90fdd4c52832356f2d569d\\"", "size": 30645, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-24T13:18:31.000Z", "contentLength": 30645, "httpStatusCode": 200}	0360acd2-9d0d-43da-a6da-c20fe4376fb6	15e35919-cc42-42b9-b291-6fae96a073bf	{}
952b36cf-7cfe-4a70-9703-45b022a89a32	uploads	usuarios/1729780979327000.jpeg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-24 14:43:00.587775+00	2024-10-24 14:43:00.587775+00	2024-10-24 14:43:00.587775+00	{"eTag": "\\"2534f1dece3fd1c80dad3a5d841093fc\\"", "size": 11568, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-24T14:43:01.000Z", "contentLength": 11568, "httpStatusCode": 200}	c9d32023-4dcd-4228-aa8b-88b08d049963	15e35919-cc42-42b9-b291-6fae96a073bf	{}
e7102949-f1ae-430a-aba6-1336a15ea902	uploads	membros/1730925534718000_0.JPG	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	2024-11-06 20:38:56.711591+00	2024-11-06 20:38:56.711591+00	2024-11-06 20:38:56.711591+00	{"eTag": "\\"8e75dc108124dc261ebd2c1ed0671979\\"", "size": 11810, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-11-06T20:38:57.000Z", "contentLength": 11810, "httpStatusCode": 200}	13ce1ccf-d4a8-4fa8-b3e9-1fad3a409da0	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	{}
a6738dde-89ed-426f-ba17-8a3fc0a1f53a	uploads	usuarios/1729781044151000.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-24 14:44:05.578597+00	2024-10-24 14:44:05.578597+00	2024-10-24 14:44:05.578597+00	{"eTag": "\\"116bd289413a60be30be595bea27d48c\\"", "size": 22278, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-24T14:44:06.000Z", "contentLength": 22278, "httpStatusCode": 200}	127166bf-3743-47d6-a2b2-d50303f5191f	15e35919-cc42-42b9-b291-6fae96a073bf	{}
92604a20-b103-4a70-a9b6-8dad3fa3f289	uploads	usuarios/1729781128205000.jpg	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-24 14:45:29.291892+00	2024-10-24 14:45:29.291892+00	2024-10-24 14:45:29.291892+00	{"eTag": "\\"233a8ee1b37789a23037dfb28b4ed04a\\"", "size": 9642, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-10-24T14:45:30.000Z", "contentLength": 9642, "httpStatusCode": 200}	45810fbe-3ca6-4800-9519-6a6a908f6c60	15e35919-cc42-42b9-b291-6fae96a073bf	{}
304e6b63-127e-4178-92a3-20b166f9e52c	uploads	membros/1730925547000000_0.JPG	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	2024-11-06 20:39:08.392985+00	2024-11-06 20:39:08.392985+00	2024-11-06 20:39:08.392985+00	{"eTag": "\\"8e75dc108124dc261ebd2c1ed0671979\\"", "size": 11810, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-11-06T20:39:09.000Z", "contentLength": 11810, "httpStatusCode": 200}	a95b6693-c650-45a5-a109-9cfa54f0fd14	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	{}
e82f9b00-70fa-4df8-b3b1-2931dc9579f7	uploads	faccoes/1729806576068000.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-24 21:49:37.2967+00	2024-10-24 21:49:37.2967+00	2024-10-24 21:49:37.2967+00	{"eTag": "\\"4ba727ceb337963e7fa9956c8aa24192\\"", "size": 15611, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-24T21:49:38.000Z", "contentLength": 15611, "httpStatusCode": 200}	43889394-3d39-4a73-978a-fd22ccc3067d	15e35919-cc42-42b9-b291-6fae96a073bf	{}
5db9cf47-9e50-493f-b8f7-e131b78a4f9c	uploads	membros/1730925567419000_0.JPG	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	2024-11-06 20:39:28.502281+00	2024-11-06 20:39:28.502281+00	2024-11-06 20:39:28.502281+00	{"eTag": "\\"8e75dc108124dc261ebd2c1ed0671979\\"", "size": 11810, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-11-06T20:39:29.000Z", "contentLength": 11810, "httpStatusCode": 200}	4b82d1e6-fd18-47bf-ba66-25f96f376c6d	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	{}
d2550f05-4948-4460-b4a6-2e1d60955ead	uploads	membros/1730205830491000_0.PNG	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	2024-10-29 12:43:51.293372+00	2024-10-29 12:43:51.293372+00	2024-10-29 12:43:51.293372+00	{"eTag": "\\"22a988a2817bda5616437ad0ae46da01\\"", "size": 36448, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-29T12:43:52.000Z", "contentLength": 36448, "httpStatusCode": 200}	d89b97f1-c60c-4211-8845-c6f1a4f536e1	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	{}
be0682e3-68df-4b49-ad79-454f14a7f3b2	uploads	membros/1730205838734000_0.PNG	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	2024-10-29 12:43:59.119566+00	2024-10-29 12:43:59.119566+00	2024-10-29 12:43:59.119566+00	{"eTag": "\\"22a988a2817bda5616437ad0ae46da01\\"", "size": 36448, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-29T12:44:00.000Z", "contentLength": 36448, "httpStatusCode": 200}	3d3d115b-de07-4eb1-b183-ab91706b0c1b	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	{}
9876d086-4c95-4297-b452-75a53d3d984f	uploads	membros/1730206696464000_0.PNG	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	2024-10-29 12:58:17.214721+00	2024-10-29 12:58:17.214721+00	2024-10-29 12:58:17.214721+00	{"eTag": "\\"22a988a2817bda5616437ad0ae46da01\\"", "size": 36448, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-29T12:58:18.000Z", "contentLength": 36448, "httpStatusCode": 200}	a27478c8-a474-4756-b335-71aad5dc1a70	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	{}
20ff72c6-608e-45b7-bd03-6317af2ff562	uploads	membros/1730206750348000_0.PNG	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	2024-10-29 12:59:11.125448+00	2024-10-29 12:59:11.125448+00	2024-10-29 12:59:11.125448+00	{"eTag": "\\"22a988a2817bda5616437ad0ae46da01\\"", "size": 36448, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-29T12:59:12.000Z", "contentLength": 36448, "httpStatusCode": 200}	5f681142-0084-44ce-9d39-371309791830	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	{}
4fda364c-e7c8-4a95-a76a-e00dba5802d7	uploads	usuarios/1730988303809000.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-11-07 14:05:05.337578+00	2024-11-07 14:05:05.337578+00	2024-11-07 14:05:05.337578+00	{"eTag": "\\"a5a74569fba6174f3d34ce07cc8e80b8\\"", "size": 5021, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-11-07T14:05:06.000Z", "contentLength": 5021, "httpStatusCode": 200}	55eda021-07cf-422a-8a7e-a2e8e4b8e489	15e35919-cc42-42b9-b291-6fae96a073bf	{}
2a2d7f39-b3de-4f29-8eff-0cc96d55d6f7	uploads	membros/1730208055610000_0.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-29 13:20:57.084434+00	2024-10-29 13:20:57.084434+00	2024-10-29 13:20:57.084434+00	{"eTag": "\\"93537f3b6320df78ca16e776f6e1a19f\\"", "size": 10388, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-29T13:20:58.000Z", "contentLength": 10388, "httpStatusCode": 200}	2252f33d-3c98-438e-b06a-bc8f6ce83916	15e35919-cc42-42b9-b291-6fae96a073bf	{}
a84ddb2b-33e8-4114-a916-9d1638779afe	uploads	membros/1730208055610000_2.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-29 13:20:57.133723+00	2024-10-29 13:20:57.133723+00	2024-10-29 13:20:57.133723+00	{"eTag": "\\"8c66829bdb4997cc7c6fd0d13adcba16\\"", "size": 9986, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-29T13:20:58.000Z", "contentLength": 9986, "httpStatusCode": 200}	cdf1f6e1-a2e3-4870-89d2-58ab2a21fe95	15e35919-cc42-42b9-b291-6fae96a073bf	{}
a5942edf-b1be-4f50-8daf-785b1cd1eda5	uploads	membros/1730208055610000_4.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-29 13:20:56.98777+00	2024-10-29 13:20:56.98777+00	2024-10-29 13:20:56.98777+00	{"eTag": "\\"4a3098d7bc0561917461be546baf95a5\\"", "size": 9706, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-29T13:20:57.000Z", "contentLength": 9706, "httpStatusCode": 200}	26fb085c-5702-4a1d-b604-0e1e96c72d89	15e35919-cc42-42b9-b291-6fae96a073bf	{}
d5ea83f7-4ada-427e-8f60-16d1aa479a43	uploads	membros/1731430751337000_0.JPG	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	2024-11-12 16:59:13.702515+00	2024-11-12 16:59:13.702515+00	2024-11-12 16:59:13.702515+00	{"eTag": "\\"06ea41b812b22e9fb9195a6fd736ae77\\"", "size": 11055, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-11-12T16:59:14.000Z", "contentLength": 11055, "httpStatusCode": 200}	483c5c32-6f87-4dbf-8598-3408da06dd3f	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	{}
649f7b68-4123-4e9e-b0bb-52841c19e064	uploads	membros/1731430787613000_0.JPG	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	2024-11-12 16:59:49.954038+00	2024-11-12 16:59:49.954038+00	2024-11-12 16:59:49.954038+00	{"eTag": "\\"06ea41b812b22e9fb9195a6fd736ae77\\"", "size": 11055, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-11-12T16:59:50.000Z", "contentLength": 11055, "httpStatusCode": 200}	288e9c68-9975-4dd9-a9b0-33a25472eca0	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	{}
a3eccd94-3053-40ef-9d00-96eb0a748574	uploads	membros/1730208055610000_1.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-29 13:20:57.181492+00	2024-10-29 13:20:57.181492+00	2024-10-29 13:20:57.181492+00	{"eTag": "\\"694ec625dae5a806fc13cd3390819f71\\"", "size": 9953, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-29T13:20:58.000Z", "contentLength": 9953, "httpStatusCode": 200}	b10972c8-13ec-4c7a-bff5-08ba75fa6e8d	15e35919-cc42-42b9-b291-6fae96a073bf	{}
33c417c9-5889-4667-a242-4e2d9dfedc22	uploads	membros/1731431096619000_0.JPG	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	2024-11-12 17:04:59.030818+00	2024-11-12 17:04:59.030818+00	2024-11-12 17:04:59.030818+00	{"eTag": "\\"207780b8e09d4dcdd0bb7398e60a4adc\\"", "size": 10637, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-11-12T17:04:59.000Z", "contentLength": 10637, "httpStatusCode": 200}	48d0e506-de19-4118-ae36-85f858ea5b5e	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	{}
d44af7b1-b4a0-4949-b0a6-b4bed85ec770	uploads	membros/1730208055610000_3.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-29 13:20:57.1469+00	2024-10-29 13:20:57.1469+00	2024-10-29 13:20:57.1469+00	{"eTag": "\\"f12431a565776df39bfa3cd840e42104\\"", "size": 7661, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-29T13:20:58.000Z", "contentLength": 7661, "httpStatusCode": 200}	3374815b-a895-4748-a1af-5cc31b7b499d	15e35919-cc42-42b9-b291-6fae96a073bf	{}
6de71961-1c95-4923-bdcc-159213e4fad8	uploads	membros/1730461453715000_0.PNG	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	2024-11-01 11:44:14.032036+00	2024-11-01 11:44:14.032036+00	2024-11-01 11:44:14.032036+00	{"eTag": "\\"22a988a2817bda5616437ad0ae46da01\\"", "size": 36448, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-11-01T11:44:14.000Z", "contentLength": 36448, "httpStatusCode": 200}	04f3b9e6-c005-410f-80e5-7b01a56575ad	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	{}
75e4d842-adf7-44b0-9238-9c18306724c9	uploads	membros/1731431413214000_0.JPG	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	2024-11-12 17:10:15.599915+00	2024-11-12 17:10:15.599915+00	2024-11-12 17:10:15.599915+00	{"eTag": "\\"207780b8e09d4dcdd0bb7398e60a4adc\\"", "size": 10637, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-11-12T17:10:16.000Z", "contentLength": 10637, "httpStatusCode": 200}	906528b0-f72a-4854-b6a4-b6d6daac27a2	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	{}
7013c05c-da0a-496a-80e6-9bcc95fdc6a2	uploads	membros/1730461469453000_0.PNG	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	2024-11-01 11:44:29.461253+00	2024-11-01 11:44:29.461253+00	2024-11-01 11:44:29.461253+00	{"eTag": "\\"22a988a2817bda5616437ad0ae46da01\\"", "size": 36448, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-11-01T11:44:30.000Z", "contentLength": 36448, "httpStatusCode": 200}	70647913-d95a-4590-90f7-9ea92b664c8b	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	{}
255af1cd-ca63-490a-acf6-920fbdef9a2b	uploads	membros/1730461486918000_0.PNG	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	2024-11-01 11:44:47.282607+00	2024-11-01 11:44:47.282607+00	2024-11-01 11:44:47.282607+00	{"eTag": "\\"22a988a2817bda5616437ad0ae46da01\\"", "size": 36448, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-11-01T11:44:48.000Z", "contentLength": 36448, "httpStatusCode": 200}	f92af84f-6004-43ca-812d-52d88d0e1bb7	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	{}
359d2655-6993-4add-bc11-8eaba845a222	uploads	membros/1730227795550000_2.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-29 18:49:56.482805+00	2024-10-29 18:49:56.482805+00	2024-10-29 18:49:56.482805+00	{"eTag": "\\"a3b00ae9b697d25934fe3dbd2ae87ecd\\"", "size": 8990, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-29T18:49:57.000Z", "contentLength": 8990, "httpStatusCode": 200}	5a173c80-1269-4394-a058-a240572300af	15e35919-cc42-42b9-b291-6fae96a073bf	{}
3a494629-13c5-46f9-b761-d57a5bd75dcf	uploads	faccoes/1731499817284000.JPG	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	2024-11-13 12:10:20.848815+00	2024-11-13 12:10:20.848815+00	2024-11-13 12:10:20.848815+00	{"eTag": "\\"4e53c5c4949dd797343d6833cd919ee3\\"", "size": 10076, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-11-13T12:10:21.000Z", "contentLength": 10076, "httpStatusCode": 200}	de25e038-53f9-4da6-95d8-b05f909ff3cd	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	{}
f2a44284-e27a-4d8b-9d07-a6f6de8a4c87	uploads	membros/1730227795550000_3.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-29 18:49:56.407685+00	2024-10-29 18:49:56.407685+00	2024-10-29 18:49:56.407685+00	{"eTag": "\\"e84292e9fb3453398e2b42dd41bc9880\\"", "size": 73625, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-29T18:49:57.000Z", "contentLength": 73625, "httpStatusCode": 200}	d4deff20-c0e6-432e-b0ef-ac09a2e656aa	15e35919-cc42-42b9-b291-6fae96a073bf	{}
f33dca83-4763-4f70-8f56-2c9cb581c8b6	uploads	membros/1730227795550000_1.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-29 18:49:56.797652+00	2024-10-29 18:49:56.797652+00	2024-10-29 18:49:56.797652+00	{"eTag": "\\"d09c7fa95e8458a7f836ee53a0bd7e75\\"", "size": 51213, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-29T18:49:57.000Z", "contentLength": 51213, "httpStatusCode": 200}	d4ae78a3-81db-423b-a165-150ffbcfac61	15e35919-cc42-42b9-b291-6fae96a073bf	{}
4dca2dcd-4983-4745-955c-6a7a7c112a41	uploads	membros/1732540213985000_2.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-11-25 13:10:14.966752+00	2024-11-25 13:10:14.966752+00	2024-11-25 13:10:14.966752+00	{"eTag": "\\"ce9a0646e61fbe9fb9dd22c86dea0e1b\\"", "size": 89292, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-11-25T13:10:15.000Z", "contentLength": 89292, "httpStatusCode": 200}	1e7632fa-2082-45f9-988e-1428ece299cb	15e35919-cc42-42b9-b291-6fae96a073bf	{}
9e4a4f3b-9d80-41fd-89db-62b261d02897	uploads	membros/1732540213985000_1.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-11-25 13:10:15.235668+00	2024-11-25 13:10:15.235668+00	2024-11-25 13:10:15.235668+00	{"eTag": "\\"5ebb2c79eb739c918cbcee81bba061a8\\"", "size": 63920, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-11-25T13:10:16.000Z", "contentLength": 63920, "httpStatusCode": 200}	469e5c96-39c6-49be-b6f1-735af0985709	15e35919-cc42-42b9-b291-6fae96a073bf	{}
c94b179a-0adc-48d1-af7f-5d2092cca2e3	uploads	membros/1730227795550000_0.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-29 18:49:56.540891+00	2024-10-29 18:49:56.540891+00	2024-10-29 18:49:56.540891+00	{"eTag": "\\"60b11f4452028b4fe4c396af480beb4d\\"", "size": 52898, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-29T18:49:57.000Z", "contentLength": 52898, "httpStatusCode": 200}	14ddfae2-1bf9-404c-8b07-0cfb9a496fc0	15e35919-cc42-42b9-b291-6fae96a073bf	{}
2aa4b269-b65e-4a2b-acab-0765d36800fb	uploads	membros/1732540213985000_0.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-11-25 13:10:15.228871+00	2024-11-25 13:10:15.228871+00	2024-11-25 13:10:15.228871+00	{"eTag": "\\"a503999e4f283a0f2f0606a431d907a0\\"", "size": 6936, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-11-25T13:10:16.000Z", "contentLength": 6936, "httpStatusCode": 200}	4f3f13e2-f0af-4a30-99d5-21b0cfbb5129	15e35919-cc42-42b9-b291-6fae96a073bf	{}
5157befa-73b7-4c6b-9930-15594984f2a5	uploads	membros/1732563822094000_0.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-11-25 19:43:43.250059+00	2024-11-25 19:43:43.250059+00	2024-11-25 19:43:43.250059+00	{"eTag": "\\"ce9a0646e61fbe9fb9dd22c86dea0e1b\\"", "size": 89292, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-11-25T19:43:44.000Z", "contentLength": 89292, "httpStatusCode": 200}	c26cfa32-c1fc-4dad-b3f0-2814886e25e9	15e35919-cc42-42b9-b291-6fae96a073bf	{}
f4d18db7-e3c5-4871-adf8-5c8854a2b405	uploads	membros/1730227948378000_2.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-29 18:52:30.059326+00	2024-10-29 18:52:30.059326+00	2024-10-29 18:52:30.059326+00	{"eTag": "\\"a3b00ae9b697d25934fe3dbd2ae87ecd\\"", "size": 8990, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-29T18:52:30.000Z", "contentLength": 8990, "httpStatusCode": 200}	85196cf8-afde-40b5-a4e8-659273e144eb	15e35919-cc42-42b9-b291-6fae96a073bf	{}
cb323165-ed8c-4766-bdd5-599a14620e94	uploads	membros/1732563929732000_0.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-11-25 19:45:30.960695+00	2024-11-25 19:45:30.960695+00	2024-11-25 19:45:30.960695+00	{"eTag": "\\"5ebb2c79eb739c918cbcee81bba061a8\\"", "size": 63920, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-11-25T19:45:31.000Z", "contentLength": 63920, "httpStatusCode": 200}	0d37f68f-5e4c-436f-bafb-0f105274a562	15e35919-cc42-42b9-b291-6fae96a073bf	{}
6e774721-6421-4d34-9fc3-f1483168013b	uploads	membros/1730227948378000_0.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-29 18:52:29.843311+00	2024-10-29 18:52:29.843311+00	2024-10-29 18:52:29.843311+00	{"eTag": "\\"60b11f4452028b4fe4c396af480beb4d\\"", "size": 52898, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-29T18:52:30.000Z", "contentLength": 52898, "httpStatusCode": 200}	dc5e459e-d01d-4970-9c35-5d74ca1a1956	15e35919-cc42-42b9-b291-6fae96a073bf	{}
836f47e4-0024-4928-8991-b456e42d2065	uploads	membros/1732563929732000_1.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-11-25 19:45:30.57051+00	2024-11-25 19:45:30.57051+00	2024-11-25 19:45:30.57051+00	{"eTag": "\\"ce9a0646e61fbe9fb9dd22c86dea0e1b\\"", "size": 89292, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-11-25T19:45:31.000Z", "contentLength": 89292, "httpStatusCode": 200}	3006f765-5263-40d1-b7bb-532bac80a607	15e35919-cc42-42b9-b291-6fae96a073bf	{}
a2cfebbd-0c2f-495e-a3f1-43253ec3ad59	uploads	membros/1730227948378000_1.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-29 18:52:30.179642+00	2024-10-29 18:52:30.179642+00	2024-10-29 18:52:30.179642+00	{"eTag": "\\"d09c7fa95e8458a7f836ee53a0bd7e75\\"", "size": 51213, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-29T18:52:31.000Z", "contentLength": 51213, "httpStatusCode": 200}	9c6c6b71-9187-41a6-a22c-672b5dfe099c	15e35919-cc42-42b9-b291-6fae96a073bf	{}
d52294d8-ca48-42d0-8db6-22c449ac04da	uploads	membros/1730227948378000_3.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-29 18:52:30.5842+00	2024-10-29 18:52:30.5842+00	2024-10-29 18:52:30.5842+00	{"eTag": "\\"e84292e9fb3453398e2b42dd41bc9880\\"", "size": 73625, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-29T18:52:31.000Z", "contentLength": 73625, "httpStatusCode": 200}	361f8b08-9c93-4321-bc93-346ea2f0f77f	15e35919-cc42-42b9-b291-6fae96a073bf	{}
aa5e4d60-2376-489e-80de-3c678d8a8cd7	uploads	membros/1732565391829000_1.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-11-25 20:09:54.04389+00	2024-11-25 20:09:54.04389+00	2024-11-25 20:09:54.04389+00	{"eTag": "\\"ce9a0646e61fbe9fb9dd22c86dea0e1b\\"", "size": 89292, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-11-25T20:09:54.000Z", "contentLength": 89292, "httpStatusCode": 200}	19235b61-5260-4717-a451-fc9507081c75	15e35919-cc42-42b9-b291-6fae96a073bf	{}
2af31add-c43f-43f4-a479-b45e8b490f05	uploads	membros/1732565423381000_1.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-11-25 20:10:24.71049+00	2024-11-25 20:10:24.71049+00	2024-11-25 20:10:24.71049+00	{"eTag": "\\"ce9a0646e61fbe9fb9dd22c86dea0e1b\\"", "size": 89292, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-11-25T20:10:25.000Z", "contentLength": 89292, "httpStatusCode": 200}	b93eded1-3223-4269-93c2-293db9ef2966	15e35919-cc42-42b9-b291-6fae96a073bf	{}
fc9c60da-d0a4-4ed3-a971-8d81de8a7b4c	uploads	membros/1732565391829000_0.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-11-25 20:09:53.284311+00	2024-11-25 20:09:53.284311+00	2024-11-25 20:09:53.284311+00	{"eTag": "\\"5ebb2c79eb739c918cbcee81bba061a8\\"", "size": 63920, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-11-25T20:09:54.000Z", "contentLength": 63920, "httpStatusCode": 200}	b064ce72-2e91-47f2-96b5-f1c816f60805	15e35919-cc42-42b9-b291-6fae96a073bf	{}
9b93645c-f165-4f08-afbe-4b39227dc75f	uploads	membros/1730283214591000_4.png	440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8	2024-10-30 10:13:35.822282+00	2024-10-30 10:13:35.822282+00	2024-10-30 10:13:35.822282+00	{"eTag": "\\"0e5d7f1f7504c28a82c34d6a3b37aa5e\\"", "size": 10267, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-30T10:13:36.000Z", "contentLength": 10267, "httpStatusCode": 200}	2bc4b9c1-faa7-418e-a01b-3b14e47fd4bc	440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8	{}
7f044fcd-6c71-4ed1-99fb-60311ffe1863	uploads	membros/1732565423381000_0.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-11-25 20:10:24.610683+00	2024-11-25 20:10:24.610683+00	2024-11-25 20:10:24.610683+00	{"eTag": "\\"5ebb2c79eb739c918cbcee81bba061a8\\"", "size": 63920, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-11-25T20:10:25.000Z", "contentLength": 63920, "httpStatusCode": 200}	b05a1e71-277a-4c0b-b30f-0cfa9d7cbcb0	15e35919-cc42-42b9-b291-6fae96a073bf	{}
9a850416-1c37-4d16-b4c8-3e3185ecbf53	uploads	membros/1730283214591000_3.png	440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8	2024-10-30 10:13:35.815538+00	2024-10-30 10:13:35.815538+00	2024-10-30 10:13:35.815538+00	{"eTag": "\\"1cf4ee90f1d30613d830ecb96b8b81d8\\"", "size": 7657, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-30T10:13:36.000Z", "contentLength": 7657, "httpStatusCode": 200}	7e4a9cf1-6d40-4af5-836c-2387fbe6b2d4	440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8	{}
926678d0-d26d-4073-83bd-c3940b39df9f	uploads	membros/1732614119337000_0.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-11-26 09:42:00.415982+00	2024-11-26 09:42:00.415982+00	2024-11-26 09:42:00.415982+00	{"eTag": "\\"ce9a0646e61fbe9fb9dd22c86dea0e1b\\"", "size": 89292, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-11-26T09:42:01.000Z", "contentLength": 89292, "httpStatusCode": 200}	94e5aaf5-ac48-49b8-b305-bfab2400906b	15e35919-cc42-42b9-b291-6fae96a073bf	{}
3e296942-0e90-4cb6-b53d-e6e1a1dde9a7	uploads	membros/1730283214590000_2.png	440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8	2024-10-30 10:13:35.814575+00	2024-10-30 10:13:35.814575+00	2024-10-30 10:13:35.814575+00	{"eTag": "\\"cd3da90b35e9803cc4971ce97e1371fb\\"", "size": 10462, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-30T10:13:36.000Z", "contentLength": 10462, "httpStatusCode": 200}	dfbceb23-9db4-4985-b835-e5b66665dcc9	440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8	{}
6ee0cf2f-a26f-4593-a4c1-f41482877f65	uploads	membros/1732617532290000_0.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-11-26 10:38:53.706982+00	2024-11-26 10:38:53.706982+00	2024-11-26 10:38:53.706982+00	{"eTag": "\\"ce9a0646e61fbe9fb9dd22c86dea0e1b\\"", "size": 89292, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-11-26T10:38:54.000Z", "contentLength": 89292, "httpStatusCode": 200}	49d218ab-b607-4794-8fb5-ce910e179966	15e35919-cc42-42b9-b291-6fae96a073bf	{}
9c5dec86-ec07-4f8d-93ef-66e536265487	uploads	membros/1730283214590000_1.png	440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8	2024-10-30 10:13:35.790329+00	2024-10-30 10:13:35.790329+00	2024-10-30 10:13:35.790329+00	{"eTag": "\\"d3d5051adf9e06c59bbfeede04860e30\\"", "size": 8498, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-30T10:13:36.000Z", "contentLength": 8498, "httpStatusCode": 200}	5afd3bd0-2861-4cd5-904e-8b04625df497	440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8	{}
88b75ef5-eb88-4b32-a6e7-bb15435676d5	uploads	membros/1732621313963000_0.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-11-26 11:41:55.034183+00	2024-11-26 11:41:55.034183+00	2024-11-26 11:41:55.034183+00	{"eTag": "\\"e84292e9fb3453398e2b42dd41bc9880\\"", "size": 73625, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-11-26T11:41:55.000Z", "contentLength": 73625, "httpStatusCode": 200}	a1ac6e4d-ef82-4862-8e4a-d7c3c97cecad	15e35919-cc42-42b9-b291-6fae96a073bf	{}
9122314a-952c-47e0-80d6-98627492dcd1	uploads	membros/1730283214590000_0.png	440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8	2024-10-30 10:13:35.78055+00	2024-10-30 10:13:35.78055+00	2024-10-30 10:13:35.78055+00	{"eTag": "\\"7309724bf12cb8aa8912e3451548810d\\"", "size": 63337, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-30T10:13:36.000Z", "contentLength": 63337, "httpStatusCode": 200}	983a75ac-ec5a-47c2-80cb-c52442bd0b19	440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8	{}
7bd22ed8-dab4-43ec-a674-df6f10bd103c	uploads	membros/1732814965526000_0.PNG	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	2024-11-28 17:29:29.358944+00	2024-11-28 17:29:29.358944+00	2024-11-28 17:29:29.358944+00	{"eTag": "\\"218f7d2a0c88a246d36915bbd22cbd6c\\"", "size": 23307, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-11-28T17:29:30.000Z", "contentLength": 23307, "httpStatusCode": 200}	91e4affb-85bb-483d-b9f7-ad66f6c1dbaf	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	{}
d05e9cf9-4c56-4f78-ba64-42ddcce9d8af	uploads	membros/1732815040674000_0.PNG	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	2024-11-28 17:30:44.505923+00	2024-11-28 17:30:44.505923+00	2024-11-28 17:30:44.505923+00	{"eTag": "\\"218f7d2a0c88a246d36915bbd22cbd6c\\"", "size": 23307, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-11-28T17:30:45.000Z", "contentLength": 23307, "httpStatusCode": 200}	daa96a52-c3cc-4315-8cde-e618a6d97e67	9f3507a5-e0b8-4aeb-9012-addb365fc0e6	{}
4afde9d2-f418-4514-b2ad-13a271599998	uploads	membros/1730284509547000_1.png	440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8	2024-10-30 10:35:10.550358+00	2024-10-30 10:35:10.550358+00	2024-10-30 10:35:10.550358+00	{"eTag": "\\"d3d5051adf9e06c59bbfeede04860e30\\"", "size": 8498, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-30T10:35:11.000Z", "contentLength": 8498, "httpStatusCode": 200}	d473980c-e5a1-498f-a80a-2b88d46cd164	440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8	{}
6bc0915c-2ed2-4720-9f34-4b7668a757b8	uploads	membros/1733230107788000_0.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-12-03 12:48:28.78032+00	2024-12-03 12:48:28.78032+00	2024-12-03 12:48:28.78032+00	{"eTag": "\\"e84292e9fb3453398e2b42dd41bc9880\\"", "size": 73625, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-12-03T12:48:29.000Z", "contentLength": 73625, "httpStatusCode": 200}	0c1270c2-fd90-4e48-a549-8d43625a319b	15e35919-cc42-42b9-b291-6fae96a073bf	{}
c35c75c9-e90a-483f-8b77-4cd81dcbcc79	uploads	membros/1730284509547000_4.png	440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8	2024-10-30 10:35:10.519627+00	2024-10-30 10:35:10.519627+00	2024-10-30 10:35:10.519627+00	{"eTag": "\\"0e5d7f1f7504c28a82c34d6a3b37aa5e\\"", "size": 10267, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-30T10:35:11.000Z", "contentLength": 10267, "httpStatusCode": 200}	df65e908-adee-4022-86e9-225f61e13ad9	440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8	{}
fefee986-8964-4db4-88ed-336d7d82a5ae	uploads	membros/1734010206953000_0.jpeg	1073b901-a06e-4f42-b5d3-d2359047b2cf	2024-12-12 13:30:07.915456+00	2024-12-12 13:30:07.915456+00	2024-12-12 13:30:07.915456+00	{"eTag": "\\"2128cb7482ccdaa70aa1a2d59084afba\\"", "size": 33855, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2024-12-12T13:30:08.000Z", "contentLength": 33855, "httpStatusCode": 200}	584bdc60-028c-4e53-9da2-7772770f2c02	1073b901-a06e-4f42-b5d3-d2359047b2cf	{}
c8e40849-8c91-4978-afa2-69d1320fd37b	uploads	membros/1730284509547000_2.png	440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8	2024-10-30 10:35:10.491359+00	2024-10-30 10:35:10.491359+00	2024-10-30 10:35:10.491359+00	{"eTag": "\\"cd3da90b35e9803cc4971ce97e1371fb\\"", "size": 10462, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-30T10:35:11.000Z", "contentLength": 10462, "httpStatusCode": 200}	e00dbe9f-5250-4a06-b0a5-fd3419ab7c17	440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8	{}
3c337896-97a4-46ac-8154-d3b69a0de9a4	uploads	membros/1730284509547000_3.png	440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8	2024-10-30 10:35:10.468011+00	2024-10-30 10:35:10.468011+00	2024-10-30 10:35:10.468011+00	{"eTag": "\\"1cf4ee90f1d30613d830ecb96b8b81d8\\"", "size": 7657, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-30T10:35:11.000Z", "contentLength": 7657, "httpStatusCode": 200}	77e02aa0-b3bf-4def-9b1e-605094ab4479	440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8	{}
d0b13a6b-1dc1-488b-a35f-2d0d79c5a5a6	uploads	membros/1730284509547000_0.png	440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8	2024-10-30 10:35:10.44544+00	2024-10-30 10:35:10.44544+00	2024-10-30 10:35:10.44544+00	{"eTag": "\\"7309724bf12cb8aa8912e3451548810d\\"", "size": 63337, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-30T10:35:11.000Z", "contentLength": 63337, "httpStatusCode": 200}	d34fc352-c9ec-4105-bd7d-2c6b5cc0cfc9	440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8	{}
f4dcbb49-5a82-41e1-a39f-158a2fb74197	uploads	membros/1730284509547000_5.png	440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8	2024-10-30 10:35:10.462526+00	2024-10-30 10:35:10.462526+00	2024-10-30 10:35:10.462526+00	{"eTag": "\\"75937fee3a749019569c33eabb79f21e\\"", "size": 10656, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-30T10:35:11.000Z", "contentLength": 10656, "httpStatusCode": 200}	4f68b989-b96d-4cde-99eb-c463959e00f7	440ffe15-7bbf-45e5-8833-e5d4b5cbb4f8	{}
9774b14b-5d56-4984-bffd-ae7beb28607a	uploads	membros/1730208055610000_5.png	15e35919-cc42-42b9-b291-6fae96a073bf	2024-10-29 13:20:57.1495+00	2024-10-29 13:20:57.1495+00	2024-10-29 13:20:57.1495+00	{"eTag": "\\"0f4eebdcc31419717cee228bd89d45e6\\"", "size": 9850, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2024-10-29T13:20:58.000Z", "contentLength": 9850, "httpStatusCode": 200}	4c11b63a-ae00-435a-8102-ade2ca5a8a66	15e35919-cc42-42b9-b291-6fae96a073bf	{}
\.


--
-- Data for Name: s3_multipart_uploads; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.s3_multipart_uploads (id, in_progress_size, upload_signature, bucket_id, key, version, owner_id, created_at, user_metadata) FROM stdin;
\.


--
-- Data for Name: s3_multipart_uploads_parts; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.s3_multipart_uploads_parts (id, upload_id, size, part_number, bucket_id, key, etag, owner_id, version, created_at) FROM stdin;
\.


--
-- Data for Name: geocode_settings; Type: TABLE DATA; Schema: tiger; Owner: supabase_admin
--

COPY tiger.geocode_settings (name, setting, unit, category, short_desc) FROM stdin;
\.


--
-- Data for Name: pagc_gaz; Type: TABLE DATA; Schema: tiger; Owner: supabase_admin
--

COPY tiger.pagc_gaz (id, seq, word, stdword, token, is_custom) FROM stdin;
\.


--
-- Data for Name: pagc_lex; Type: TABLE DATA; Schema: tiger; Owner: supabase_admin
--

COPY tiger.pagc_lex (id, seq, word, stdword, token, is_custom) FROM stdin;
\.


--
-- Data for Name: pagc_rules; Type: TABLE DATA; Schema: tiger; Owner: supabase_admin
--

COPY tiger.pagc_rules (id, rule, is_custom) FROM stdin;
\.


--
-- Data for Name: secrets; Type: TABLE DATA; Schema: vault; Owner: supabase_admin
--

COPY vault.secrets (id, name, description, secret, key_id, nonce, created_at, updated_at) FROM stdin;
\.


--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE SET; Schema: auth; Owner: supabase_auth_admin
--

SELECT pg_catalog.setval('auth.refresh_tokens_id_seq', 482, true);


--
-- Name: key_key_id_seq; Type: SEQUENCE SET; Schema: pgsodium; Owner: supabase_admin
--

SELECT pg_catalog.setval('pgsodium.key_key_id_seq', 1, false);


--
-- Name: agencias_agencia_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.agencias_agencia_id_seq', 27, true);


--
-- Name: cargos_cargo_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.cargos_cargo_id_seq', 7, true);


--
-- Name: estados_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.estados_id_seq', 27, true);


--
-- Name: faccoes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.faccoes_id_seq', 17, true);


--
-- Name: funcoes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.funcoes_id_seq', 26, true);


--
-- Name: grupos_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.grupos_id_seq', 1, false);


--
-- Name: grupos_membros_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.grupos_membros_id_seq', 1, false);


--
-- Name: membros_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.membros_id_seq', 111, true);


--
-- Name: municipios_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.municipios_id_seq', 5570, true);


--
-- Name: procedumentos_procedimento_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.procedumentos_procedimento_id_seq', 14, true);


--
-- Name: processos_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.processos_id_seq', 32, true);


--
-- Name: relacionamentos_membros_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.relacionamentos_membros_id_seq', 1, false);


--
-- Name: tipos_usuarios_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.tipos_usuarios_id_seq', 9, true);


--
-- Name: usuarios_usuario_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.usuarios_usuario_id_seq', 18, true);


--
-- Name: vara_vara_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.vara_vara_id_seq', 1, false);


--
-- Name: wappler_migrations_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.wappler_migrations_id_seq', 1, false);


--
-- Name: wappler_migrations_lock_index_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.wappler_migrations_lock_index_seq', 1, true);


--
-- Name: subscription_id_seq; Type: SEQUENCE SET; Schema: realtime; Owner: supabase_admin
--

SELECT pg_catalog.setval('realtime.subscription_id_seq', 1, false);


--
-- Name: mfa_amr_claims amr_id_pk; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT amr_id_pk PRIMARY KEY (id);


--
-- Name: audit_log_entries audit_log_entries_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.audit_log_entries
    ADD CONSTRAINT audit_log_entries_pkey PRIMARY KEY (id);


--
-- Name: flow_state flow_state_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.flow_state
    ADD CONSTRAINT flow_state_pkey PRIMARY KEY (id);


--
-- Name: identities identities_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_pkey PRIMARY KEY (id);


--
-- Name: identities identities_provider_id_provider_unique; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_provider_id_provider_unique UNIQUE (provider_id, provider);


--
-- Name: instances instances_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.instances
    ADD CONSTRAINT instances_pkey PRIMARY KEY (id);


--
-- Name: mfa_amr_claims mfa_amr_claims_session_id_authentication_method_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT mfa_amr_claims_session_id_authentication_method_pkey UNIQUE (session_id, authentication_method);


--
-- Name: mfa_challenges mfa_challenges_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_challenges
    ADD CONSTRAINT mfa_challenges_pkey PRIMARY KEY (id);


--
-- Name: mfa_factors mfa_factors_last_challenged_at_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_last_challenged_at_key UNIQUE (last_challenged_at);


--
-- Name: mfa_factors mfa_factors_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_pkey PRIMARY KEY (id);


--
-- Name: one_time_tokens one_time_tokens_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.one_time_tokens
    ADD CONSTRAINT one_time_tokens_pkey PRIMARY KEY (id);


--
-- Name: refresh_tokens refresh_tokens_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_pkey PRIMARY KEY (id);


--
-- Name: refresh_tokens refresh_tokens_token_unique; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_token_unique UNIQUE (token);


--
-- Name: saml_providers saml_providers_entity_id_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_entity_id_key UNIQUE (entity_id);


--
-- Name: saml_providers saml_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_pkey PRIMARY KEY (id);


--
-- Name: saml_relay_states saml_relay_states_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_pkey PRIMARY KEY (id);


--
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- Name: sessions sessions_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sessions
    ADD CONSTRAINT sessions_pkey PRIMARY KEY (id);


--
-- Name: sso_domains sso_domains_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_domains
    ADD CONSTRAINT sso_domains_pkey PRIMARY KEY (id);


--
-- Name: sso_providers sso_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_providers
    ADD CONSTRAINT sso_providers_pkey PRIMARY KEY (id);


--
-- Name: users users_phone_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_phone_key UNIQUE (phone);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: agencias agencias_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.agencias
    ADD CONSTRAINT agencias_pkey PRIMARY KEY (agencia_id);


--
-- Name: cargos cargos_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cargos
    ADD CONSTRAINT cargos_pkey PRIMARY KEY (cargo_id);


--
-- Name: estados estados_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.estados
    ADD CONSTRAINT estados_pkey PRIMARY KEY (estado_id);


--
-- Name: faccoes faccoes_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.faccoes
    ADD CONSTRAINT faccoes_pkey PRIMARY KEY (faccao_id);


--
-- Name: funcoes funcoes_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.funcoes
    ADD CONSTRAINT funcoes_pkey PRIMARY KEY (funcao_id);


--
-- Name: grupos_membros grupos_membros_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.grupos_membros
    ADD CONSTRAINT grupos_membros_pkey PRIMARY KEY (id);


--
-- Name: grupos grupos_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.grupos
    ADD CONSTRAINT grupos_pkey PRIMARY KEY (grupo_id);


--
-- Name: membros membros_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.membros
    ADD CONSTRAINT membros_pkey PRIMARY KEY (membro_id);


--
-- Name: municipios municipios_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.municipios
    ADD CONSTRAINT municipios_pkey PRIMARY KEY (id);


--
-- Name: procedimentos procedumentos_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.procedimentos
    ADD CONSTRAINT procedumentos_pkey PRIMARY KEY (procedimento_id);


--
-- Name: processos processos_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.processos
    ADD CONSTRAINT processos_pkey PRIMARY KEY (processo_id);


--
-- Name: relacionamentos_membros relacionamentos_membros_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.relacionamentos_membros
    ADD CONSTRAINT relacionamentos_membros_pkey PRIMARY KEY (id);


--
-- Name: tipos_usuarios tipos_usuarios_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tipos_usuarios
    ADD CONSTRAINT tipos_usuarios_pkey PRIMARY KEY (tipo_usuario_id);


--
-- Name: usuarios usuarios_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.usuarios
    ADD CONSTRAINT usuarios_pkey PRIMARY KEY (usuario_id);


--
-- Name: usuarios usuarios_usuario_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.usuarios
    ADD CONSTRAINT usuarios_usuario_id_key UNIQUE (usuario_id);


--
-- Name: vara vara_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.vara
    ADD CONSTRAINT vara_pkey PRIMARY KEY (vara_id);


--
-- Name: vara vara_vara_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.vara
    ADD CONSTRAINT vara_vara_id_key UNIQUE (vara_id);


--
-- Name: wappler_migrations_lock wappler_migrations_lock_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.wappler_migrations_lock
    ADD CONSTRAINT wappler_migrations_lock_pkey PRIMARY KEY (index);


--
-- Name: wappler_migrations wappler_migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.wappler_migrations
    ADD CONSTRAINT wappler_migrations_pkey PRIMARY KEY (id);


--
-- Name: messages messages_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE ONLY realtime.messages
    ADD CONSTRAINT messages_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: messages_2024_11_17 messages_2024_11_17_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages_2024_11_17
    ADD CONSTRAINT messages_2024_11_17_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: messages_2024_11_18 messages_2024_11_18_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages_2024_11_18
    ADD CONSTRAINT messages_2024_11_18_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: messages_2024_11_19 messages_2024_11_19_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages_2024_11_19
    ADD CONSTRAINT messages_2024_11_19_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: messages_2024_11_20 messages_2024_11_20_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages_2024_11_20
    ADD CONSTRAINT messages_2024_11_20_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: messages_2024_11_21 messages_2024_11_21_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages_2024_11_21
    ADD CONSTRAINT messages_2024_11_21_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: messages_2024_11_22 messages_2024_11_22_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages_2024_11_22
    ADD CONSTRAINT messages_2024_11_22_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: messages_2024_11_24 messages_2024_11_24_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages_2024_11_24
    ADD CONSTRAINT messages_2024_11_24_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: messages_2024_11_25 messages_2024_11_25_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages_2024_11_25
    ADD CONSTRAINT messages_2024_11_25_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: messages_2024_11_26 messages_2024_11_26_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages_2024_11_26
    ADD CONSTRAINT messages_2024_11_26_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: messages_2024_11_27 messages_2024_11_27_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages_2024_11_27
    ADD CONSTRAINT messages_2024_11_27_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: messages_2024_11_28 messages_2024_11_28_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages_2024_11_28
    ADD CONSTRAINT messages_2024_11_28_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: messages_2024_11_29 messages_2024_11_29_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages_2024_11_29
    ADD CONSTRAINT messages_2024_11_29_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: messages_2024_12_01 messages_2024_12_01_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages_2024_12_01
    ADD CONSTRAINT messages_2024_12_01_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: messages_2024_12_02 messages_2024_12_02_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages_2024_12_02
    ADD CONSTRAINT messages_2024_12_02_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: messages_2024_12_03 messages_2024_12_03_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages_2024_12_03
    ADD CONSTRAINT messages_2024_12_03_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: messages_2024_12_04 messages_2024_12_04_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages_2024_12_04
    ADD CONSTRAINT messages_2024_12_04_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: messages_2024_12_05 messages_2024_12_05_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages_2024_12_05
    ADD CONSTRAINT messages_2024_12_05_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: messages_2024_12_06 messages_2024_12_06_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages_2024_12_06
    ADD CONSTRAINT messages_2024_12_06_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: messages_2024_12_07 messages_2024_12_07_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages_2024_12_07
    ADD CONSTRAINT messages_2024_12_07_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: messages_2024_12_11 messages_2024_12_11_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages_2024_12_11
    ADD CONSTRAINT messages_2024_12_11_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: messages_2024_12_12 messages_2024_12_12_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages_2024_12_12
    ADD CONSTRAINT messages_2024_12_12_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: messages_2024_12_13 messages_2024_12_13_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages_2024_12_13
    ADD CONSTRAINT messages_2024_12_13_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: subscription pk_subscription; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.subscription
    ADD CONSTRAINT pk_subscription PRIMARY KEY (id);


--
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- Name: buckets buckets_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.buckets
    ADD CONSTRAINT buckets_pkey PRIMARY KEY (id);


--
-- Name: migrations migrations_name_key; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_name_key UNIQUE (name);


--
-- Name: migrations migrations_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_pkey PRIMARY KEY (id);


--
-- Name: objects objects_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT objects_pkey PRIMARY KEY (id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_pkey PRIMARY KEY (id);


--
-- Name: s3_multipart_uploads s3_multipart_uploads_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads
    ADD CONSTRAINT s3_multipart_uploads_pkey PRIMARY KEY (id);


--
-- Name: audit_logs_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX audit_logs_instance_id_idx ON auth.audit_log_entries USING btree (instance_id);


--
-- Name: confirmation_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX confirmation_token_idx ON auth.users USING btree (confirmation_token) WHERE ((confirmation_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: email_change_token_current_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX email_change_token_current_idx ON auth.users USING btree (email_change_token_current) WHERE ((email_change_token_current)::text !~ '^[0-9 ]*$'::text);


--
-- Name: email_change_token_new_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX email_change_token_new_idx ON auth.users USING btree (email_change_token_new) WHERE ((email_change_token_new)::text !~ '^[0-9 ]*$'::text);


--
-- Name: factor_id_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX factor_id_created_at_idx ON auth.mfa_factors USING btree (user_id, created_at);


--
-- Name: flow_state_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX flow_state_created_at_idx ON auth.flow_state USING btree (created_at DESC);


--
-- Name: identities_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX identities_email_idx ON auth.identities USING btree (email text_pattern_ops);


--
-- Name: INDEX identities_email_idx; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON INDEX auth.identities_email_idx IS 'Auth: Ensures indexed queries on the email column';


--
-- Name: identities_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX identities_user_id_idx ON auth.identities USING btree (user_id);


--
-- Name: idx_auth_code; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX idx_auth_code ON auth.flow_state USING btree (auth_code);


--
-- Name: idx_user_id_auth_method; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX idx_user_id_auth_method ON auth.flow_state USING btree (user_id, authentication_method);


--
-- Name: mfa_challenge_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX mfa_challenge_created_at_idx ON auth.mfa_challenges USING btree (created_at DESC);


--
-- Name: mfa_factors_user_friendly_name_unique; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX mfa_factors_user_friendly_name_unique ON auth.mfa_factors USING btree (friendly_name, user_id) WHERE (TRIM(BOTH FROM friendly_name) <> ''::text);


--
-- Name: mfa_factors_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX mfa_factors_user_id_idx ON auth.mfa_factors USING btree (user_id);


--
-- Name: one_time_tokens_relates_to_hash_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX one_time_tokens_relates_to_hash_idx ON auth.one_time_tokens USING hash (relates_to);


--
-- Name: one_time_tokens_token_hash_hash_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX one_time_tokens_token_hash_hash_idx ON auth.one_time_tokens USING hash (token_hash);


--
-- Name: one_time_tokens_user_id_token_type_key; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX one_time_tokens_user_id_token_type_key ON auth.one_time_tokens USING btree (user_id, token_type);


--
-- Name: reauthentication_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX reauthentication_token_idx ON auth.users USING btree (reauthentication_token) WHERE ((reauthentication_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: recovery_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX recovery_token_idx ON auth.users USING btree (recovery_token) WHERE ((recovery_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: refresh_tokens_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_idx ON auth.refresh_tokens USING btree (instance_id);


--
-- Name: refresh_tokens_instance_id_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_user_id_idx ON auth.refresh_tokens USING btree (instance_id, user_id);


--
-- Name: refresh_tokens_parent_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_parent_idx ON auth.refresh_tokens USING btree (parent);


--
-- Name: refresh_tokens_session_id_revoked_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_session_id_revoked_idx ON auth.refresh_tokens USING btree (session_id, revoked);


--
-- Name: refresh_tokens_updated_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_updated_at_idx ON auth.refresh_tokens USING btree (updated_at DESC);


--
-- Name: saml_providers_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_providers_sso_provider_id_idx ON auth.saml_providers USING btree (sso_provider_id);


--
-- Name: saml_relay_states_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_created_at_idx ON auth.saml_relay_states USING btree (created_at DESC);


--
-- Name: saml_relay_states_for_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_for_email_idx ON auth.saml_relay_states USING btree (for_email);


--
-- Name: saml_relay_states_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_sso_provider_id_idx ON auth.saml_relay_states USING btree (sso_provider_id);


--
-- Name: sessions_not_after_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sessions_not_after_idx ON auth.sessions USING btree (not_after DESC);


--
-- Name: sessions_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sessions_user_id_idx ON auth.sessions USING btree (user_id);


--
-- Name: sso_domains_domain_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX sso_domains_domain_idx ON auth.sso_domains USING btree (lower(domain));


--
-- Name: sso_domains_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sso_domains_sso_provider_id_idx ON auth.sso_domains USING btree (sso_provider_id);


--
-- Name: sso_providers_resource_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX sso_providers_resource_id_idx ON auth.sso_providers USING btree (lower(resource_id));


--
-- Name: unique_phone_factor_per_user; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX unique_phone_factor_per_user ON auth.mfa_factors USING btree (user_id, phone);


--
-- Name: user_id_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX user_id_created_at_idx ON auth.sessions USING btree (user_id, created_at);


--
-- Name: users_email_partial_key; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX users_email_partial_key ON auth.users USING btree (email) WHERE (is_sso_user = false);


--
-- Name: INDEX users_email_partial_key; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON INDEX auth.users_email_partial_key IS 'Auth: A partial unique index that applies only when is_sso_user is false';


--
-- Name: users_instance_id_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_email_idx ON auth.users USING btree (instance_id, lower((email)::text));


--
-- Name: users_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_idx ON auth.users USING btree (instance_id);


--
-- Name: users_is_anonymous_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_is_anonymous_idx ON auth.users USING btree (is_anonymous);


--
-- Name: ix_realtime_subscription_entity; Type: INDEX; Schema: realtime; Owner: supabase_admin
--

CREATE INDEX ix_realtime_subscription_entity ON realtime.subscription USING btree (entity);


--
-- Name: subscription_subscription_id_entity_filters_key; Type: INDEX; Schema: realtime; Owner: supabase_admin
--

CREATE UNIQUE INDEX subscription_subscription_id_entity_filters_key ON realtime.subscription USING btree (subscription_id, entity, filters);


--
-- Name: bname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bname ON storage.buckets USING btree (name);


--
-- Name: bucketid_objname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bucketid_objname ON storage.objects USING btree (bucket_id, name);


--
-- Name: idx_multipart_uploads_list; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_multipart_uploads_list ON storage.s3_multipart_uploads USING btree (bucket_id, key, created_at);


--
-- Name: idx_objects_bucket_id_name; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_objects_bucket_id_name ON storage.objects USING btree (bucket_id, name COLLATE "C");


--
-- Name: name_prefix_search; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX name_prefix_search ON storage.objects USING btree (name text_pattern_ops);


--
-- Name: messages_2024_11_17_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2024_11_17_pkey;


--
-- Name: messages_2024_11_18_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2024_11_18_pkey;


--
-- Name: messages_2024_11_19_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2024_11_19_pkey;


--
-- Name: messages_2024_11_20_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2024_11_20_pkey;


--
-- Name: messages_2024_11_21_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2024_11_21_pkey;


--
-- Name: messages_2024_11_22_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2024_11_22_pkey;


--
-- Name: messages_2024_11_24_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2024_11_24_pkey;


--
-- Name: messages_2024_11_25_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2024_11_25_pkey;


--
-- Name: messages_2024_11_26_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2024_11_26_pkey;


--
-- Name: messages_2024_11_27_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2024_11_27_pkey;


--
-- Name: messages_2024_11_28_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2024_11_28_pkey;


--
-- Name: messages_2024_11_29_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2024_11_29_pkey;


--
-- Name: messages_2024_12_01_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2024_12_01_pkey;


--
-- Name: messages_2024_12_02_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2024_12_02_pkey;


--
-- Name: messages_2024_12_03_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2024_12_03_pkey;


--
-- Name: messages_2024_12_04_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2024_12_04_pkey;


--
-- Name: messages_2024_12_05_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2024_12_05_pkey;


--
-- Name: messages_2024_12_06_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2024_12_06_pkey;


--
-- Name: messages_2024_12_07_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2024_12_07_pkey;


--
-- Name: messages_2024_12_11_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2024_12_11_pkey;


--
-- Name: messages_2024_12_12_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2024_12_12_pkey;


--
-- Name: messages_2024_12_13_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2024_12_13_pkey;


--
-- Name: subscription tr_check_filters; Type: TRIGGER; Schema: realtime; Owner: supabase_admin
--

CREATE TRIGGER tr_check_filters BEFORE INSERT OR UPDATE ON realtime.subscription FOR EACH ROW EXECUTE FUNCTION realtime.subscription_check_filters();


--
-- Name: objects update_objects_updated_at; Type: TRIGGER; Schema: storage; Owner: supabase_storage_admin
--

CREATE TRIGGER update_objects_updated_at BEFORE UPDATE ON storage.objects FOR EACH ROW EXECUTE FUNCTION storage.update_updated_at_column();


--
-- Name: identities identities_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: mfa_amr_claims mfa_amr_claims_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT mfa_amr_claims_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;


--
-- Name: mfa_challenges mfa_challenges_auth_factor_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_challenges
    ADD CONSTRAINT mfa_challenges_auth_factor_id_fkey FOREIGN KEY (factor_id) REFERENCES auth.mfa_factors(id) ON DELETE CASCADE;


--
-- Name: mfa_factors mfa_factors_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: one_time_tokens one_time_tokens_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.one_time_tokens
    ADD CONSTRAINT one_time_tokens_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: refresh_tokens refresh_tokens_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;


--
-- Name: saml_providers saml_providers_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: saml_relay_states saml_relay_states_flow_state_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_flow_state_id_fkey FOREIGN KEY (flow_state_id) REFERENCES auth.flow_state(id) ON DELETE CASCADE;


--
-- Name: saml_relay_states saml_relay_states_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: sessions sessions_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sessions
    ADD CONSTRAINT sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: sso_domains sso_domains_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_domains
    ADD CONSTRAINT sso_domains_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: cargos cargos_faccao_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cargos
    ADD CONSTRAINT cargos_faccao_id_fkey FOREIGN KEY (faccao_id) REFERENCES public.faccoes(faccao_id);


--
-- Name: cargos cargos_faccao_id_fkey1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cargos
    ADD CONSTRAINT cargos_faccao_id_fkey1 FOREIGN KEY (faccao_id) REFERENCES public.faccoes(faccao_id);


--
-- Name: funcoes funcoes_faccao_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.funcoes
    ADD CONSTRAINT funcoes_faccao_id_fkey FOREIGN KEY (faccao_id) REFERENCES public.faccoes(faccao_id);


--
-- Name: grupos_membros grupos_membros_grupo_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.grupos_membros
    ADD CONSTRAINT grupos_membros_grupo_id_fkey FOREIGN KEY (grupo_id) REFERENCES public.grupos(grupo_id);


--
-- Name: grupos_membros grupos_membros_membro_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.grupos_membros
    ADD CONSTRAINT grupos_membros_membro_id_fkey FOREIGN KEY (membro_id) REFERENCES public.membros(membro_id);


--
-- Name: membros membros_cargo_ant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.membros
    ADD CONSTRAINT membros_cargo_ant_id_fkey FOREIGN KEY (cargo_ant_id) REFERENCES public.cargos(cargo_id);


--
-- Name: membros membros_cargo_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.membros
    ADD CONSTRAINT membros_cargo_id_fkey FOREIGN KEY (cargo_id) REFERENCES public.cargos(cargo_id);


--
-- Name: membros membros_estado_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.membros
    ADD CONSTRAINT membros_estado_id_fkey FOREIGN KEY (estado_id) REFERENCES public.estados(estado_id);


--
-- Name: membros membros_faccao_aliada_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.membros
    ADD CONSTRAINT membros_faccao_aliada_fkey FOREIGN KEY (faccao_aliada) REFERENCES public.faccoes(faccao_id);


--
-- Name: membros membros_faccao_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.membros
    ADD CONSTRAINT membros_faccao_id_fkey FOREIGN KEY (faccao_id) REFERENCES public.faccoes(faccao_id);


--
-- Name: membros membros_faccao_inimiga_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.membros
    ADD CONSTRAINT membros_faccao_inimiga_fkey FOREIGN KEY (faccao_inimiga) REFERENCES public.faccoes(faccao_id);


--
-- Name: membros membros_faccao_integrou_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.membros
    ADD CONSTRAINT membros_faccao_integrou_fkey FOREIGN KEY (faccao_integrou) REFERENCES public.faccoes(faccao_id);


--
-- Name: membros membros_funcao_ant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.membros
    ADD CONSTRAINT membros_funcao_ant_id_fkey FOREIGN KEY (funcao_ant_id) REFERENCES public.funcoes(funcao_id);


--
-- Name: membros membros_funcao_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.membros
    ADD CONSTRAINT membros_funcao_id_fkey FOREIGN KEY (funcao_id) REFERENCES public.funcoes(funcao_id);


--
-- Name: membros membros_municipio_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.membros
    ADD CONSTRAINT membros_municipio_id_fkey FOREIGN KEY (municipio_id) REFERENCES public.municipios(id);


--
-- Name: municipios municipios_estado_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.municipios
    ADD CONSTRAINT municipios_estado_id_fkey FOREIGN KEY (estado_id) REFERENCES public.estados(estado_id) ON UPDATE CASCADE;


--
-- Name: procedimentos procedimentos_membro_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.procedimentos
    ADD CONSTRAINT procedimentos_membro_id_fkey FOREIGN KEY (membro_id) REFERENCES public.membros(membro_id);


--
-- Name: processos processos_membro_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.processos
    ADD CONSTRAINT processos_membro_id_fkey FOREIGN KEY (membro_id) REFERENCES public.membros(membro_id);


--
-- Name: relacionamentos_membros relacionamentos_membros_membro_01_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.relacionamentos_membros
    ADD CONSTRAINT relacionamentos_membros_membro_01_id_fkey FOREIGN KEY (membro_01_id) REFERENCES public.membros(membro_id);


--
-- Name: relacionamentos_membros relacionamentos_membros_membro_02__fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.relacionamentos_membros
    ADD CONSTRAINT relacionamentos_membros_membro_02__fkey FOREIGN KEY (membro_02_) REFERENCES public.membros(membro_id);


--
-- Name: usuarios usuarios_agencia_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.usuarios
    ADD CONSTRAINT usuarios_agencia_id_fkey FOREIGN KEY (agencia_id) REFERENCES public.agencias(agencia_id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: usuarios usuarios_tipo_usuario_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.usuarios
    ADD CONSTRAINT usuarios_tipo_usuario_id_fkey FOREIGN KEY (tipo_usuario_id) REFERENCES public.tipos_usuarios(tipo_usuario_id) ON UPDATE CASCADE;


--
-- Name: usuarios usuarios_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.usuarios
    ADD CONSTRAINT usuarios_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE;


--
-- Name: vara vara_estado_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.vara
    ADD CONSTRAINT vara_estado_id_fkey FOREIGN KEY (estado_id) REFERENCES public.estados(estado_id);


--
-- Name: objects objects_bucketId_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT "objects_bucketId_fkey" FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads s3_multipart_uploads_bucket_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads
    ADD CONSTRAINT s3_multipart_uploads_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_bucket_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_upload_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_upload_id_fkey FOREIGN KEY (upload_id) REFERENCES storage.s3_multipart_uploads(id) ON DELETE CASCADE;


--
-- Name: audit_log_entries; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.audit_log_entries ENABLE ROW LEVEL SECURITY;

--
-- Name: flow_state; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.flow_state ENABLE ROW LEVEL SECURITY;

--
-- Name: identities; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.identities ENABLE ROW LEVEL SECURITY;

--
-- Name: instances; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.instances ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_amr_claims; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_amr_claims ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_challenges; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_challenges ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_factors; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_factors ENABLE ROW LEVEL SECURITY;

--
-- Name: one_time_tokens; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.one_time_tokens ENABLE ROW LEVEL SECURITY;

--
-- Name: refresh_tokens; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.refresh_tokens ENABLE ROW LEVEL SECURITY;

--
-- Name: saml_providers; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.saml_providers ENABLE ROW LEVEL SECURITY;

--
-- Name: saml_relay_states; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.saml_relay_states ENABLE ROW LEVEL SECURITY;

--
-- Name: schema_migrations; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.schema_migrations ENABLE ROW LEVEL SECURITY;

--
-- Name: sessions; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sessions ENABLE ROW LEVEL SECURITY;

--
-- Name: sso_domains; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sso_domains ENABLE ROW LEVEL SECURITY;

--
-- Name: sso_providers; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sso_providers ENABLE ROW LEVEL SECURITY;

--
-- Name: users; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.users ENABLE ROW LEVEL SECURITY;

--
-- Name: agencias Acesso Total; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Acesso Total" ON public.agencias TO authenticated USING (true) WITH CHECK (true);


--
-- Name: cargos Acesso Total; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Acesso Total" ON public.cargos TO authenticated USING (true) WITH CHECK (true);


--
-- Name: estados Acesso Total; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Acesso Total" ON public.estados TO authenticated USING (true) WITH CHECK (true);


--
-- Name: faccoes Acesso Total; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Acesso Total" ON public.faccoes TO authenticated USING (true) WITH CHECK (true);


--
-- Name: funcoes Acesso Total; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Acesso Total" ON public.funcoes TO authenticated USING (true) WITH CHECK (true);


--
-- Name: grupos Acesso Total; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Acesso Total" ON public.grupos TO authenticated USING (true) WITH CHECK (true);


--
-- Name: grupos_membros Acesso Total; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Acesso Total" ON public.grupos_membros TO authenticated USING (true) WITH CHECK (true);


--
-- Name: membros Acesso Total; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Acesso Total" ON public.membros TO authenticated USING (true) WITH CHECK (true);


--
-- Name: municipios Acesso Total; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Acesso Total" ON public.municipios USING (true) WITH CHECK (true);


--
-- Name: procedimentos Acesso Total; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Acesso Total" ON public.procedimentos TO authenticated USING (true) WITH CHECK (true);


--
-- Name: processos Acesso Total; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Acesso Total" ON public.processos TO authenticated USING (true) WITH CHECK (true);


--
-- Name: relacionamentos_membros Acesso Total; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Acesso Total" ON public.relacionamentos_membros TO authenticated USING (true) WITH CHECK (true);


--
-- Name: tipos_usuarios Acesso Total; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Acesso Total" ON public.tipos_usuarios TO authenticated USING (true) WITH CHECK (true);


--
-- Name: usuarios Acesso Total; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Acesso Total" ON public.usuarios TO authenticated USING (true) WITH CHECK (true);


--
-- Name: vara Acesso Total; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Acesso Total" ON public.vara TO authenticated USING (true) WITH CHECK (true);


--
-- Name: agencias; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.agencias ENABLE ROW LEVEL SECURITY;

--
-- Name: cargos; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.cargos ENABLE ROW LEVEL SECURITY;

--
-- Name: estados; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.estados ENABLE ROW LEVEL SECURITY;

--
-- Name: faccoes; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.faccoes ENABLE ROW LEVEL SECURITY;

--
-- Name: funcoes; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.funcoes ENABLE ROW LEVEL SECURITY;

--
-- Name: grupos; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.grupos ENABLE ROW LEVEL SECURITY;

--
-- Name: grupos_membros; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.grupos_membros ENABLE ROW LEVEL SECURITY;

--
-- Name: membros; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.membros ENABLE ROW LEVEL SECURITY;

--
-- Name: municipios; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.municipios ENABLE ROW LEVEL SECURITY;

--
-- Name: procedimentos; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.procedimentos ENABLE ROW LEVEL SECURITY;

--
-- Name: processos; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.processos ENABLE ROW LEVEL SECURITY;

--
-- Name: relacionamentos_membros; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.relacionamentos_membros ENABLE ROW LEVEL SECURITY;

--
-- Name: tipos_usuarios; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.tipos_usuarios ENABLE ROW LEVEL SECURITY;

--
-- Name: usuarios; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.usuarios ENABLE ROW LEVEL SECURITY;

--
-- Name: vara; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.vara ENABLE ROW LEVEL SECURITY;

--
-- Name: messages; Type: ROW SECURITY; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE realtime.messages ENABLE ROW LEVEL SECURITY;

--
-- Name: objects Acesso Total 1va6avm_0; Type: POLICY; Schema: storage; Owner: supabase_storage_admin
--

CREATE POLICY "Acesso Total 1va6avm_0" ON storage.objects FOR SELECT USING ((bucket_id = 'uploads'::text));


--
-- Name: objects Acesso Total 1va6avm_1; Type: POLICY; Schema: storage; Owner: supabase_storage_admin
--

CREATE POLICY "Acesso Total 1va6avm_1" ON storage.objects FOR INSERT WITH CHECK ((bucket_id = 'uploads'::text));


--
-- Name: objects Acesso Total 1va6avm_2; Type: POLICY; Schema: storage; Owner: supabase_storage_admin
--

CREATE POLICY "Acesso Total 1va6avm_2" ON storage.objects FOR UPDATE USING ((bucket_id = 'uploads'::text));


--
-- Name: objects Acesso Total 1va6avm_3; Type: POLICY; Schema: storage; Owner: supabase_storage_admin
--

CREATE POLICY "Acesso Total 1va6avm_3" ON storage.objects FOR DELETE USING ((bucket_id = 'uploads'::text));


--
-- Name: buckets Enable read access for all users; Type: POLICY; Schema: storage; Owner: supabase_storage_admin
--

CREATE POLICY "Enable read access for all users" ON storage.buckets USING (true) WITH CHECK (true);


--
-- Name: objects Enable read access for all users; Type: POLICY; Schema: storage; Owner: supabase_storage_admin
--

CREATE POLICY "Enable read access for all users" ON storage.objects USING (true) WITH CHECK (true);


--
-- Name: buckets; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.buckets ENABLE ROW LEVEL SECURITY;

--
-- Name: migrations; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.migrations ENABLE ROW LEVEL SECURITY;

--
-- Name: objects; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY;

--
-- Name: s3_multipart_uploads; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.s3_multipart_uploads ENABLE ROW LEVEL SECURITY;

--
-- Name: s3_multipart_uploads_parts; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.s3_multipart_uploads_parts ENABLE ROW LEVEL SECURITY;

--
-- Name: supabase_realtime; Type: PUBLICATION; Schema: -; Owner: postgres
--

CREATE PUBLICATION supabase_realtime WITH (publish = 'insert, update, delete, truncate');


ALTER PUBLICATION supabase_realtime OWNER TO postgres;

--
-- Name: SCHEMA auth; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA auth TO anon;
GRANT USAGE ON SCHEMA auth TO authenticated;
GRANT USAGE ON SCHEMA auth TO service_role;
GRANT ALL ON SCHEMA auth TO supabase_auth_admin;
GRANT ALL ON SCHEMA auth TO dashboard_user;
GRANT ALL ON SCHEMA auth TO postgres;


--
-- Name: SCHEMA extensions; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA extensions TO anon;
GRANT USAGE ON SCHEMA extensions TO authenticated;
GRANT USAGE ON SCHEMA extensions TO service_role;
GRANT ALL ON SCHEMA extensions TO dashboard_user;


--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: pg_database_owner
--

GRANT USAGE ON SCHEMA public TO postgres;
GRANT USAGE ON SCHEMA public TO anon;
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO service_role;


--
-- Name: SCHEMA realtime; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA realtime TO postgres;
GRANT USAGE ON SCHEMA realtime TO anon;
GRANT USAGE ON SCHEMA realtime TO authenticated;
GRANT USAGE ON SCHEMA realtime TO service_role;
GRANT ALL ON SCHEMA realtime TO supabase_realtime_admin;


--
-- Name: SCHEMA storage; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT ALL ON SCHEMA storage TO postgres;
GRANT USAGE ON SCHEMA storage TO anon;
GRANT USAGE ON SCHEMA storage TO authenticated;
GRANT USAGE ON SCHEMA storage TO service_role;
GRANT ALL ON SCHEMA storage TO supabase_storage_admin;
GRANT ALL ON SCHEMA storage TO dashboard_user;


--
-- Name: SCHEMA tiger; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA tiger FROM postgres;
GRANT CREATE ON SCHEMA tiger TO postgres;
GRANT USAGE ON SCHEMA tiger TO postgres WITH GRANT OPTION;


--
-- Name: SCHEMA tiger_data; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA tiger_data TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION raster_in(cstring); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.raster_in(cstring) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION raster_out(extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.raster_out(extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION box2d_in(cstring); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.box2d_in(cstring) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION box2d_out(extensions.box2d); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.box2d_out(extensions.box2d) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION box2df_in(cstring); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.box2df_in(cstring) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION box2df_out(extensions.box2df); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.box2df_out(extensions.box2df) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION box3d_in(cstring); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.box3d_in(cstring) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION box3d_out(extensions.box3d); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.box3d_out(extensions.box3d) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION cube_in(cstring); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.cube_in(cstring) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION cube_out(extensions.cube); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.cube_out(extensions.cube) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION cube_recv(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.cube_recv(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION cube_send(extensions.cube); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.cube_send(extensions.cube) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geography_analyze(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geography_analyze(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geography_in(cstring, oid, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geography_in(cstring, oid, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geography_out(extensions.geography); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geography_out(extensions.geography) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geography_recv(internal, oid, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geography_recv(internal, oid, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geography_send(extensions.geography); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geography_send(extensions.geography) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geography_typmod_in(cstring[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geography_typmod_in(cstring[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geography_typmod_out(integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geography_typmod_out(integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_analyze(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_analyze(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_in(cstring); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_in(cstring) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_out(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_out(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_recv(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_recv(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_send(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_send(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_typmod_in(cstring[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_typmod_in(cstring[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_typmod_out(integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_typmod_out(integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION gidx_in(cstring); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.gidx_in(cstring) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION gidx_out(extensions.gidx); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.gidx_out(extensions.gidx) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION lquery_in(cstring); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.lquery_in(cstring) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION lquery_out(extensions.lquery); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.lquery_out(extensions.lquery) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION lquery_recv(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.lquery_recv(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION lquery_send(extensions.lquery); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.lquery_send(extensions.lquery) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltree_in(cstring); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltree_in(cstring) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltree_out(extensions.ltree); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltree_out(extensions.ltree) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltree_recv(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltree_recv(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltree_send(extensions.ltree); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltree_send(extensions.ltree) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltree_gist_in(cstring); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltree_gist_in(cstring) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltree_gist_out(extensions.ltree_gist); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltree_gist_out(extensions.ltree_gist) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltxtq_in(cstring); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltxtq_in(cstring) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltxtq_out(extensions.ltxtquery); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltxtq_out(extensions.ltxtquery) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltxtq_recv(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltxtq_recv(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltxtq_send(extensions.ltxtquery); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltxtq_send(extensions.ltxtquery) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION spheroid_in(cstring); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.spheroid_in(cstring) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION spheroid_out(extensions.spheroid); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.spheroid_out(extensions.spheroid) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION box3d(extensions.box2d); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.box3d(extensions.box2d) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry(extensions.box2d); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry(extensions.box2d) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION box(extensions.box3d); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.box(extensions.box3d) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION box2d(extensions.box3d); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.box2d(extensions.box3d) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry(extensions.box3d); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry(extensions.box3d) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geography(bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geography(bytea) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry(bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry(bytea) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION bytea(extensions.geography); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.bytea(extensions.geography) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geography(extensions.geography, integer, boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geography(extensions.geography, integer, boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry(extensions.geography); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry(extensions.geography) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION box(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.box(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION box2d(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.box2d(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION box3d(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.box3d(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION bytea(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.bytea(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geography(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geography(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry(extensions.geometry, integer, boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry(extensions.geometry, integer, boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION json(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.json(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION jsonb(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.jsonb(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION path(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.path(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION point(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.point(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION polygon(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.polygon(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION text(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.text(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry(path); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry(path) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry(point); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry(point) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry(polygon); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry(polygon) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION box3d(extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.box3d(extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION bytea(extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.bytea(extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_convexhull(extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_convexhull(extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION email(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.email() TO dashboard_user;


--
-- Name: FUNCTION jwt(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.jwt() TO postgres;
GRANT ALL ON FUNCTION auth.jwt() TO dashboard_user;


--
-- Name: FUNCTION role(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.role() TO dashboard_user;


--
-- Name: FUNCTION uid(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.uid() TO dashboard_user;


--
-- Name: FUNCTION __st_countagg_transfn(agg extensions.agg_count, rast extensions.raster, nband integer, exclude_nodata_value boolean, sample_percent double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.__st_countagg_transfn(agg extensions.agg_count, rast extensions.raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _add_overview_constraint(ovschema name, ovtable name, ovcolumn name, refschema name, reftable name, refcolumn name, factor integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._add_overview_constraint(ovschema name, ovtable name, ovcolumn name, refschema name, reftable name, refcolumn name, factor integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _add_raster_constraint(cn name, sql text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._add_raster_constraint(cn name, sql text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _add_raster_constraint_alignment(rastschema name, rasttable name, rastcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._add_raster_constraint_alignment(rastschema name, rasttable name, rastcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _add_raster_constraint_blocksize(rastschema name, rasttable name, rastcolumn name, axis text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._add_raster_constraint_blocksize(rastschema name, rasttable name, rastcolumn name, axis text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _add_raster_constraint_coverage_tile(rastschema name, rasttable name, rastcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._add_raster_constraint_coverage_tile(rastschema name, rasttable name, rastcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _add_raster_constraint_extent(rastschema name, rasttable name, rastcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._add_raster_constraint_extent(rastschema name, rasttable name, rastcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _add_raster_constraint_nodata_values(rastschema name, rasttable name, rastcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._add_raster_constraint_nodata_values(rastschema name, rasttable name, rastcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _add_raster_constraint_num_bands(rastschema name, rasttable name, rastcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._add_raster_constraint_num_bands(rastschema name, rasttable name, rastcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _add_raster_constraint_out_db(rastschema name, rasttable name, rastcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._add_raster_constraint_out_db(rastschema name, rasttable name, rastcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _add_raster_constraint_pixel_types(rastschema name, rasttable name, rastcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._add_raster_constraint_pixel_types(rastschema name, rasttable name, rastcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _add_raster_constraint_scale(rastschema name, rasttable name, rastcolumn name, axis character); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._add_raster_constraint_scale(rastschema name, rasttable name, rastcolumn name, axis character) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _add_raster_constraint_spatially_unique(rastschema name, rasttable name, rastcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._add_raster_constraint_spatially_unique(rastschema name, rasttable name, rastcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _add_raster_constraint_srid(rastschema name, rasttable name, rastcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._add_raster_constraint_srid(rastschema name, rasttable name, rastcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _drop_overview_constraint(ovschema name, ovtable name, ovcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._drop_overview_constraint(ovschema name, ovtable name, ovcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _drop_raster_constraint(rastschema name, rasttable name, cn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._drop_raster_constraint(rastschema name, rasttable name, cn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _drop_raster_constraint_alignment(rastschema name, rasttable name, rastcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._drop_raster_constraint_alignment(rastschema name, rasttable name, rastcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _drop_raster_constraint_blocksize(rastschema name, rasttable name, rastcolumn name, axis text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._drop_raster_constraint_blocksize(rastschema name, rasttable name, rastcolumn name, axis text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _drop_raster_constraint_coverage_tile(rastschema name, rasttable name, rastcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._drop_raster_constraint_coverage_tile(rastschema name, rasttable name, rastcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _drop_raster_constraint_extent(rastschema name, rasttable name, rastcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._drop_raster_constraint_extent(rastschema name, rasttable name, rastcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _drop_raster_constraint_nodata_values(rastschema name, rasttable name, rastcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._drop_raster_constraint_nodata_values(rastschema name, rasttable name, rastcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _drop_raster_constraint_num_bands(rastschema name, rasttable name, rastcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._drop_raster_constraint_num_bands(rastschema name, rasttable name, rastcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _drop_raster_constraint_out_db(rastschema name, rasttable name, rastcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._drop_raster_constraint_out_db(rastschema name, rasttable name, rastcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _drop_raster_constraint_pixel_types(rastschema name, rasttable name, rastcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._drop_raster_constraint_pixel_types(rastschema name, rasttable name, rastcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _drop_raster_constraint_regular_blocking(rastschema name, rasttable name, rastcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._drop_raster_constraint_regular_blocking(rastschema name, rasttable name, rastcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _drop_raster_constraint_scale(rastschema name, rasttable name, rastcolumn name, axis character); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._drop_raster_constraint_scale(rastschema name, rasttable name, rastcolumn name, axis character) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _drop_raster_constraint_spatially_unique(rastschema name, rasttable name, rastcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._drop_raster_constraint_spatially_unique(rastschema name, rasttable name, rastcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _drop_raster_constraint_srid(rastschema name, rasttable name, rastcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._drop_raster_constraint_srid(rastschema name, rasttable name, rastcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _lt_q_regex(extensions.ltree[], extensions.lquery[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._lt_q_regex(extensions.ltree[], extensions.lquery[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _lt_q_rregex(extensions.lquery[], extensions.ltree[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._lt_q_rregex(extensions.lquery[], extensions.ltree[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _ltq_extract_regex(extensions.ltree[], extensions.lquery); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._ltq_extract_regex(extensions.ltree[], extensions.lquery) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _ltq_regex(extensions.ltree[], extensions.lquery); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._ltq_regex(extensions.ltree[], extensions.lquery) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _ltq_rregex(extensions.lquery, extensions.ltree[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._ltq_rregex(extensions.lquery, extensions.ltree[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _ltree_compress(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._ltree_compress(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _ltree_consistent(internal, extensions.ltree[], smallint, oid, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._ltree_consistent(internal, extensions.ltree[], smallint, oid, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _ltree_extract_isparent(extensions.ltree[], extensions.ltree); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._ltree_extract_isparent(extensions.ltree[], extensions.ltree) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _ltree_extract_risparent(extensions.ltree[], extensions.ltree); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._ltree_extract_risparent(extensions.ltree[], extensions.ltree) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _ltree_gist_options(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._ltree_gist_options(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _ltree_isparent(extensions.ltree[], extensions.ltree); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._ltree_isparent(extensions.ltree[], extensions.ltree) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _ltree_penalty(internal, internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._ltree_penalty(internal, internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _ltree_picksplit(internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._ltree_picksplit(internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _ltree_r_isparent(extensions.ltree, extensions.ltree[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._ltree_r_isparent(extensions.ltree, extensions.ltree[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _ltree_r_risparent(extensions.ltree, extensions.ltree[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._ltree_r_risparent(extensions.ltree, extensions.ltree[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _ltree_risparent(extensions.ltree[], extensions.ltree); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._ltree_risparent(extensions.ltree[], extensions.ltree) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _ltree_same(extensions.ltree_gist, extensions.ltree_gist, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._ltree_same(extensions.ltree_gist, extensions.ltree_gist, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _ltree_union(internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._ltree_union(internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _ltxtq_exec(extensions.ltree[], extensions.ltxtquery); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._ltxtq_exec(extensions.ltree[], extensions.ltxtquery) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _ltxtq_extract_exec(extensions.ltree[], extensions.ltxtquery); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._ltxtq_extract_exec(extensions.ltree[], extensions.ltxtquery) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _ltxtq_rexec(extensions.ltxtquery, extensions.ltree[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._ltxtq_rexec(extensions.ltxtquery, extensions.ltree[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _overview_constraint(ov extensions.raster, factor integer, refschema name, reftable name, refcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._overview_constraint(ov extensions.raster, factor integer, refschema name, reftable name, refcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _overview_constraint_info(ovschema name, ovtable name, ovcolumn name, OUT refschema name, OUT reftable name, OUT refcolumn name, OUT factor integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._overview_constraint_info(ovschema name, ovtable name, ovcolumn name, OUT refschema name, OUT reftable name, OUT refcolumn name, OUT factor integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _postgis_deprecate(oldname text, newname text, version text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._postgis_deprecate(oldname text, newname text, version text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _postgis_index_extent(tbl regclass, col text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._postgis_index_extent(tbl regclass, col text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _postgis_join_selectivity(regclass, text, regclass, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._postgis_join_selectivity(regclass, text, regclass, text, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _postgis_pgsql_version(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._postgis_pgsql_version() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _postgis_scripts_pgsql_version(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._postgis_scripts_pgsql_version() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _postgis_selectivity(tbl regclass, att_name text, geom extensions.geometry, mode text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._postgis_selectivity(tbl regclass, att_name text, geom extensions.geometry, mode text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _postgis_stats(tbl regclass, att_name text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._postgis_stats(tbl regclass, att_name text, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _raster_constraint_info_alignment(rastschema name, rasttable name, rastcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._raster_constraint_info_alignment(rastschema name, rasttable name, rastcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _raster_constraint_info_blocksize(rastschema name, rasttable name, rastcolumn name, axis text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._raster_constraint_info_blocksize(rastschema name, rasttable name, rastcolumn name, axis text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _raster_constraint_info_coverage_tile(rastschema name, rasttable name, rastcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._raster_constraint_info_coverage_tile(rastschema name, rasttable name, rastcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _raster_constraint_info_extent(rastschema name, rasttable name, rastcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._raster_constraint_info_extent(rastschema name, rasttable name, rastcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _raster_constraint_info_index(rastschema name, rasttable name, rastcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._raster_constraint_info_index(rastschema name, rasttable name, rastcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _raster_constraint_info_nodata_values(rastschema name, rasttable name, rastcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._raster_constraint_info_nodata_values(rastschema name, rasttable name, rastcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _raster_constraint_info_num_bands(rastschema name, rasttable name, rastcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._raster_constraint_info_num_bands(rastschema name, rasttable name, rastcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _raster_constraint_info_out_db(rastschema name, rasttable name, rastcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._raster_constraint_info_out_db(rastschema name, rasttable name, rastcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _raster_constraint_info_pixel_types(rastschema name, rasttable name, rastcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._raster_constraint_info_pixel_types(rastschema name, rasttable name, rastcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _raster_constraint_info_regular_blocking(rastschema name, rasttable name, rastcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._raster_constraint_info_regular_blocking(rastschema name, rasttable name, rastcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _raster_constraint_info_scale(rastschema name, rasttable name, rastcolumn name, axis character); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._raster_constraint_info_scale(rastschema name, rasttable name, rastcolumn name, axis character) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _raster_constraint_info_spatially_unique(rastschema name, rasttable name, rastcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._raster_constraint_info_spatially_unique(rastschema name, rasttable name, rastcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _raster_constraint_info_srid(rastschema name, rasttable name, rastcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._raster_constraint_info_srid(rastschema name, rasttable name, rastcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _raster_constraint_nodata_values(rast extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._raster_constraint_nodata_values(rast extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _raster_constraint_out_db(rast extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._raster_constraint_out_db(rast extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _raster_constraint_pixel_types(rast extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._raster_constraint_pixel_types(rast extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_3ddfullywithin(geom1 extensions.geometry, geom2 extensions.geometry, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_3ddfullywithin(geom1 extensions.geometry, geom2 extensions.geometry, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_3ddwithin(geom1 extensions.geometry, geom2 extensions.geometry, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_3ddwithin(geom1 extensions.geometry, geom2 extensions.geometry, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_3dintersects(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_3dintersects(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_asgml(integer, extensions.geometry, integer, integer, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_asgml(integer, extensions.geometry, integer, integer, text, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_aspect4ma(value double precision[], pos integer[], VARIADIC userargs text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_aspect4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_asraster(geom extensions.geometry, scalex double precision, scaley double precision, width integer, height integer, pixeltype text[], value double precision[], nodataval double precision[], upperleftx double precision, upperlefty double precision, gridx double precision, gridy double precision, skewx double precision, skewy double precision, touched boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_asraster(geom extensions.geometry, scalex double precision, scaley double precision, width integer, height integer, pixeltype text[], value double precision[], nodataval double precision[], upperleftx double precision, upperlefty double precision, gridx double precision, gridy double precision, skewx double precision, skewy double precision, touched boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_asx3d(integer, extensions.geometry, integer, integer, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_asx3d(integer, extensions.geometry, integer, integer, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_bestsrid(extensions.geography); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_bestsrid(extensions.geography) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_bestsrid(extensions.geography, extensions.geography); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_bestsrid(extensions.geography, extensions.geography) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_clip(rast extensions.raster, nband integer[], geom extensions.geometry, nodataval double precision[], crop boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_clip(rast extensions.raster, nband integer[], geom extensions.geometry, nodataval double precision[], crop boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_colormap(rast extensions.raster, nband integer, colormap text, method text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_colormap(rast extensions.raster, nband integer, colormap text, method text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_contains(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_contains(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_contains(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_contains(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_containsproperly(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_containsproperly(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_containsproperly(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_containsproperly(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_convertarray4ma(value double precision[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_convertarray4ma(value double precision[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_count(rast extensions.raster, nband integer, exclude_nodata_value boolean, sample_percent double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_count(rast extensions.raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_countagg_finalfn(agg extensions.agg_count); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_countagg_finalfn(agg extensions.agg_count) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_countagg_transfn(agg extensions.agg_count, rast extensions.raster, exclude_nodata_value boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_countagg_transfn(agg extensions.agg_count, rast extensions.raster, exclude_nodata_value boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_countagg_transfn(agg extensions.agg_count, rast extensions.raster, nband integer, exclude_nodata_value boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_countagg_transfn(agg extensions.agg_count, rast extensions.raster, nband integer, exclude_nodata_value boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_countagg_transfn(agg extensions.agg_count, rast extensions.raster, nband integer, exclude_nodata_value boolean, sample_percent double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_countagg_transfn(agg extensions.agg_count, rast extensions.raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_coveredby(geog1 extensions.geography, geog2 extensions.geography); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_coveredby(geog1 extensions.geography, geog2 extensions.geography) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_coveredby(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_coveredby(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_coveredby(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_coveredby(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_covers(geog1 extensions.geography, geog2 extensions.geography); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_covers(geog1 extensions.geography, geog2 extensions.geography) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_covers(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_covers(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_covers(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_covers(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_crosses(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_crosses(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_dfullywithin(geom1 extensions.geometry, geom2 extensions.geometry, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_dfullywithin(geom1 extensions.geometry, geom2 extensions.geometry, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_dfullywithin(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer, distance double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_dfullywithin(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer, distance double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_distancetree(extensions.geography, extensions.geography); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_distancetree(extensions.geography, extensions.geography) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_distancetree(extensions.geography, extensions.geography, double precision, boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_distancetree(extensions.geography, extensions.geography, double precision, boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_distanceuncached(extensions.geography, extensions.geography); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_distanceuncached(extensions.geography, extensions.geography) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_distanceuncached(extensions.geography, extensions.geography, boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_distanceuncached(extensions.geography, extensions.geography, boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_distanceuncached(extensions.geography, extensions.geography, double precision, boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_distanceuncached(extensions.geography, extensions.geography, double precision, boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_dwithin(geom1 extensions.geometry, geom2 extensions.geometry, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_dwithin(geom1 extensions.geometry, geom2 extensions.geometry, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_dwithin(geog1 extensions.geography, geog2 extensions.geography, tolerance double precision, use_spheroid boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_dwithin(geog1 extensions.geography, geog2 extensions.geography, tolerance double precision, use_spheroid boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_dwithin(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer, distance double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_dwithin(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer, distance double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_dwithinuncached(extensions.geography, extensions.geography, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_dwithinuncached(extensions.geography, extensions.geography, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_dwithinuncached(extensions.geography, extensions.geography, double precision, boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_dwithinuncached(extensions.geography, extensions.geography, double precision, boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_equals(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_equals(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_expand(extensions.geography, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_expand(extensions.geography, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_gdalwarp(rast extensions.raster, algorithm text, maxerr double precision, srid integer, scalex double precision, scaley double precision, gridx double precision, gridy double precision, skewx double precision, skewy double precision, width integer, height integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_gdalwarp(rast extensions.raster, algorithm text, maxerr double precision, srid integer, scalex double precision, scaley double precision, gridx double precision, gridy double precision, skewx double precision, skewy double precision, width integer, height integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_geomfromgml(text, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_geomfromgml(text, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_grayscale4ma(value double precision[], pos integer[], VARIADIC userargs text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_grayscale4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_hillshade4ma(value double precision[], pos integer[], VARIADIC userargs text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_hillshade4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_histogram(rast extensions.raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, min double precision, max double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_histogram(rast extensions.raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, min double precision, max double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_intersects(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_intersects(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_intersects(geom extensions.geometry, rast extensions.raster, nband integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_intersects(geom extensions.geometry, rast extensions.raster, nband integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_intersects(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_intersects(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_linecrossingdirection(line1 extensions.geometry, line2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_linecrossingdirection(line1 extensions.geometry, line2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_longestline(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_longestline(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_mapalgebra(rastbandargset extensions.rastbandarg[], expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_mapalgebra(rastbandargset extensions.rastbandarg[], expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_mapalgebra(rastbandargset extensions.rastbandarg[], callbackfunc regprocedure, pixeltype text, distancex integer, distancey integer, extenttype text, customextent extensions.raster, mask double precision[], weighted boolean, VARIADIC userargs text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_mapalgebra(rastbandargset extensions.rastbandarg[], callbackfunc regprocedure, pixeltype text, distancex integer, distancey integer, extenttype text, customextent extensions.raster, mask double precision[], weighted boolean, VARIADIC userargs text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_maxdistance(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_maxdistance(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_neighborhood(rast extensions.raster, band integer, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_neighborhood(rast extensions.raster, band integer, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_orderingequals(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_orderingequals(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_overlaps(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_overlaps(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_overlaps(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_overlaps(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_pixelascentroids(rast extensions.raster, band integer, columnx integer, rowy integer, exclude_nodata_value boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_pixelascentroids(rast extensions.raster, band integer, columnx integer, rowy integer, exclude_nodata_value boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_pixelaspolygons(rast extensions.raster, band integer, columnx integer, rowy integer, exclude_nodata_value boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_pixelaspolygons(rast extensions.raster, band integer, columnx integer, rowy integer, exclude_nodata_value boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_pointoutside(extensions.geography); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_pointoutside(extensions.geography) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_quantile(rast extensions.raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_quantile(rast extensions.raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_rastertoworldcoord(rast extensions.raster, columnx integer, rowy integer, OUT longitude double precision, OUT latitude double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_rastertoworldcoord(rast extensions.raster, columnx integer, rowy integer, OUT longitude double precision, OUT latitude double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_reclass(rast extensions.raster, VARIADIC reclassargset extensions.reclassarg[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_reclass(rast extensions.raster, VARIADIC reclassargset extensions.reclassarg[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_roughness4ma(value double precision[], pos integer[], VARIADIC userargs text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_roughness4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_samealignment_finalfn(agg extensions.agg_samealignment); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_samealignment_finalfn(agg extensions.agg_samealignment) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_samealignment_transfn(agg extensions.agg_samealignment, rast extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_samealignment_transfn(agg extensions.agg_samealignment, rast extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_setvalues(rast extensions.raster, nband integer, x integer, y integer, newvalueset double precision[], noset boolean[], hasnosetvalue boolean, nosetvalue double precision, keepnodata boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_setvalues(rast extensions.raster, nband integer, x integer, y integer, newvalueset double precision[], noset boolean[], hasnosetvalue boolean, nosetvalue double precision, keepnodata boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_slope4ma(value double precision[], pos integer[], VARIADIC userargs text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_slope4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_sortablehash(geom extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_sortablehash(geom extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_summarystats(rast extensions.raster, nband integer, exclude_nodata_value boolean, sample_percent double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_summarystats(rast extensions.raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_summarystats_finalfn(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_summarystats_finalfn(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_summarystats_transfn(internal, extensions.raster, boolean, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_summarystats_transfn(internal, extensions.raster, boolean, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_summarystats_transfn(internal, extensions.raster, integer, boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_summarystats_transfn(internal, extensions.raster, integer, boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_summarystats_transfn(internal, extensions.raster, integer, boolean, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_summarystats_transfn(internal, extensions.raster, integer, boolean, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_tile(rast extensions.raster, width integer, height integer, nband integer[], padwithnodata boolean, nodataval double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_tile(rast extensions.raster, width integer, height integer, nband integer[], padwithnodata boolean, nodataval double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_touches(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_touches(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_touches(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_touches(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_tpi4ma(value double precision[], pos integer[], VARIADIC userargs text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_tpi4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_tri4ma(value double precision[], pos integer[], VARIADIC userargs text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_tri4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_union_finalfn(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_union_finalfn(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_union_transfn(internal, extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_union_transfn(internal, extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_union_transfn(internal, extensions.raster, extensions.unionarg[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_union_transfn(internal, extensions.raster, extensions.unionarg[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_union_transfn(internal, extensions.raster, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_union_transfn(internal, extensions.raster, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_union_transfn(internal, extensions.raster, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_union_transfn(internal, extensions.raster, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_union_transfn(internal, extensions.raster, integer, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_union_transfn(internal, extensions.raster, integer, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_valuecount(rast extensions.raster, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer, OUT percent double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_valuecount(rast extensions.raster, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer, OUT percent double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer, OUT percent double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer, OUT percent double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_voronoi(g1 extensions.geometry, clip extensions.geometry, tolerance double precision, return_polygons boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_voronoi(g1 extensions.geometry, clip extensions.geometry, tolerance double precision, return_polygons boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_within(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_within(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_within(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_within(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _st_worldtorastercoord(rast extensions.raster, longitude double precision, latitude double precision, OUT columnx integer, OUT rowy integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._st_worldtorastercoord(rast extensions.raster, longitude double precision, latitude double precision, OUT columnx integer, OUT rowy integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION _updaterastersrid(schema_name name, table_name name, column_name name, new_srid integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions._updaterastersrid(schema_name name, table_name name, column_name name, new_srid integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION addauth(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.addauth(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION addgeometrycolumn(table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.addgeometrycolumn(table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION addgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.addgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION addgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer, new_type character varying, new_dim integer, use_typmod boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.addgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer, new_type character varying, new_dim integer, use_typmod boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION addoverviewconstraints(ovtable name, ovcolumn name, reftable name, refcolumn name, ovfactor integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.addoverviewconstraints(ovtable name, ovcolumn name, reftable name, refcolumn name, ovfactor integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION addoverviewconstraints(ovschema name, ovtable name, ovcolumn name, refschema name, reftable name, refcolumn name, ovfactor integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.addoverviewconstraints(ovschema name, ovtable name, ovcolumn name, refschema name, reftable name, refcolumn name, ovfactor integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION addrasterconstraints(rasttable name, rastcolumn name, VARIADIC constraints text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.addrasterconstraints(rasttable name, rastcolumn name, VARIADIC constraints text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION addrasterconstraints(rastschema name, rasttable name, rastcolumn name, VARIADIC constraints text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.addrasterconstraints(rastschema name, rasttable name, rastcolumn name, VARIADIC constraints text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION addrasterconstraints(rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.addrasterconstraints(rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION addrasterconstraints(rastschema name, rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.addrasterconstraints(rastschema name, rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION algorithm_sign(signables text, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) FROM postgres;
GRANT ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION armor(bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.armor(bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.armor(bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.armor(bytea) TO dashboard_user;


--
-- Name: FUNCTION armor(bytea, text[], text[]); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.armor(bytea, text[], text[]) FROM postgres;
GRANT ALL ON FUNCTION extensions.armor(bytea, text[], text[]) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.armor(bytea, text[], text[]) TO dashboard_user;


--
-- Name: FUNCTION box3dtobox(extensions.box3d); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.box3dtobox(extensions.box3d) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION checkauth(text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.checkauth(text, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION checkauth(text, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.checkauth(text, text, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION checkauthtrigger(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.checkauthtrigger() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION contains_2d(extensions.box2df, extensions.box2df); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.contains_2d(extensions.box2df, extensions.box2df) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION contains_2d(extensions.box2df, extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.contains_2d(extensions.box2df, extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION contains_2d(extensions.geometry, extensions.box2df); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.contains_2d(extensions.geometry, extensions.box2df) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION crypt(text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.crypt(text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.crypt(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.crypt(text, text) TO dashboard_user;


--
-- Name: FUNCTION cube(double precision[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.cube(double precision[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION cube(double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.cube(double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION cube(extensions.cube, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.cube(extensions.cube, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION cube(double precision[], double precision[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.cube(double precision[], double precision[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION cube(double precision, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.cube(double precision, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION cube(extensions.cube, double precision, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.cube(extensions.cube, double precision, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION cube_cmp(extensions.cube, extensions.cube); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.cube_cmp(extensions.cube, extensions.cube) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION cube_contained(extensions.cube, extensions.cube); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.cube_contained(extensions.cube, extensions.cube) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION cube_contains(extensions.cube, extensions.cube); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.cube_contains(extensions.cube, extensions.cube) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION cube_coord(extensions.cube, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.cube_coord(extensions.cube, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION cube_coord_llur(extensions.cube, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.cube_coord_llur(extensions.cube, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION cube_dim(extensions.cube); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.cube_dim(extensions.cube) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION cube_distance(extensions.cube, extensions.cube); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.cube_distance(extensions.cube, extensions.cube) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION cube_enlarge(extensions.cube, double precision, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.cube_enlarge(extensions.cube, double precision, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION cube_eq(extensions.cube, extensions.cube); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.cube_eq(extensions.cube, extensions.cube) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION cube_ge(extensions.cube, extensions.cube); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.cube_ge(extensions.cube, extensions.cube) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION cube_gt(extensions.cube, extensions.cube); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.cube_gt(extensions.cube, extensions.cube) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION cube_inter(extensions.cube, extensions.cube); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.cube_inter(extensions.cube, extensions.cube) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION cube_is_point(extensions.cube); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.cube_is_point(extensions.cube) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION cube_le(extensions.cube, extensions.cube); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.cube_le(extensions.cube, extensions.cube) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION cube_ll_coord(extensions.cube, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.cube_ll_coord(extensions.cube, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION cube_lt(extensions.cube, extensions.cube); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.cube_lt(extensions.cube, extensions.cube) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION cube_ne(extensions.cube, extensions.cube); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.cube_ne(extensions.cube, extensions.cube) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION cube_overlap(extensions.cube, extensions.cube); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.cube_overlap(extensions.cube, extensions.cube) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION cube_size(extensions.cube); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.cube_size(extensions.cube) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION cube_subset(extensions.cube, integer[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.cube_subset(extensions.cube, integer[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION cube_union(extensions.cube, extensions.cube); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.cube_union(extensions.cube, extensions.cube) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION cube_ur_coord(extensions.cube, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.cube_ur_coord(extensions.cube, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION dearmor(text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.dearmor(text) FROM postgres;
GRANT ALL ON FUNCTION extensions.dearmor(text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.dearmor(text) TO dashboard_user;


--
-- Name: FUNCTION decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION decrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION digest(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.digest(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.digest(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.digest(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION digest(text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.digest(text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.digest(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.digest(text, text) TO dashboard_user;


--
-- Name: FUNCTION disablelongtransactions(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.disablelongtransactions() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION distance_chebyshev(extensions.cube, extensions.cube); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.distance_chebyshev(extensions.cube, extensions.cube) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION distance_taxicab(extensions.cube, extensions.cube); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.distance_taxicab(extensions.cube, extensions.cube) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION dropgeometrycolumn(table_name character varying, column_name character varying); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.dropgeometrycolumn(table_name character varying, column_name character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION dropgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.dropgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION dropgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.dropgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION dropgeometrytable(table_name character varying); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.dropgeometrytable(table_name character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION dropgeometrytable(schema_name character varying, table_name character varying); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.dropgeometrytable(schema_name character varying, table_name character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION dropgeometrytable(catalog_name character varying, schema_name character varying, table_name character varying); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.dropgeometrytable(catalog_name character varying, schema_name character varying, table_name character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION dropoverviewconstraints(ovtable name, ovcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.dropoverviewconstraints(ovtable name, ovcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION dropoverviewconstraints(ovschema name, ovtable name, ovcolumn name); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.dropoverviewconstraints(ovschema name, ovtable name, ovcolumn name) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION droprasterconstraints(rasttable name, rastcolumn name, VARIADIC constraints text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.droprasterconstraints(rasttable name, rastcolumn name, VARIADIC constraints text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION droprasterconstraints(rastschema name, rasttable name, rastcolumn name, VARIADIC constraints text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.droprasterconstraints(rastschema name, rasttable name, rastcolumn name, VARIADIC constraints text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION droprasterconstraints(rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.droprasterconstraints(rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION droprasterconstraints(rastschema name, rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.droprasterconstraints(rastschema name, rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION enablelongtransactions(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.enablelongtransactions() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION encrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION encrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION equals(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.equals(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION find_srid(character varying, character varying, character varying); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.find_srid(character varying, character varying, character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION g_cube_consistent(internal, extensions.cube, smallint, oid, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.g_cube_consistent(internal, extensions.cube, smallint, oid, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION g_cube_distance(internal, extensions.cube, smallint, oid, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.g_cube_distance(internal, extensions.cube, smallint, oid, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION g_cube_penalty(internal, internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.g_cube_penalty(internal, internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION g_cube_picksplit(internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.g_cube_picksplit(internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION g_cube_same(extensions.cube, extensions.cube, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.g_cube_same(extensions.cube, extensions.cube, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION g_cube_union(internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.g_cube_union(internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION gen_random_bytes(integer); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_random_bytes(integer) FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_random_bytes(integer) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_random_bytes(integer) TO dashboard_user;


--
-- Name: FUNCTION gen_random_uuid(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_random_uuid() FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_random_uuid() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_random_uuid() TO dashboard_user;


--
-- Name: FUNCTION gen_salt(text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_salt(text) FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_salt(text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_salt(text) TO dashboard_user;


--
-- Name: FUNCTION gen_salt(text, integer); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_salt(text, integer) FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_salt(text, integer) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_salt(text, integer) TO dashboard_user;


--
-- Name: FUNCTION geog_brin_inclusion_add_value(internal, internal, internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geog_brin_inclusion_add_value(internal, internal, internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geography_cmp(extensions.geography, extensions.geography); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geography_cmp(extensions.geography, extensions.geography) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geography_distance_knn(extensions.geography, extensions.geography); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geography_distance_knn(extensions.geography, extensions.geography) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geography_eq(extensions.geography, extensions.geography); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geography_eq(extensions.geography, extensions.geography) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geography_ge(extensions.geography, extensions.geography); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geography_ge(extensions.geography, extensions.geography) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geography_gist_compress(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geography_gist_compress(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geography_gist_consistent(internal, extensions.geography, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geography_gist_consistent(internal, extensions.geography, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geography_gist_decompress(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geography_gist_decompress(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geography_gist_distance(internal, extensions.geography, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geography_gist_distance(internal, extensions.geography, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geography_gist_penalty(internal, internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geography_gist_penalty(internal, internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geography_gist_picksplit(internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geography_gist_picksplit(internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geography_gist_same(extensions.box2d, extensions.box2d, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geography_gist_same(extensions.box2d, extensions.box2d, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geography_gist_union(bytea, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geography_gist_union(bytea, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geography_gt(extensions.geography, extensions.geography); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geography_gt(extensions.geography, extensions.geography) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geography_le(extensions.geography, extensions.geography); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geography_le(extensions.geography, extensions.geography) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geography_lt(extensions.geography, extensions.geography); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geography_lt(extensions.geography, extensions.geography) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geography_overlaps(extensions.geography, extensions.geography); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geography_overlaps(extensions.geography, extensions.geography) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geography_spgist_choose_nd(internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geography_spgist_choose_nd(internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geography_spgist_compress_nd(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geography_spgist_compress_nd(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geography_spgist_config_nd(internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geography_spgist_config_nd(internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geography_spgist_inner_consistent_nd(internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geography_spgist_inner_consistent_nd(internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geography_spgist_leaf_consistent_nd(internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geography_spgist_leaf_consistent_nd(internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geography_spgist_picksplit_nd(internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geography_spgist_picksplit_nd(internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geom2d_brin_inclusion_add_value(internal, internal, internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geom2d_brin_inclusion_add_value(internal, internal, internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geom3d_brin_inclusion_add_value(internal, internal, internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geom3d_brin_inclusion_add_value(internal, internal, internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geom4d_brin_inclusion_add_value(internal, internal, internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geom4d_brin_inclusion_add_value(internal, internal, internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_above(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_above(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_below(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_below(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_cmp(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_cmp(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_contained_3d(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_contained_3d(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_contained_by_raster(extensions.geometry, extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_contained_by_raster(extensions.geometry, extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_contains(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_contains(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_contains_3d(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_contains_3d(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_contains_nd(extensions.geometry, extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_contains_nd(extensions.geometry, extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_distance_box(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_distance_box(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_distance_centroid(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_distance_centroid(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_distance_centroid_nd(extensions.geometry, extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_distance_centroid_nd(extensions.geometry, extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_distance_cpa(extensions.geometry, extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_distance_cpa(extensions.geometry, extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_eq(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_eq(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_ge(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_ge(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_gist_compress_2d(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_gist_compress_2d(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_gist_compress_nd(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_gist_compress_nd(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_gist_consistent_2d(internal, extensions.geometry, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_gist_consistent_2d(internal, extensions.geometry, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_gist_consistent_nd(internal, extensions.geometry, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_gist_consistent_nd(internal, extensions.geometry, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_gist_decompress_2d(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_gist_decompress_2d(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_gist_decompress_nd(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_gist_decompress_nd(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_gist_distance_2d(internal, extensions.geometry, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_gist_distance_2d(internal, extensions.geometry, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_gist_distance_nd(internal, extensions.geometry, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_gist_distance_nd(internal, extensions.geometry, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_gist_penalty_2d(internal, internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_gist_penalty_2d(internal, internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_gist_penalty_nd(internal, internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_gist_penalty_nd(internal, internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_gist_picksplit_2d(internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_gist_picksplit_2d(internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_gist_picksplit_nd(internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_gist_picksplit_nd(internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_gist_same_2d(geom1 extensions.geometry, geom2 extensions.geometry, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_gist_same_2d(geom1 extensions.geometry, geom2 extensions.geometry, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_gist_same_nd(extensions.geometry, extensions.geometry, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_gist_same_nd(extensions.geometry, extensions.geometry, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_gist_sortsupport_2d(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_gist_sortsupport_2d(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_gist_union_2d(bytea, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_gist_union_2d(bytea, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_gist_union_nd(bytea, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_gist_union_nd(bytea, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_gt(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_gt(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_hash(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_hash(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_le(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_le(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_left(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_left(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_lt(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_lt(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_overabove(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_overabove(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_overbelow(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_overbelow(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_overlaps(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_overlaps(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_overlaps_3d(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_overlaps_3d(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_overlaps_nd(extensions.geometry, extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_overlaps_nd(extensions.geometry, extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_overleft(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_overleft(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_overright(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_overright(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_raster_contain(extensions.geometry, extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_raster_contain(extensions.geometry, extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_raster_overlap(extensions.geometry, extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_raster_overlap(extensions.geometry, extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_right(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_right(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_same(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_same(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_same_3d(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_same_3d(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_same_nd(extensions.geometry, extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_same_nd(extensions.geometry, extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_sortsupport(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_sortsupport(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_spgist_choose_2d(internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_spgist_choose_2d(internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_spgist_choose_3d(internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_spgist_choose_3d(internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_spgist_choose_nd(internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_spgist_choose_nd(internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_spgist_compress_2d(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_spgist_compress_2d(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_spgist_compress_3d(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_spgist_compress_3d(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_spgist_compress_nd(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_spgist_compress_nd(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_spgist_config_2d(internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_spgist_config_2d(internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_spgist_config_3d(internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_spgist_config_3d(internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_spgist_config_nd(internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_spgist_config_nd(internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_spgist_inner_consistent_2d(internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_spgist_inner_consistent_2d(internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_spgist_inner_consistent_3d(internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_spgist_inner_consistent_3d(internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_spgist_inner_consistent_nd(internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_spgist_inner_consistent_nd(internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_spgist_leaf_consistent_2d(internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_spgist_leaf_consistent_2d(internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_spgist_leaf_consistent_3d(internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_spgist_leaf_consistent_3d(internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_spgist_leaf_consistent_nd(internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_spgist_leaf_consistent_nd(internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_spgist_picksplit_2d(internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_spgist_picksplit_2d(internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_spgist_picksplit_3d(internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_spgist_picksplit_3d(internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_spgist_picksplit_nd(internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_spgist_picksplit_nd(internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_within(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_within(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometry_within_nd(extensions.geometry, extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometry_within_nd(extensions.geometry, extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometrytype(extensions.geography); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometrytype(extensions.geography) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geometrytype(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geometrytype(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geomfromewkb(bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geomfromewkb(bytea) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geomfromewkt(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.geomfromewkt(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION get_proj4_from_srid(integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.get_proj4_from_srid(integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION gettransactionid(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.gettransactionid() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION grant_pg_cron_access(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.grant_pg_cron_access() FROM postgres;
GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO dashboard_user;


--
-- Name: FUNCTION grant_pg_graphql_access(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.grant_pg_graphql_access() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION grant_pg_net_access(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.grant_pg_net_access() FROM postgres;
GRANT ALL ON FUNCTION extensions.grant_pg_net_access() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.grant_pg_net_access() TO dashboard_user;


--
-- Name: FUNCTION gserialized_gist_joinsel_2d(internal, oid, internal, smallint); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.gserialized_gist_joinsel_2d(internal, oid, internal, smallint) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION gserialized_gist_joinsel_nd(internal, oid, internal, smallint); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.gserialized_gist_joinsel_nd(internal, oid, internal, smallint) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION gserialized_gist_sel_2d(internal, oid, internal, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.gserialized_gist_sel_2d(internal, oid, internal, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION gserialized_gist_sel_nd(internal, oid, internal, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.gserialized_gist_sel_nd(internal, oid, internal, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION hmac(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.hmac(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.hmac(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.hmac(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION hmac(text, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.hmac(text, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.hmac(text, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.hmac(text, text, text) TO dashboard_user;


--
-- Name: FUNCTION index(extensions.ltree, extensions.ltree); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.index(extensions.ltree, extensions.ltree) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION index(extensions.ltree, extensions.ltree, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.index(extensions.ltree, extensions.ltree, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION is_contained_2d(extensions.box2df, extensions.box2df); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.is_contained_2d(extensions.box2df, extensions.box2df) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION is_contained_2d(extensions.box2df, extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.is_contained_2d(extensions.box2df, extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION is_contained_2d(extensions.geometry, extensions.box2df); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.is_contained_2d(extensions.geometry, extensions.box2df) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION lca(extensions.ltree[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.lca(extensions.ltree[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION lca(extensions.ltree, extensions.ltree); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.lca(extensions.ltree, extensions.ltree) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION lca(extensions.ltree, extensions.ltree, extensions.ltree); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.lca(extensions.ltree, extensions.ltree, extensions.ltree) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION lca(extensions.ltree, extensions.ltree, extensions.ltree, extensions.ltree); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.lca(extensions.ltree, extensions.ltree, extensions.ltree, extensions.ltree) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION lca(extensions.ltree, extensions.ltree, extensions.ltree, extensions.ltree, extensions.ltree); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.lca(extensions.ltree, extensions.ltree, extensions.ltree, extensions.ltree, extensions.ltree) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION lca(extensions.ltree, extensions.ltree, extensions.ltree, extensions.ltree, extensions.ltree, extensions.ltree); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.lca(extensions.ltree, extensions.ltree, extensions.ltree, extensions.ltree, extensions.ltree, extensions.ltree) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION lca(extensions.ltree, extensions.ltree, extensions.ltree, extensions.ltree, extensions.ltree, extensions.ltree, extensions.ltree); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.lca(extensions.ltree, extensions.ltree, extensions.ltree, extensions.ltree, extensions.ltree, extensions.ltree, extensions.ltree) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION lca(extensions.ltree, extensions.ltree, extensions.ltree, extensions.ltree, extensions.ltree, extensions.ltree, extensions.ltree, extensions.ltree); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.lca(extensions.ltree, extensions.ltree, extensions.ltree, extensions.ltree, extensions.ltree, extensions.ltree, extensions.ltree, extensions.ltree) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION lockrow(text, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.lockrow(text, text, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION lockrow(text, text, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.lockrow(text, text, text, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION lockrow(text, text, text, timestamp without time zone); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.lockrow(text, text, text, timestamp without time zone) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION lockrow(text, text, text, text, timestamp without time zone); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.lockrow(text, text, text, text, timestamp without time zone) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION longtransactionsenabled(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.longtransactionsenabled() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION lt_q_regex(extensions.ltree, extensions.lquery[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.lt_q_regex(extensions.ltree, extensions.lquery[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION lt_q_rregex(extensions.lquery[], extensions.ltree); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.lt_q_rregex(extensions.lquery[], extensions.ltree) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltq_regex(extensions.ltree, extensions.lquery); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltq_regex(extensions.ltree, extensions.lquery) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltq_rregex(extensions.lquery, extensions.ltree); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltq_rregex(extensions.lquery, extensions.ltree) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltree2text(extensions.ltree); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltree2text(extensions.ltree) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltree_addltree(extensions.ltree, extensions.ltree); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltree_addltree(extensions.ltree, extensions.ltree) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltree_addtext(extensions.ltree, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltree_addtext(extensions.ltree, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltree_cmp(extensions.ltree, extensions.ltree); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltree_cmp(extensions.ltree, extensions.ltree) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltree_compress(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltree_compress(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltree_consistent(internal, extensions.ltree, smallint, oid, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltree_consistent(internal, extensions.ltree, smallint, oid, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltree_decompress(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltree_decompress(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltree_eq(extensions.ltree, extensions.ltree); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltree_eq(extensions.ltree, extensions.ltree) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltree_ge(extensions.ltree, extensions.ltree); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltree_ge(extensions.ltree, extensions.ltree) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltree_gist_options(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltree_gist_options(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltree_gt(extensions.ltree, extensions.ltree); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltree_gt(extensions.ltree, extensions.ltree) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltree_isparent(extensions.ltree, extensions.ltree); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltree_isparent(extensions.ltree, extensions.ltree) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltree_le(extensions.ltree, extensions.ltree); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltree_le(extensions.ltree, extensions.ltree) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltree_lt(extensions.ltree, extensions.ltree); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltree_lt(extensions.ltree, extensions.ltree) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltree_ne(extensions.ltree, extensions.ltree); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltree_ne(extensions.ltree, extensions.ltree) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltree_penalty(internal, internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltree_penalty(internal, internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltree_picksplit(internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltree_picksplit(internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltree_risparent(extensions.ltree, extensions.ltree); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltree_risparent(extensions.ltree, extensions.ltree) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltree_same(extensions.ltree_gist, extensions.ltree_gist, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltree_same(extensions.ltree_gist, extensions.ltree_gist, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltree_textadd(text, extensions.ltree); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltree_textadd(text, extensions.ltree) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltree_union(internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltree_union(internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltreeparentsel(internal, oid, internal, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltreeparentsel(internal, oid, internal, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltxtq_exec(extensions.ltree, extensions.ltxtquery); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltxtq_exec(extensions.ltree, extensions.ltxtquery) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION ltxtq_rexec(extensions.ltxtquery, extensions.ltree); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.ltxtq_rexec(extensions.ltxtquery, extensions.ltree) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION nlevel(extensions.ltree); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.nlevel(extensions.ltree) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION overlaps_2d(extensions.box2df, extensions.box2df); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.overlaps_2d(extensions.box2df, extensions.box2df) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION overlaps_2d(extensions.box2df, extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.overlaps_2d(extensions.box2df, extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION overlaps_2d(extensions.geometry, extensions.box2df); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.overlaps_2d(extensions.geometry, extensions.box2df) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION overlaps_geog(extensions.geography, extensions.gidx); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.overlaps_geog(extensions.geography, extensions.gidx) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION overlaps_geog(extensions.gidx, extensions.geography); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.overlaps_geog(extensions.gidx, extensions.geography) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION overlaps_geog(extensions.gidx, extensions.gidx); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.overlaps_geog(extensions.gidx, extensions.gidx) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION overlaps_nd(extensions.geometry, extensions.gidx); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.overlaps_nd(extensions.geometry, extensions.gidx) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION overlaps_nd(extensions.gidx, extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.overlaps_nd(extensions.gidx, extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION overlaps_nd(extensions.gidx, extensions.gidx); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.overlaps_nd(extensions.gidx, extensions.gidx) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION parse_address(text, OUT num text, OUT street text, OUT street2 text, OUT address1 text, OUT city text, OUT state text, OUT zip text, OUT zipplus text, OUT country text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.parse_address(text, OUT num text, OUT street text, OUT street2 text, OUT address1 text, OUT city text, OUT state text, OUT zip text, OUT zipplus text, OUT country text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) FROM postgres;
GRANT ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) FROM postgres;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements_reset(userid oid, dbid oid, queryid bigint); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) FROM postgres;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) TO dashboard_user;


--
-- Name: FUNCTION pgis_asflatgeobuf_finalfn(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgis_asflatgeobuf_finalfn(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgis_asflatgeobuf_transfn(internal, anyelement); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgis_asflatgeobuf_transfn(internal, anyelement) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgis_asflatgeobuf_transfn(internal, anyelement, boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgis_asflatgeobuf_transfn(internal, anyelement, boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgis_asflatgeobuf_transfn(internal, anyelement, boolean, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgis_asflatgeobuf_transfn(internal, anyelement, boolean, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgis_asgeobuf_finalfn(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgis_asgeobuf_finalfn(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgis_asgeobuf_transfn(internal, anyelement); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgis_asgeobuf_transfn(internal, anyelement) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgis_asgeobuf_transfn(internal, anyelement, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgis_asgeobuf_transfn(internal, anyelement, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgis_asmvt_combinefn(internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgis_asmvt_combinefn(internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgis_asmvt_deserialfn(bytea, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgis_asmvt_deserialfn(bytea, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgis_asmvt_finalfn(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgis_asmvt_finalfn(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgis_asmvt_serialfn(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgis_asmvt_serialfn(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgis_asmvt_transfn(internal, anyelement); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgis_asmvt_transfn(internal, anyelement) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgis_asmvt_transfn(internal, anyelement, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgis_asmvt_transfn(internal, anyelement, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgis_asmvt_transfn(internal, anyelement, text, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgis_asmvt_transfn(internal, anyelement, text, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgis_asmvt_transfn(internal, anyelement, text, integer, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgis_asmvt_transfn(internal, anyelement, text, integer, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgis_asmvt_transfn(internal, anyelement, text, integer, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgis_asmvt_transfn(internal, anyelement, text, integer, text, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgis_geometry_accum_transfn(internal, extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgis_geometry_accum_transfn(internal, extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgis_geometry_accum_transfn(internal, extensions.geometry, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgis_geometry_accum_transfn(internal, extensions.geometry, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgis_geometry_accum_transfn(internal, extensions.geometry, double precision, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgis_geometry_accum_transfn(internal, extensions.geometry, double precision, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgis_geometry_clusterintersecting_finalfn(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgis_geometry_clusterintersecting_finalfn(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgis_geometry_clusterwithin_finalfn(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgis_geometry_clusterwithin_finalfn(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgis_geometry_collect_finalfn(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgis_geometry_collect_finalfn(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgis_geometry_makeline_finalfn(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgis_geometry_makeline_finalfn(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgis_geometry_polygonize_finalfn(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgis_geometry_polygonize_finalfn(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgis_geometry_union_parallel_combinefn(internal, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgis_geometry_union_parallel_combinefn(internal, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgis_geometry_union_parallel_deserialfn(bytea, internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgis_geometry_union_parallel_deserialfn(bytea, internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgis_geometry_union_parallel_finalfn(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgis_geometry_union_parallel_finalfn(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgis_geometry_union_parallel_serialfn(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgis_geometry_union_parallel_serialfn(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgis_geometry_union_parallel_transfn(internal, extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgis_geometry_union_parallel_transfn(internal, extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgis_geometry_union_parallel_transfn(internal, extensions.geometry, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgis_geometry_union_parallel_transfn(internal, extensions.geometry, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgp_armor_headers(text, OUT key text, OUT value text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) TO dashboard_user;


--
-- Name: FUNCTION pgp_key_id(bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_key_id(bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_key_id(bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_key_id(bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt(text, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt(text, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt(bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt(text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt(text, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgrst_ddl_watch(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgrst_ddl_watch() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgrst_drop_watch(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgrst_drop_watch() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION populate_geometry_columns(use_typmod boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.populate_geometry_columns(use_typmod boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION populate_geometry_columns(tbl_oid oid, use_typmod boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.populate_geometry_columns(tbl_oid oid, use_typmod boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_addbbox(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_addbbox(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_cache_bbox(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_cache_bbox() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_constraint_dims(geomschema text, geomtable text, geomcolumn text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_constraint_dims(geomschema text, geomtable text, geomcolumn text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_constraint_srid(geomschema text, geomtable text, geomcolumn text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_constraint_srid(geomschema text, geomtable text, geomcolumn text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_constraint_type(geomschema text, geomtable text, geomcolumn text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_constraint_type(geomschema text, geomtable text, geomcolumn text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_dropbbox(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_dropbbox(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_extensions_upgrade(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_extensions_upgrade() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_full_version(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_full_version() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_gdal_version(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_gdal_version() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_geos_noop(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_geos_noop(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_geos_version(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_geos_version() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_getbbox(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_getbbox(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_hasbbox(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_hasbbox(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_index_supportfn(internal); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_index_supportfn(internal) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_lib_build_date(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_lib_build_date() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_lib_revision(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_lib_revision() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_lib_version(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_lib_version() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_libjson_version(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_libjson_version() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_liblwgeom_version(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_liblwgeom_version() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_libprotobuf_version(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_libprotobuf_version() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_libxml_version(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_libxml_version() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_noop(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_noop(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_noop(extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_noop(extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_proj_version(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_proj_version() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_raster_lib_build_date(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_raster_lib_build_date() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_raster_lib_version(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_raster_lib_version() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_raster_scripts_installed(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_raster_scripts_installed() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_scripts_build_date(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_scripts_build_date() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_scripts_installed(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_scripts_installed() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_scripts_released(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_scripts_released() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_svn_version(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_svn_version() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_transform_geometry(geom extensions.geometry, text, text, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_transform_geometry(geom extensions.geometry, text, text, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_type_name(geomname character varying, coord_dimension integer, use_new_name boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_type_name(geomname character varying, coord_dimension integer, use_new_name boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_typmod_dims(integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_typmod_dims(integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_typmod_srid(integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_typmod_srid(integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_typmod_type(integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_typmod_type(integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_version(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_version() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION postgis_wagyu_version(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.postgis_wagyu_version() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION raster_above(extensions.raster, extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.raster_above(extensions.raster, extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION raster_below(extensions.raster, extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.raster_below(extensions.raster, extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION raster_contain(extensions.raster, extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.raster_contain(extensions.raster, extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION raster_contained(extensions.raster, extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.raster_contained(extensions.raster, extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION raster_contained_by_geometry(extensions.raster, extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.raster_contained_by_geometry(extensions.raster, extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION raster_eq(extensions.raster, extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.raster_eq(extensions.raster, extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION raster_geometry_contain(extensions.raster, extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.raster_geometry_contain(extensions.raster, extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION raster_geometry_overlap(extensions.raster, extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.raster_geometry_overlap(extensions.raster, extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION raster_hash(extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.raster_hash(extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION raster_left(extensions.raster, extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.raster_left(extensions.raster, extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION raster_overabove(extensions.raster, extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.raster_overabove(extensions.raster, extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION raster_overbelow(extensions.raster, extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.raster_overbelow(extensions.raster, extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION raster_overlap(extensions.raster, extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.raster_overlap(extensions.raster, extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION raster_overleft(extensions.raster, extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.raster_overleft(extensions.raster, extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION raster_overright(extensions.raster, extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.raster_overright(extensions.raster, extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION raster_right(extensions.raster, extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.raster_right(extensions.raster, extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION raster_same(extensions.raster, extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.raster_same(extensions.raster, extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION set_graphql_placeholder(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.set_graphql_placeholder() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION sign(payload json, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) FROM postgres;
GRANT ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION st_3dclosestpoint(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_3dclosestpoint(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_3ddfullywithin(geom1 extensions.geometry, geom2 extensions.geometry, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_3ddfullywithin(geom1 extensions.geometry, geom2 extensions.geometry, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_3ddistance(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_3ddistance(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_3ddwithin(geom1 extensions.geometry, geom2 extensions.geometry, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_3ddwithin(geom1 extensions.geometry, geom2 extensions.geometry, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_3dintersects(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_3dintersects(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_3dlength(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_3dlength(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_3dlineinterpolatepoint(extensions.geometry, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_3dlineinterpolatepoint(extensions.geometry, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_3dlongestline(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_3dlongestline(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_3dmakebox(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_3dmakebox(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_3dmaxdistance(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_3dmaxdistance(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_3dperimeter(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_3dperimeter(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_3dshortestline(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_3dshortestline(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_addband(rast extensions.raster, addbandargset extensions.addbandarg[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_addband(rast extensions.raster, addbandargset extensions.addbandarg[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_addband(torast extensions.raster, fromrasts extensions.raster[], fromband integer, torastindex integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_addband(torast extensions.raster, fromrasts extensions.raster[], fromband integer, torastindex integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_addband(torast extensions.raster, fromrast extensions.raster, fromband integer, torastindex integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_addband(torast extensions.raster, fromrast extensions.raster, fromband integer, torastindex integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_addband(rast extensions.raster, pixeltype text, initialvalue double precision, nodataval double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_addband(rast extensions.raster, pixeltype text, initialvalue double precision, nodataval double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_addband(rast extensions.raster, index integer, outdbfile text, outdbindex integer[], nodataval double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_addband(rast extensions.raster, index integer, outdbfile text, outdbindex integer[], nodataval double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_addband(rast extensions.raster, index integer, pixeltype text, initialvalue double precision, nodataval double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_addband(rast extensions.raster, index integer, pixeltype text, initialvalue double precision, nodataval double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_addband(rast extensions.raster, outdbfile text, outdbindex integer[], index integer, nodataval double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_addband(rast extensions.raster, outdbfile text, outdbindex integer[], index integer, nodataval double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_addmeasure(extensions.geometry, double precision, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_addmeasure(extensions.geometry, double precision, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_addpoint(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_addpoint(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_addpoint(geom1 extensions.geometry, geom2 extensions.geometry, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_addpoint(geom1 extensions.geometry, geom2 extensions.geometry, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_affine(extensions.geometry, double precision, double precision, double precision, double precision, double precision, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_affine(extensions.geometry, double precision, double precision, double precision, double precision, double precision, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_affine(extensions.geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_affine(extensions.geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_angle(line1 extensions.geometry, line2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_angle(line1 extensions.geometry, line2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_angle(pt1 extensions.geometry, pt2 extensions.geometry, pt3 extensions.geometry, pt4 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_angle(pt1 extensions.geometry, pt2 extensions.geometry, pt3 extensions.geometry, pt4 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_approxcount(rast extensions.raster, sample_percent double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_approxcount(rast extensions.raster, sample_percent double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_approxcount(rast extensions.raster, exclude_nodata_value boolean, sample_percent double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_approxcount(rast extensions.raster, exclude_nodata_value boolean, sample_percent double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_approxcount(rast extensions.raster, nband integer, sample_percent double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_approxcount(rast extensions.raster, nband integer, sample_percent double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_approxcount(rast extensions.raster, nband integer, exclude_nodata_value boolean, sample_percent double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_approxcount(rast extensions.raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_approxhistogram(rast extensions.raster, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_approxhistogram(rast extensions.raster, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_approxhistogram(rast extensions.raster, nband integer, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_approxhistogram(rast extensions.raster, nband integer, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_approxhistogram(rast extensions.raster, nband integer, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_approxhistogram(rast extensions.raster, nband integer, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_approxhistogram(rast extensions.raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_approxhistogram(rast extensions.raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_approxhistogram(rast extensions.raster, nband integer, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_approxhistogram(rast extensions.raster, nband integer, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_approxhistogram(rast extensions.raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_approxhistogram(rast extensions.raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_approxquantile(rast extensions.raster, quantiles double precision[], OUT quantile double precision, OUT value double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_approxquantile(rast extensions.raster, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_approxquantile(rast extensions.raster, quantile double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_approxquantile(rast extensions.raster, quantile double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_approxquantile(rast extensions.raster, exclude_nodata_value boolean, quantile double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_approxquantile(rast extensions.raster, exclude_nodata_value boolean, quantile double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_approxquantile(rast extensions.raster, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_approxquantile(rast extensions.raster, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_approxquantile(rast extensions.raster, sample_percent double precision, quantile double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_approxquantile(rast extensions.raster, sample_percent double precision, quantile double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_approxquantile(rast extensions.raster, nband integer, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_approxquantile(rast extensions.raster, nband integer, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_approxquantile(rast extensions.raster, nband integer, sample_percent double precision, quantile double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_approxquantile(rast extensions.raster, nband integer, sample_percent double precision, quantile double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_approxquantile(rast extensions.raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_approxquantile(rast extensions.raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_approxquantile(rast extensions.raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantile double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_approxquantile(rast extensions.raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantile double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_approxsummarystats(rast extensions.raster, sample_percent double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_approxsummarystats(rast extensions.raster, sample_percent double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_approxsummarystats(rast extensions.raster, exclude_nodata_value boolean, sample_percent double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_approxsummarystats(rast extensions.raster, exclude_nodata_value boolean, sample_percent double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_approxsummarystats(rast extensions.raster, nband integer, sample_percent double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_approxsummarystats(rast extensions.raster, nband integer, sample_percent double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_approxsummarystats(rast extensions.raster, nband integer, exclude_nodata_value boolean, sample_percent double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_approxsummarystats(rast extensions.raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_area(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_area(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_area(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_area(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_area(geog extensions.geography, use_spheroid boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_area(geog extensions.geography, use_spheroid boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_area2d(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_area2d(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asbinary(extensions.geography); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asbinary(extensions.geography) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asbinary(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asbinary(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asbinary(extensions.geography, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asbinary(extensions.geography, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asbinary(extensions.geometry, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asbinary(extensions.geometry, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asbinary(extensions.raster, outasin boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asbinary(extensions.raster, outasin boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asencodedpolyline(geom extensions.geometry, nprecision integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asencodedpolyline(geom extensions.geometry, nprecision integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asewkb(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asewkb(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asewkb(extensions.geometry, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asewkb(extensions.geometry, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asewkt(extensions.geography); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asewkt(extensions.geography) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asewkt(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asewkt(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asewkt(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asewkt(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asewkt(extensions.geography, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asewkt(extensions.geography, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asewkt(extensions.geometry, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asewkt(extensions.geometry, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asgdalraster(rast extensions.raster, format text, options text[], srid integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asgdalraster(rast extensions.raster, format text, options text[], srid integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asgeojson(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asgeojson(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asgeojson(geog extensions.geography, maxdecimaldigits integer, options integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asgeojson(geog extensions.geography, maxdecimaldigits integer, options integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asgeojson(geom extensions.geometry, maxdecimaldigits integer, options integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asgeojson(geom extensions.geometry, maxdecimaldigits integer, options integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asgeojson(r record, geom_column text, maxdecimaldigits integer, pretty_bool boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asgeojson(r record, geom_column text, maxdecimaldigits integer, pretty_bool boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asgml(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asgml(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asgml(geom extensions.geometry, maxdecimaldigits integer, options integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asgml(geom extensions.geometry, maxdecimaldigits integer, options integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asgml(geog extensions.geography, maxdecimaldigits integer, options integer, nprefix text, id text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asgml(geog extensions.geography, maxdecimaldigits integer, options integer, nprefix text, id text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asgml(version integer, geog extensions.geography, maxdecimaldigits integer, options integer, nprefix text, id text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asgml(version integer, geog extensions.geography, maxdecimaldigits integer, options integer, nprefix text, id text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asgml(version integer, geom extensions.geometry, maxdecimaldigits integer, options integer, nprefix text, id text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asgml(version integer, geom extensions.geometry, maxdecimaldigits integer, options integer, nprefix text, id text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_ashexewkb(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_ashexewkb(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_ashexewkb(extensions.geometry, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_ashexewkb(extensions.geometry, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_ashexwkb(extensions.raster, outasin boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_ashexwkb(extensions.raster, outasin boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asjpeg(rast extensions.raster, options text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asjpeg(rast extensions.raster, options text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asjpeg(rast extensions.raster, nbands integer[], options text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asjpeg(rast extensions.raster, nbands integer[], options text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asjpeg(rast extensions.raster, nbands integer[], quality integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asjpeg(rast extensions.raster, nbands integer[], quality integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asjpeg(rast extensions.raster, nband integer, options text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asjpeg(rast extensions.raster, nband integer, options text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asjpeg(rast extensions.raster, nband integer, quality integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asjpeg(rast extensions.raster, nband integer, quality integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_askml(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_askml(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_askml(geog extensions.geography, maxdecimaldigits integer, nprefix text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_askml(geog extensions.geography, maxdecimaldigits integer, nprefix text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_askml(geom extensions.geometry, maxdecimaldigits integer, nprefix text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_askml(geom extensions.geometry, maxdecimaldigits integer, nprefix text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_aslatlontext(geom extensions.geometry, tmpl text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_aslatlontext(geom extensions.geometry, tmpl text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asmarc21(geom extensions.geometry, format text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asmarc21(geom extensions.geometry, format text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asmvtgeom(geom extensions.geometry, bounds extensions.box2d, extent integer, buffer integer, clip_geom boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asmvtgeom(geom extensions.geometry, bounds extensions.box2d, extent integer, buffer integer, clip_geom boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_aspect(rast extensions.raster, nband integer, pixeltype text, units text, interpolate_nodata boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_aspect(rast extensions.raster, nband integer, pixeltype text, units text, interpolate_nodata boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_aspect(rast extensions.raster, nband integer, customextent extensions.raster, pixeltype text, units text, interpolate_nodata boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_aspect(rast extensions.raster, nband integer, customextent extensions.raster, pixeltype text, units text, interpolate_nodata boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_aspng(rast extensions.raster, options text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_aspng(rast extensions.raster, options text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_aspng(rast extensions.raster, nbands integer[], options text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_aspng(rast extensions.raster, nbands integer[], options text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_aspng(rast extensions.raster, nbands integer[], compression integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_aspng(rast extensions.raster, nbands integer[], compression integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_aspng(rast extensions.raster, nband integer, options text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_aspng(rast extensions.raster, nband integer, options text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_aspng(rast extensions.raster, nband integer, compression integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_aspng(rast extensions.raster, nband integer, compression integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asraster(geom extensions.geometry, ref extensions.raster, pixeltype text[], value double precision[], nodataval double precision[], touched boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asraster(geom extensions.geometry, ref extensions.raster, pixeltype text[], value double precision[], nodataval double precision[], touched boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asraster(geom extensions.geometry, ref extensions.raster, pixeltype text, value double precision, nodataval double precision, touched boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asraster(geom extensions.geometry, ref extensions.raster, pixeltype text, value double precision, nodataval double precision, touched boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asraster(geom extensions.geometry, scalex double precision, scaley double precision, pixeltype text[], value double precision[], nodataval double precision[], upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asraster(geom extensions.geometry, scalex double precision, scaley double precision, pixeltype text[], value double precision[], nodataval double precision[], upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asraster(geom extensions.geometry, scalex double precision, scaley double precision, gridx double precision, gridy double precision, pixeltype text[], value double precision[], nodataval double precision[], skewx double precision, skewy double precision, touched boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asraster(geom extensions.geometry, scalex double precision, scaley double precision, gridx double precision, gridy double precision, pixeltype text[], value double precision[], nodataval double precision[], skewx double precision, skewy double precision, touched boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asraster(geom extensions.geometry, scalex double precision, scaley double precision, gridx double precision, gridy double precision, pixeltype text, value double precision, nodataval double precision, skewx double precision, skewy double precision, touched boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asraster(geom extensions.geometry, scalex double precision, scaley double precision, gridx double precision, gridy double precision, pixeltype text, value double precision, nodataval double precision, skewx double precision, skewy double precision, touched boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asraster(geom extensions.geometry, scalex double precision, scaley double precision, pixeltype text, value double precision, nodataval double precision, upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asraster(geom extensions.geometry, scalex double precision, scaley double precision, pixeltype text, value double precision, nodataval double precision, upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asraster(geom extensions.geometry, width integer, height integer, pixeltype text[], value double precision[], nodataval double precision[], upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asraster(geom extensions.geometry, width integer, height integer, pixeltype text[], value double precision[], nodataval double precision[], upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asraster(geom extensions.geometry, width integer, height integer, gridx double precision, gridy double precision, pixeltype text[], value double precision[], nodataval double precision[], skewx double precision, skewy double precision, touched boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asraster(geom extensions.geometry, width integer, height integer, gridx double precision, gridy double precision, pixeltype text[], value double precision[], nodataval double precision[], skewx double precision, skewy double precision, touched boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asraster(geom extensions.geometry, width integer, height integer, gridx double precision, gridy double precision, pixeltype text, value double precision, nodataval double precision, skewx double precision, skewy double precision, touched boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asraster(geom extensions.geometry, width integer, height integer, gridx double precision, gridy double precision, pixeltype text, value double precision, nodataval double precision, skewx double precision, skewy double precision, touched boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asraster(geom extensions.geometry, width integer, height integer, pixeltype text, value double precision, nodataval double precision, upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asraster(geom extensions.geometry, width integer, height integer, pixeltype text, value double precision, nodataval double precision, upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_assvg(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_assvg(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_assvg(geog extensions.geography, rel integer, maxdecimaldigits integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_assvg(geog extensions.geography, rel integer, maxdecimaldigits integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_assvg(geom extensions.geometry, rel integer, maxdecimaldigits integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_assvg(geom extensions.geometry, rel integer, maxdecimaldigits integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_astext(extensions.geography); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_astext(extensions.geography) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_astext(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_astext(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_astext(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_astext(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_astext(extensions.geography, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_astext(extensions.geography, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_astext(extensions.geometry, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_astext(extensions.geometry, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_astiff(rast extensions.raster, options text[], srid integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_astiff(rast extensions.raster, options text[], srid integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_astiff(rast extensions.raster, compression text, srid integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_astiff(rast extensions.raster, compression text, srid integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_astiff(rast extensions.raster, nbands integer[], options text[], srid integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_astiff(rast extensions.raster, nbands integer[], options text[], srid integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_astiff(rast extensions.raster, nbands integer[], compression text, srid integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_astiff(rast extensions.raster, nbands integer[], compression text, srid integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_astwkb(geom extensions.geometry, prec integer, prec_z integer, prec_m integer, with_sizes boolean, with_boxes boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_astwkb(geom extensions.geometry, prec integer, prec_z integer, prec_m integer, with_sizes boolean, with_boxes boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_astwkb(geom extensions.geometry[], ids bigint[], prec integer, prec_z integer, prec_m integer, with_sizes boolean, with_boxes boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_astwkb(geom extensions.geometry[], ids bigint[], prec integer, prec_z integer, prec_m integer, with_sizes boolean, with_boxes boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_aswkb(extensions.raster, outasin boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_aswkb(extensions.raster, outasin boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asx3d(geom extensions.geometry, maxdecimaldigits integer, options integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asx3d(geom extensions.geometry, maxdecimaldigits integer, options integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_azimuth(geog1 extensions.geography, geog2 extensions.geography); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_azimuth(geog1 extensions.geography, geog2 extensions.geography) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_azimuth(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_azimuth(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_band(rast extensions.raster, nbands integer[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_band(rast extensions.raster, nbands integer[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_band(rast extensions.raster, nband integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_band(rast extensions.raster, nband integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_band(rast extensions.raster, nbands text, delimiter character); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_band(rast extensions.raster, nbands text, delimiter character) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_bandfilesize(rast extensions.raster, band integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_bandfilesize(rast extensions.raster, band integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_bandfiletimestamp(rast extensions.raster, band integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_bandfiletimestamp(rast extensions.raster, band integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_bandisnodata(rast extensions.raster, forcechecking boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_bandisnodata(rast extensions.raster, forcechecking boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_bandisnodata(rast extensions.raster, band integer, forcechecking boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_bandisnodata(rast extensions.raster, band integer, forcechecking boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_bandmetadata(rast extensions.raster, band integer[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_bandmetadata(rast extensions.raster, band integer[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_bandmetadata(rast extensions.raster, band integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_bandmetadata(rast extensions.raster, band integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_bandnodatavalue(rast extensions.raster, band integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_bandnodatavalue(rast extensions.raster, band integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_bandpath(rast extensions.raster, band integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_bandpath(rast extensions.raster, band integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_bandpixeltype(rast extensions.raster, band integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_bandpixeltype(rast extensions.raster, band integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_bdmpolyfromtext(text, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_bdmpolyfromtext(text, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_bdpolyfromtext(text, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_bdpolyfromtext(text, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_boundary(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_boundary(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_boundingdiagonal(geom extensions.geometry, fits boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_boundingdiagonal(geom extensions.geometry, fits boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_box2dfromgeohash(text, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_box2dfromgeohash(text, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_buffer(extensions.geography, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_buffer(extensions.geography, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_buffer(text, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_buffer(text, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_buffer(extensions.geography, double precision, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_buffer(extensions.geography, double precision, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_buffer(extensions.geography, double precision, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_buffer(extensions.geography, double precision, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_buffer(geom extensions.geometry, radius double precision, quadsegs integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_buffer(geom extensions.geometry, radius double precision, quadsegs integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_buffer(geom extensions.geometry, radius double precision, options text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_buffer(geom extensions.geometry, radius double precision, options text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_buffer(text, double precision, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_buffer(text, double precision, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_buffer(text, double precision, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_buffer(text, double precision, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_buildarea(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_buildarea(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_centroid(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_centroid(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_centroid(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_centroid(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_centroid(extensions.geography, use_spheroid boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_centroid(extensions.geography, use_spheroid boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_chaikinsmoothing(extensions.geometry, integer, boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_chaikinsmoothing(extensions.geometry, integer, boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_cleangeometry(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_cleangeometry(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_clip(rast extensions.raster, geom extensions.geometry, crop boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_clip(rast extensions.raster, geom extensions.geometry, crop boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_clip(rast extensions.raster, geom extensions.geometry, nodataval double precision[], crop boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_clip(rast extensions.raster, geom extensions.geometry, nodataval double precision[], crop boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_clip(rast extensions.raster, geom extensions.geometry, nodataval double precision, crop boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_clip(rast extensions.raster, geom extensions.geometry, nodataval double precision, crop boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_clip(rast extensions.raster, nband integer, geom extensions.geometry, crop boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_clip(rast extensions.raster, nband integer, geom extensions.geometry, crop boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_clip(rast extensions.raster, nband integer[], geom extensions.geometry, nodataval double precision[], crop boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_clip(rast extensions.raster, nband integer[], geom extensions.geometry, nodataval double precision[], crop boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_clip(rast extensions.raster, nband integer, geom extensions.geometry, nodataval double precision, crop boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_clip(rast extensions.raster, nband integer, geom extensions.geometry, nodataval double precision, crop boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_clipbybox2d(geom extensions.geometry, box extensions.box2d); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_clipbybox2d(geom extensions.geometry, box extensions.box2d) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_closestpoint(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_closestpoint(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_closestpointofapproach(extensions.geometry, extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_closestpointofapproach(extensions.geometry, extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_clusterdbscan(extensions.geometry, eps double precision, minpoints integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_clusterdbscan(extensions.geometry, eps double precision, minpoints integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_clusterintersecting(extensions.geometry[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_clusterintersecting(extensions.geometry[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_clusterkmeans(geom extensions.geometry, k integer, max_radius double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_clusterkmeans(geom extensions.geometry, k integer, max_radius double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_clusterwithin(extensions.geometry[], double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_clusterwithin(extensions.geometry[], double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_collect(extensions.geometry[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_collect(extensions.geometry[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_collect(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_collect(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_collectionextract(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_collectionextract(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_collectionextract(extensions.geometry, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_collectionextract(extensions.geometry, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_collectionhomogenize(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_collectionhomogenize(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_colormap(rast extensions.raster, colormap text, method text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_colormap(rast extensions.raster, colormap text, method text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_colormap(rast extensions.raster, nband integer, colormap text, method text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_colormap(rast extensions.raster, nband integer, colormap text, method text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_combinebbox(extensions.box2d, extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_combinebbox(extensions.box2d, extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_combinebbox(extensions.box3d, extensions.box3d); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_combinebbox(extensions.box3d, extensions.box3d) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_combinebbox(extensions.box3d, extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_combinebbox(extensions.box3d, extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_concavehull(param_geom extensions.geometry, param_pctconvex double precision, param_allow_holes boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_concavehull(param_geom extensions.geometry, param_pctconvex double precision, param_allow_holes boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_contains(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_contains(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_contains(rast1 extensions.raster, rast2 extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_contains(rast1 extensions.raster, rast2 extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_contains(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_contains(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_containsproperly(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_containsproperly(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_containsproperly(rast1 extensions.raster, rast2 extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_containsproperly(rast1 extensions.raster, rast2 extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_containsproperly(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_containsproperly(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_contour(rast extensions.raster, bandnumber integer, level_interval double precision, level_base double precision, fixed_levels double precision[], polygonize boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_contour(rast extensions.raster, bandnumber integer, level_interval double precision, level_base double precision, fixed_levels double precision[], polygonize boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_convexhull(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_convexhull(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_coorddim(geometry extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_coorddim(geometry extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_count(rast extensions.raster, exclude_nodata_value boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_count(rast extensions.raster, exclude_nodata_value boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_count(rast extensions.raster, nband integer, exclude_nodata_value boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_count(rast extensions.raster, nband integer, exclude_nodata_value boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_coveredby(geog1 extensions.geography, geog2 extensions.geography); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_coveredby(geog1 extensions.geography, geog2 extensions.geography) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_coveredby(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_coveredby(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_coveredby(rast1 extensions.raster, rast2 extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_coveredby(rast1 extensions.raster, rast2 extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_coveredby(text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_coveredby(text, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_coveredby(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_coveredby(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_covers(geog1 extensions.geography, geog2 extensions.geography); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_covers(geog1 extensions.geography, geog2 extensions.geography) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_covers(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_covers(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_covers(rast1 extensions.raster, rast2 extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_covers(rast1 extensions.raster, rast2 extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_covers(text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_covers(text, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_covers(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_covers(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_cpawithin(extensions.geometry, extensions.geometry, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_cpawithin(extensions.geometry, extensions.geometry, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_createoverview(tab regclass, col name, factor integer, algo text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_createoverview(tab regclass, col name, factor integer, algo text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_crosses(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_crosses(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_curvetoline(geom extensions.geometry, tol double precision, toltype integer, flags integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_curvetoline(geom extensions.geometry, tol double precision, toltype integer, flags integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_delaunaytriangles(g1 extensions.geometry, tolerance double precision, flags integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_delaunaytriangles(g1 extensions.geometry, tolerance double precision, flags integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_dfullywithin(geom1 extensions.geometry, geom2 extensions.geometry, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_dfullywithin(geom1 extensions.geometry, geom2 extensions.geometry, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_dfullywithin(rast1 extensions.raster, rast2 extensions.raster, distance double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_dfullywithin(rast1 extensions.raster, rast2 extensions.raster, distance double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_dfullywithin(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer, distance double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_dfullywithin(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer, distance double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_difference(geom1 extensions.geometry, geom2 extensions.geometry, gridsize double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_difference(geom1 extensions.geometry, geom2 extensions.geometry, gridsize double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_dimension(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_dimension(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_disjoint(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_disjoint(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_disjoint(rast1 extensions.raster, rast2 extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_disjoint(rast1 extensions.raster, rast2 extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_disjoint(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_disjoint(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_distance(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_distance(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_distance(text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_distance(text, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_distance(geog1 extensions.geography, geog2 extensions.geography, use_spheroid boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_distance(geog1 extensions.geography, geog2 extensions.geography, use_spheroid boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_distancecpa(extensions.geometry, extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_distancecpa(extensions.geometry, extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_distancesphere(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_distancesphere(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_distancesphere(geom1 extensions.geometry, geom2 extensions.geometry, radius double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_distancesphere(geom1 extensions.geometry, geom2 extensions.geometry, radius double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_distancespheroid(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_distancespheroid(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_distancespheroid(geom1 extensions.geometry, geom2 extensions.geometry, extensions.spheroid); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_distancespheroid(geom1 extensions.geometry, geom2 extensions.geometry, extensions.spheroid) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_distinct4ma(value double precision[], pos integer[], VARIADIC userargs text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_distinct4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_distinct4ma(matrix double precision[], nodatamode text, VARIADIC args text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_distinct4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_dump(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_dump(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_dumpaspolygons(rast extensions.raster, band integer, exclude_nodata_value boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_dumpaspolygons(rast extensions.raster, band integer, exclude_nodata_value boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_dumppoints(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_dumppoints(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_dumprings(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_dumprings(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_dumpsegments(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_dumpsegments(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_dumpvalues(rast extensions.raster, nband integer[], exclude_nodata_value boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_dumpvalues(rast extensions.raster, nband integer[], exclude_nodata_value boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_dumpvalues(rast extensions.raster, nband integer, exclude_nodata_value boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_dumpvalues(rast extensions.raster, nband integer, exclude_nodata_value boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_dwithin(geom1 extensions.geometry, geom2 extensions.geometry, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_dwithin(geom1 extensions.geometry, geom2 extensions.geometry, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_dwithin(rast1 extensions.raster, rast2 extensions.raster, distance double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_dwithin(rast1 extensions.raster, rast2 extensions.raster, distance double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_dwithin(text, text, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_dwithin(text, text, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_dwithin(geog1 extensions.geography, geog2 extensions.geography, tolerance double precision, use_spheroid boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_dwithin(geog1 extensions.geography, geog2 extensions.geography, tolerance double precision, use_spheroid boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_dwithin(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer, distance double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_dwithin(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer, distance double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_endpoint(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_endpoint(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_envelope(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_envelope(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_envelope(extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_envelope(extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_equals(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_equals(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_estimatedextent(text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_estimatedextent(text, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_estimatedextent(text, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_estimatedextent(text, text, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_estimatedextent(text, text, text, boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_estimatedextent(text, text, text, boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_expand(extensions.box2d, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_expand(extensions.box2d, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_expand(extensions.box3d, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_expand(extensions.box3d, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_expand(extensions.geometry, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_expand(extensions.geometry, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_expand(box extensions.box2d, dx double precision, dy double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_expand(box extensions.box2d, dx double precision, dy double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_expand(box extensions.box3d, dx double precision, dy double precision, dz double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_expand(box extensions.box3d, dx double precision, dy double precision, dz double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_expand(geom extensions.geometry, dx double precision, dy double precision, dz double precision, dm double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_expand(geom extensions.geometry, dx double precision, dy double precision, dz double precision, dm double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_exteriorring(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_exteriorring(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_filterbym(extensions.geometry, double precision, double precision, boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_filterbym(extensions.geometry, double precision, double precision, boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_findextent(text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_findextent(text, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_findextent(text, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_findextent(text, text, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_flipcoordinates(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_flipcoordinates(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_force2d(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_force2d(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_force3d(geom extensions.geometry, zvalue double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_force3d(geom extensions.geometry, zvalue double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_force3dm(geom extensions.geometry, mvalue double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_force3dm(geom extensions.geometry, mvalue double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_force3dz(geom extensions.geometry, zvalue double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_force3dz(geom extensions.geometry, zvalue double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_force4d(geom extensions.geometry, zvalue double precision, mvalue double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_force4d(geom extensions.geometry, zvalue double precision, mvalue double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_forcecollection(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_forcecollection(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_forcecurve(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_forcecurve(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_forcepolygonccw(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_forcepolygonccw(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_forcepolygoncw(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_forcepolygoncw(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_forcerhr(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_forcerhr(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_forcesfs(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_forcesfs(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_forcesfs(extensions.geometry, version text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_forcesfs(extensions.geometry, version text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_frechetdistance(geom1 extensions.geometry, geom2 extensions.geometry, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_frechetdistance(geom1 extensions.geometry, geom2 extensions.geometry, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_fromflatgeobuf(anyelement, bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_fromflatgeobuf(anyelement, bytea) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_fromflatgeobuftotable(text, text, bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_fromflatgeobuftotable(text, text, bytea) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_fromgdalraster(gdaldata bytea, srid integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_fromgdalraster(gdaldata bytea, srid integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_gdaldrivers(OUT idx integer, OUT short_name text, OUT long_name text, OUT can_read boolean, OUT can_write boolean, OUT create_options text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_gdaldrivers(OUT idx integer, OUT short_name text, OUT long_name text, OUT can_read boolean, OUT can_write boolean, OUT create_options text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_generatepoints(area extensions.geometry, npoints integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_generatepoints(area extensions.geometry, npoints integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_generatepoints(area extensions.geometry, npoints integer, seed integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_generatepoints(area extensions.geometry, npoints integer, seed integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_geogfromtext(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_geogfromtext(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_geogfromwkb(bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_geogfromwkb(bytea) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_geographyfromtext(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_geographyfromtext(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_geohash(geog extensions.geography, maxchars integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_geohash(geog extensions.geography, maxchars integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_geohash(geom extensions.geometry, maxchars integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_geohash(geom extensions.geometry, maxchars integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_geomcollfromtext(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_geomcollfromtext(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_geomcollfromtext(text, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_geomcollfromtext(text, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_geomcollfromwkb(bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_geomcollfromwkb(bytea) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_geomcollfromwkb(bytea, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_geomcollfromwkb(bytea, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_geometricmedian(g extensions.geometry, tolerance double precision, max_iter integer, fail_if_not_converged boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_geometricmedian(g extensions.geometry, tolerance double precision, max_iter integer, fail_if_not_converged boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_geometryfromtext(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_geometryfromtext(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_geometryfromtext(text, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_geometryfromtext(text, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_geometryn(extensions.geometry, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_geometryn(extensions.geometry, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_geometrytype(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_geometrytype(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_geomfromewkb(bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_geomfromewkb(bytea) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_geomfromewkt(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_geomfromewkt(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_geomfromgeohash(text, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_geomfromgeohash(text, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_geomfromgeojson(json); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_geomfromgeojson(json) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_geomfromgeojson(jsonb); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_geomfromgeojson(jsonb) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_geomfromgeojson(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_geomfromgeojson(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_geomfromgml(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_geomfromgml(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_geomfromgml(text, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_geomfromgml(text, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_geomfromkml(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_geomfromkml(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_geomfrommarc21(marc21xml text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_geomfrommarc21(marc21xml text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_geomfromtext(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_geomfromtext(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_geomfromtext(text, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_geomfromtext(text, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_geomfromtwkb(bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_geomfromtwkb(bytea) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_geomfromwkb(bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_geomfromwkb(bytea) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_geomfromwkb(bytea, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_geomfromwkb(bytea, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_georeference(rast extensions.raster, format text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_georeference(rast extensions.raster, format text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_geotransform(extensions.raster, OUT imag double precision, OUT jmag double precision, OUT theta_i double precision, OUT theta_ij double precision, OUT xoffset double precision, OUT yoffset double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_geotransform(extensions.raster, OUT imag double precision, OUT jmag double precision, OUT theta_i double precision, OUT theta_ij double precision, OUT xoffset double precision, OUT yoffset double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_gmltosql(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_gmltosql(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_gmltosql(text, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_gmltosql(text, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_grayscale(rastbandargset extensions.rastbandarg[], extenttype text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_grayscale(rastbandargset extensions.rastbandarg[], extenttype text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_grayscale(rast extensions.raster, redband integer, greenband integer, blueband integer, extenttype text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_grayscale(rast extensions.raster, redband integer, greenband integer, blueband integer, extenttype text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_hasarc(geometry extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_hasarc(geometry extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_hasnoband(rast extensions.raster, nband integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_hasnoband(rast extensions.raster, nband integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_hausdorffdistance(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_hausdorffdistance(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_hausdorffdistance(geom1 extensions.geometry, geom2 extensions.geometry, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_hausdorffdistance(geom1 extensions.geometry, geom2 extensions.geometry, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_height(extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_height(extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_hexagon(size double precision, cell_i integer, cell_j integer, origin extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_hexagon(size double precision, cell_i integer, cell_j integer, origin extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_hexagongrid(size double precision, bounds extensions.geometry, OUT geom extensions.geometry, OUT i integer, OUT j integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_hexagongrid(size double precision, bounds extensions.geometry, OUT geom extensions.geometry, OUT i integer, OUT j integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_hillshade(rast extensions.raster, nband integer, pixeltype text, azimuth double precision, altitude double precision, max_bright double precision, scale double precision, interpolate_nodata boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_hillshade(rast extensions.raster, nband integer, pixeltype text, azimuth double precision, altitude double precision, max_bright double precision, scale double precision, interpolate_nodata boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_hillshade(rast extensions.raster, nband integer, customextent extensions.raster, pixeltype text, azimuth double precision, altitude double precision, max_bright double precision, scale double precision, interpolate_nodata boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_hillshade(rast extensions.raster, nband integer, customextent extensions.raster, pixeltype text, azimuth double precision, altitude double precision, max_bright double precision, scale double precision, interpolate_nodata boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_histogram(rast extensions.raster, nband integer, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_histogram(rast extensions.raster, nband integer, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_histogram(rast extensions.raster, nband integer, exclude_nodata_value boolean, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_histogram(rast extensions.raster, nband integer, exclude_nodata_value boolean, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_histogram(rast extensions.raster, nband integer, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_histogram(rast extensions.raster, nband integer, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_histogram(rast extensions.raster, nband integer, exclude_nodata_value boolean, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_histogram(rast extensions.raster, nband integer, exclude_nodata_value boolean, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_interiorringn(extensions.geometry, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_interiorringn(extensions.geometry, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_interpolatepoint(line extensions.geometry, point extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_interpolatepoint(line extensions.geometry, point extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_interpolateraster(geom extensions.geometry, options text, rast extensions.raster, bandnumber integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_interpolateraster(geom extensions.geometry, options text, rast extensions.raster, bandnumber integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_intersection(extensions.geography, extensions.geography); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_intersection(extensions.geography, extensions.geography) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_intersection(rast extensions.raster, geomin extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_intersection(rast extensions.raster, geomin extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_intersection(text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_intersection(text, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_intersection(geom1 extensions.geometry, geom2 extensions.geometry, gridsize double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_intersection(geom1 extensions.geometry, geom2 extensions.geometry, gridsize double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_intersection(geomin extensions.geometry, rast extensions.raster, band integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_intersection(geomin extensions.geometry, rast extensions.raster, band integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_intersection(rast1 extensions.raster, rast2 extensions.raster, nodataval double precision[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_intersection(rast1 extensions.raster, rast2 extensions.raster, nodataval double precision[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_intersection(rast1 extensions.raster, rast2 extensions.raster, nodataval double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_intersection(rast1 extensions.raster, rast2 extensions.raster, nodataval double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_intersection(rast extensions.raster, band integer, geomin extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_intersection(rast extensions.raster, band integer, geomin extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_intersection(rast1 extensions.raster, rast2 extensions.raster, returnband text, nodataval double precision[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_intersection(rast1 extensions.raster, rast2 extensions.raster, returnband text, nodataval double precision[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_intersection(rast1 extensions.raster, rast2 extensions.raster, returnband text, nodataval double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_intersection(rast1 extensions.raster, rast2 extensions.raster, returnband text, nodataval double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_intersection(rast1 extensions.raster, band1 integer, rast2 extensions.raster, band2 integer, nodataval double precision[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_intersection(rast1 extensions.raster, band1 integer, rast2 extensions.raster, band2 integer, nodataval double precision[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_intersection(rast1 extensions.raster, band1 integer, rast2 extensions.raster, band2 integer, nodataval double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_intersection(rast1 extensions.raster, band1 integer, rast2 extensions.raster, band2 integer, nodataval double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_intersection(rast1 extensions.raster, band1 integer, rast2 extensions.raster, band2 integer, returnband text, nodataval double precision[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_intersection(rast1 extensions.raster, band1 integer, rast2 extensions.raster, band2 integer, returnband text, nodataval double precision[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_intersection(rast1 extensions.raster, band1 integer, rast2 extensions.raster, band2 integer, returnband text, nodataval double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_intersection(rast1 extensions.raster, band1 integer, rast2 extensions.raster, band2 integer, returnband text, nodataval double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_intersects(geog1 extensions.geography, geog2 extensions.geography); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_intersects(geog1 extensions.geography, geog2 extensions.geography) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_intersects(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_intersects(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_intersects(rast1 extensions.raster, rast2 extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_intersects(rast1 extensions.raster, rast2 extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_intersects(text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_intersects(text, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_intersects(geom extensions.geometry, rast extensions.raster, nband integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_intersects(geom extensions.geometry, rast extensions.raster, nband integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_intersects(rast extensions.raster, geom extensions.geometry, nband integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_intersects(rast extensions.raster, geom extensions.geometry, nband integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_intersects(rast extensions.raster, nband integer, geom extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_intersects(rast extensions.raster, nband integer, geom extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_intersects(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_intersects(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_invdistweight4ma(value double precision[], pos integer[], VARIADIC userargs text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_invdistweight4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_isclosed(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_isclosed(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_iscollection(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_iscollection(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_iscoveragetile(rast extensions.raster, coverage extensions.raster, tilewidth integer, tileheight integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_iscoveragetile(rast extensions.raster, coverage extensions.raster, tilewidth integer, tileheight integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_isempty(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_isempty(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_isempty(rast extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_isempty(rast extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_ispolygonccw(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_ispolygonccw(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_ispolygoncw(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_ispolygoncw(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_isring(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_isring(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_issimple(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_issimple(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_isvalid(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_isvalid(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_isvalid(extensions.geometry, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_isvalid(extensions.geometry, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_isvaliddetail(geom extensions.geometry, flags integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_isvaliddetail(geom extensions.geometry, flags integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_isvalidreason(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_isvalidreason(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_isvalidreason(extensions.geometry, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_isvalidreason(extensions.geometry, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_isvalidtrajectory(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_isvalidtrajectory(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_length(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_length(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_length(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_length(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_length(geog extensions.geography, use_spheroid boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_length(geog extensions.geography, use_spheroid boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_length2d(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_length2d(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_length2dspheroid(extensions.geometry, extensions.spheroid); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_length2dspheroid(extensions.geometry, extensions.spheroid) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_lengthspheroid(extensions.geometry, extensions.spheroid); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_lengthspheroid(extensions.geometry, extensions.spheroid) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_letters(letters text, font json); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_letters(letters text, font json) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_linecrossingdirection(line1 extensions.geometry, line2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_linecrossingdirection(line1 extensions.geometry, line2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_linefromencodedpolyline(txtin text, nprecision integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_linefromencodedpolyline(txtin text, nprecision integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_linefrommultipoint(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_linefrommultipoint(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_linefromtext(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_linefromtext(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_linefromtext(text, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_linefromtext(text, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_linefromwkb(bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_linefromwkb(bytea) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_linefromwkb(bytea, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_linefromwkb(bytea, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_lineinterpolatepoint(extensions.geometry, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_lineinterpolatepoint(extensions.geometry, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_lineinterpolatepoints(extensions.geometry, double precision, repeat boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_lineinterpolatepoints(extensions.geometry, double precision, repeat boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_linelocatepoint(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_linelocatepoint(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_linemerge(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_linemerge(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_linemerge(extensions.geometry, boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_linemerge(extensions.geometry, boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_linestringfromwkb(bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_linestringfromwkb(bytea) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_linestringfromwkb(bytea, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_linestringfromwkb(bytea, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_linesubstring(extensions.geometry, double precision, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_linesubstring(extensions.geometry, double precision, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_linetocurve(geometry extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_linetocurve(geometry extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_locatealong(geometry extensions.geometry, measure double precision, leftrightoffset double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_locatealong(geometry extensions.geometry, measure double precision, leftrightoffset double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_locatebetween(geometry extensions.geometry, frommeasure double precision, tomeasure double precision, leftrightoffset double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_locatebetween(geometry extensions.geometry, frommeasure double precision, tomeasure double precision, leftrightoffset double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_locatebetweenelevations(geometry extensions.geometry, fromelevation double precision, toelevation double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_locatebetweenelevations(geometry extensions.geometry, fromelevation double precision, toelevation double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_longestline(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_longestline(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_m(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_m(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_makebox2d(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_makebox2d(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_makeemptycoverage(tilewidth integer, tileheight integer, width integer, height integer, upperleftx double precision, upperlefty double precision, scalex double precision, scaley double precision, skewx double precision, skewy double precision, srid integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_makeemptycoverage(tilewidth integer, tileheight integer, width integer, height integer, upperleftx double precision, upperlefty double precision, scalex double precision, scaley double precision, skewx double precision, skewy double precision, srid integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_makeemptyraster(rast extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_makeemptyraster(rast extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_makeemptyraster(width integer, height integer, upperleftx double precision, upperlefty double precision, pixelsize double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_makeemptyraster(width integer, height integer, upperleftx double precision, upperlefty double precision, pixelsize double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_makeemptyraster(width integer, height integer, upperleftx double precision, upperlefty double precision, scalex double precision, scaley double precision, skewx double precision, skewy double precision, srid integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_makeemptyraster(width integer, height integer, upperleftx double precision, upperlefty double precision, scalex double precision, scaley double precision, skewx double precision, skewy double precision, srid integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_makeenvelope(double precision, double precision, double precision, double precision, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_makeenvelope(double precision, double precision, double precision, double precision, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_makeline(extensions.geometry[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_makeline(extensions.geometry[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_makeline(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_makeline(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_makepoint(double precision, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_makepoint(double precision, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_makepoint(double precision, double precision, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_makepoint(double precision, double precision, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_makepoint(double precision, double precision, double precision, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_makepoint(double precision, double precision, double precision, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_makepointm(double precision, double precision, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_makepointm(double precision, double precision, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_makepolygon(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_makepolygon(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_makepolygon(extensions.geometry, extensions.geometry[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_makepolygon(extensions.geometry, extensions.geometry[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_makevalid(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_makevalid(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_makevalid(geom extensions.geometry, params text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_makevalid(geom extensions.geometry, params text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mapalgebra(rast extensions.raster, pixeltype text, expression text, nodataval double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mapalgebra(rast extensions.raster, pixeltype text, expression text, nodataval double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mapalgebra(rast extensions.raster, nband integer, pixeltype text, expression text, nodataval double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mapalgebra(rast extensions.raster, nband integer, pixeltype text, expression text, nodataval double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mapalgebra(rastbandargset extensions.rastbandarg[], callbackfunc regprocedure, pixeltype text, extenttype text, customextent extensions.raster, distancex integer, distancey integer, VARIADIC userargs text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mapalgebra(rastbandargset extensions.rastbandarg[], callbackfunc regprocedure, pixeltype text, extenttype text, customextent extensions.raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mapalgebra(rast1 extensions.raster, rast2 extensions.raster, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mapalgebra(rast1 extensions.raster, rast2 extensions.raster, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mapalgebra(rast extensions.raster, nband integer[], callbackfunc regprocedure, pixeltype text, extenttype text, customextent extensions.raster, distancex integer, distancey integer, VARIADIC userargs text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mapalgebra(rast extensions.raster, nband integer[], callbackfunc regprocedure, pixeltype text, extenttype text, customextent extensions.raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mapalgebra(rast extensions.raster, nband integer, callbackfunc regprocedure, mask double precision[], weighted boolean, pixeltype text, extenttype text, customextent extensions.raster, VARIADIC userargs text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mapalgebra(rast extensions.raster, nband integer, callbackfunc regprocedure, mask double precision[], weighted boolean, pixeltype text, extenttype text, customextent extensions.raster, VARIADIC userargs text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mapalgebra(rast extensions.raster, nband integer, callbackfunc regprocedure, pixeltype text, extenttype text, customextent extensions.raster, distancex integer, distancey integer, VARIADIC userargs text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mapalgebra(rast extensions.raster, nband integer, callbackfunc regprocedure, pixeltype text, extenttype text, customextent extensions.raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mapalgebra(rast1 extensions.raster, band1 integer, rast2 extensions.raster, band2 integer, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mapalgebra(rast1 extensions.raster, band1 integer, rast2 extensions.raster, band2 integer, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mapalgebra(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer, callbackfunc regprocedure, pixeltype text, extenttype text, customextent extensions.raster, distancex integer, distancey integer, VARIADIC userargs text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mapalgebra(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer, callbackfunc regprocedure, pixeltype text, extenttype text, customextent extensions.raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mapalgebraexpr(rast extensions.raster, pixeltype text, expression text, nodataval double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mapalgebraexpr(rast extensions.raster, pixeltype text, expression text, nodataval double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mapalgebraexpr(rast extensions.raster, band integer, pixeltype text, expression text, nodataval double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mapalgebraexpr(rast extensions.raster, band integer, pixeltype text, expression text, nodataval double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mapalgebraexpr(rast1 extensions.raster, rast2 extensions.raster, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mapalgebraexpr(rast1 extensions.raster, rast2 extensions.raster, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mapalgebraexpr(rast1 extensions.raster, band1 integer, rast2 extensions.raster, band2 integer, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mapalgebraexpr(rast1 extensions.raster, band1 integer, rast2 extensions.raster, band2 integer, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mapalgebrafct(rast extensions.raster, onerastuserfunc regprocedure); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mapalgebrafct(rast extensions.raster, onerastuserfunc regprocedure) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mapalgebrafct(rast extensions.raster, band integer, onerastuserfunc regprocedure); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mapalgebrafct(rast extensions.raster, band integer, onerastuserfunc regprocedure) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mapalgebrafct(rast extensions.raster, onerastuserfunc regprocedure, VARIADIC args text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mapalgebrafct(rast extensions.raster, onerastuserfunc regprocedure, VARIADIC args text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mapalgebrafct(rast extensions.raster, pixeltype text, onerastuserfunc regprocedure); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mapalgebrafct(rast extensions.raster, pixeltype text, onerastuserfunc regprocedure) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mapalgebrafct(rast extensions.raster, band integer, onerastuserfunc regprocedure, VARIADIC args text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mapalgebrafct(rast extensions.raster, band integer, onerastuserfunc regprocedure, VARIADIC args text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mapalgebrafct(rast extensions.raster, band integer, pixeltype text, onerastuserfunc regprocedure); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mapalgebrafct(rast extensions.raster, band integer, pixeltype text, onerastuserfunc regprocedure) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mapalgebrafct(rast extensions.raster, pixeltype text, onerastuserfunc regprocedure, VARIADIC args text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mapalgebrafct(rast extensions.raster, pixeltype text, onerastuserfunc regprocedure, VARIADIC args text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mapalgebrafct(rast extensions.raster, band integer, pixeltype text, onerastuserfunc regprocedure, VARIADIC args text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mapalgebrafct(rast extensions.raster, band integer, pixeltype text, onerastuserfunc regprocedure, VARIADIC args text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mapalgebrafct(rast1 extensions.raster, rast2 extensions.raster, tworastuserfunc regprocedure, pixeltype text, extenttype text, VARIADIC userargs text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mapalgebrafct(rast1 extensions.raster, rast2 extensions.raster, tworastuserfunc regprocedure, pixeltype text, extenttype text, VARIADIC userargs text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mapalgebrafct(rast1 extensions.raster, band1 integer, rast2 extensions.raster, band2 integer, tworastuserfunc regprocedure, pixeltype text, extenttype text, VARIADIC userargs text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mapalgebrafct(rast1 extensions.raster, band1 integer, rast2 extensions.raster, band2 integer, tworastuserfunc regprocedure, pixeltype text, extenttype text, VARIADIC userargs text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mapalgebrafctngb(rast extensions.raster, band integer, pixeltype text, ngbwidth integer, ngbheight integer, onerastngbuserfunc regprocedure, nodatamode text, VARIADIC args text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mapalgebrafctngb(rast extensions.raster, band integer, pixeltype text, ngbwidth integer, ngbheight integer, onerastngbuserfunc regprocedure, nodatamode text, VARIADIC args text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_max4ma(value double precision[], pos integer[], VARIADIC userargs text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_max4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_max4ma(matrix double precision[], nodatamode text, VARIADIC args text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_max4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_maxdistance(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_maxdistance(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_maximuminscribedcircle(extensions.geometry, OUT center extensions.geometry, OUT nearest extensions.geometry, OUT radius double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_maximuminscribedcircle(extensions.geometry, OUT center extensions.geometry, OUT nearest extensions.geometry, OUT radius double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mean4ma(value double precision[], pos integer[], VARIADIC userargs text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mean4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mean4ma(matrix double precision[], nodatamode text, VARIADIC args text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mean4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_memsize(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_memsize(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_memsize(extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_memsize(extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_metadata(rast extensions.raster, OUT upperleftx double precision, OUT upperlefty double precision, OUT width integer, OUT height integer, OUT scalex double precision, OUT scaley double precision, OUT skewx double precision, OUT skewy double precision, OUT srid integer, OUT numbands integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_metadata(rast extensions.raster, OUT upperleftx double precision, OUT upperlefty double precision, OUT width integer, OUT height integer, OUT scalex double precision, OUT scaley double precision, OUT skewx double precision, OUT skewy double precision, OUT srid integer, OUT numbands integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_min4ma(value double precision[], pos integer[], VARIADIC userargs text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_min4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_min4ma(matrix double precision[], nodatamode text, VARIADIC args text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_min4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_minconvexhull(rast extensions.raster, nband integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_minconvexhull(rast extensions.raster, nband integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mindist4ma(value double precision[], pos integer[], VARIADIC userargs text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mindist4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_minimumboundingcircle(inputgeom extensions.geometry, segs_per_quarter integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_minimumboundingcircle(inputgeom extensions.geometry, segs_per_quarter integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_minimumboundingradius(extensions.geometry, OUT center extensions.geometry, OUT radius double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_minimumboundingradius(extensions.geometry, OUT center extensions.geometry, OUT radius double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_minimumclearance(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_minimumclearance(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_minimumclearanceline(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_minimumclearanceline(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_minpossiblevalue(pixeltype text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_minpossiblevalue(pixeltype text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mlinefromtext(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mlinefromtext(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mlinefromtext(text, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mlinefromtext(text, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mlinefromwkb(bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mlinefromwkb(bytea) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mlinefromwkb(bytea, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mlinefromwkb(bytea, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mpointfromtext(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mpointfromtext(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mpointfromtext(text, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mpointfromtext(text, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mpointfromwkb(bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mpointfromwkb(bytea) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mpointfromwkb(bytea, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mpointfromwkb(bytea, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mpolyfromtext(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mpolyfromtext(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mpolyfromtext(text, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mpolyfromtext(text, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mpolyfromwkb(bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mpolyfromwkb(bytea) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_mpolyfromwkb(bytea, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_mpolyfromwkb(bytea, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_multi(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_multi(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_multilinefromwkb(bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_multilinefromwkb(bytea) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_multilinestringfromtext(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_multilinestringfromtext(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_multilinestringfromtext(text, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_multilinestringfromtext(text, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_multipointfromtext(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_multipointfromtext(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_multipointfromwkb(bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_multipointfromwkb(bytea) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_multipointfromwkb(bytea, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_multipointfromwkb(bytea, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_multipolyfromwkb(bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_multipolyfromwkb(bytea) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_multipolyfromwkb(bytea, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_multipolyfromwkb(bytea, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_multipolygonfromtext(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_multipolygonfromtext(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_multipolygonfromtext(text, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_multipolygonfromtext(text, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_ndims(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_ndims(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_nearestvalue(rast extensions.raster, pt extensions.geometry, exclude_nodata_value boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_nearestvalue(rast extensions.raster, pt extensions.geometry, exclude_nodata_value boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_nearestvalue(rast extensions.raster, band integer, pt extensions.geometry, exclude_nodata_value boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_nearestvalue(rast extensions.raster, band integer, pt extensions.geometry, exclude_nodata_value boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_nearestvalue(rast extensions.raster, columnx integer, rowy integer, exclude_nodata_value boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_nearestvalue(rast extensions.raster, columnx integer, rowy integer, exclude_nodata_value boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_nearestvalue(rast extensions.raster, band integer, columnx integer, rowy integer, exclude_nodata_value boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_nearestvalue(rast extensions.raster, band integer, columnx integer, rowy integer, exclude_nodata_value boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_neighborhood(rast extensions.raster, pt extensions.geometry, distancex integer, distancey integer, exclude_nodata_value boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_neighborhood(rast extensions.raster, pt extensions.geometry, distancex integer, distancey integer, exclude_nodata_value boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_neighborhood(rast extensions.raster, band integer, pt extensions.geometry, distancex integer, distancey integer, exclude_nodata_value boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_neighborhood(rast extensions.raster, band integer, pt extensions.geometry, distancex integer, distancey integer, exclude_nodata_value boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_neighborhood(rast extensions.raster, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_neighborhood(rast extensions.raster, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_neighborhood(rast extensions.raster, band integer, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_neighborhood(rast extensions.raster, band integer, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_node(g extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_node(g extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_normalize(geom extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_normalize(geom extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_notsamealignmentreason(rast1 extensions.raster, rast2 extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_notsamealignmentreason(rast1 extensions.raster, rast2 extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_npoints(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_npoints(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_nrings(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_nrings(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_numbands(extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_numbands(extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_numgeometries(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_numgeometries(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_numinteriorring(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_numinteriorring(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_numinteriorrings(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_numinteriorrings(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_numpatches(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_numpatches(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_numpoints(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_numpoints(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_offsetcurve(line extensions.geometry, distance double precision, params text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_offsetcurve(line extensions.geometry, distance double precision, params text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_orderingequals(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_orderingequals(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_orientedenvelope(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_orientedenvelope(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_overlaps(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_overlaps(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_overlaps(rast1 extensions.raster, rast2 extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_overlaps(rast1 extensions.raster, rast2 extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_overlaps(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_overlaps(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_patchn(extensions.geometry, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_patchn(extensions.geometry, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_perimeter(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_perimeter(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_perimeter(geog extensions.geography, use_spheroid boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_perimeter(geog extensions.geography, use_spheroid boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_perimeter2d(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_perimeter2d(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_pixelascentroid(rast extensions.raster, x integer, y integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_pixelascentroid(rast extensions.raster, x integer, y integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_pixelascentroids(rast extensions.raster, band integer, exclude_nodata_value boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_pixelascentroids(rast extensions.raster, band integer, exclude_nodata_value boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_pixelaspoint(rast extensions.raster, x integer, y integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_pixelaspoint(rast extensions.raster, x integer, y integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_pixelaspoints(rast extensions.raster, band integer, exclude_nodata_value boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_pixelaspoints(rast extensions.raster, band integer, exclude_nodata_value boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_pixelaspolygon(rast extensions.raster, x integer, y integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_pixelaspolygon(rast extensions.raster, x integer, y integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_pixelaspolygons(rast extensions.raster, band integer, exclude_nodata_value boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_pixelaspolygons(rast extensions.raster, band integer, exclude_nodata_value boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_pixelheight(extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_pixelheight(extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_pixelofvalue(rast extensions.raster, search double precision[], exclude_nodata_value boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_pixelofvalue(rast extensions.raster, search double precision[], exclude_nodata_value boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_pixelofvalue(rast extensions.raster, search double precision, exclude_nodata_value boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_pixelofvalue(rast extensions.raster, search double precision, exclude_nodata_value boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_pixelofvalue(rast extensions.raster, nband integer, search double precision[], exclude_nodata_value boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_pixelofvalue(rast extensions.raster, nband integer, search double precision[], exclude_nodata_value boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_pixelofvalue(rast extensions.raster, nband integer, search double precision, exclude_nodata_value boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_pixelofvalue(rast extensions.raster, nband integer, search double precision, exclude_nodata_value boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_pixelwidth(extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_pixelwidth(extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_point(double precision, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_point(double precision, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_point(double precision, double precision, srid integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_point(double precision, double precision, srid integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_pointfromgeohash(text, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_pointfromgeohash(text, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_pointfromtext(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_pointfromtext(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_pointfromtext(text, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_pointfromtext(text, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_pointfromwkb(bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_pointfromwkb(bytea) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_pointfromwkb(bytea, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_pointfromwkb(bytea, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_pointinsidecircle(extensions.geometry, double precision, double precision, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_pointinsidecircle(extensions.geometry, double precision, double precision, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_pointm(xcoordinate double precision, ycoordinate double precision, mcoordinate double precision, srid integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_pointm(xcoordinate double precision, ycoordinate double precision, mcoordinate double precision, srid integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_pointn(extensions.geometry, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_pointn(extensions.geometry, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_pointonsurface(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_pointonsurface(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_points(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_points(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_pointz(xcoordinate double precision, ycoordinate double precision, zcoordinate double precision, srid integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_pointz(xcoordinate double precision, ycoordinate double precision, zcoordinate double precision, srid integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_pointzm(xcoordinate double precision, ycoordinate double precision, zcoordinate double precision, mcoordinate double precision, srid integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_pointzm(xcoordinate double precision, ycoordinate double precision, zcoordinate double precision, mcoordinate double precision, srid integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_polyfromtext(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_polyfromtext(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_polyfromtext(text, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_polyfromtext(text, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_polyfromwkb(bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_polyfromwkb(bytea) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_polyfromwkb(bytea, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_polyfromwkb(bytea, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_polygon(extensions.geometry, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_polygon(extensions.geometry, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_polygon(rast extensions.raster, band integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_polygon(rast extensions.raster, band integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_polygonfromtext(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_polygonfromtext(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_polygonfromtext(text, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_polygonfromtext(text, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_polygonfromwkb(bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_polygonfromwkb(bytea) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_polygonfromwkb(bytea, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_polygonfromwkb(bytea, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_polygonize(extensions.geometry[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_polygonize(extensions.geometry[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_project(geog extensions.geography, distance double precision, azimuth double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_project(geog extensions.geography, distance double precision, azimuth double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_quantile(rast extensions.raster, quantiles double precision[], OUT quantile double precision, OUT value double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_quantile(rast extensions.raster, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_quantile(rast extensions.raster, quantile double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_quantile(rast extensions.raster, quantile double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_quantile(rast extensions.raster, exclude_nodata_value boolean, quantile double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_quantile(rast extensions.raster, exclude_nodata_value boolean, quantile double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_quantile(rast extensions.raster, nband integer, quantiles double precision[], OUT quantile double precision, OUT value double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_quantile(rast extensions.raster, nband integer, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_quantile(rast extensions.raster, nband integer, quantile double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_quantile(rast extensions.raster, nband integer, quantile double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_quantile(rast extensions.raster, nband integer, exclude_nodata_value boolean, quantiles double precision[], OUT quantile double precision, OUT value double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_quantile(rast extensions.raster, nband integer, exclude_nodata_value boolean, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_quantile(rast extensions.raster, nband integer, exclude_nodata_value boolean, quantile double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_quantile(rast extensions.raster, nband integer, exclude_nodata_value boolean, quantile double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_quantizecoordinates(g extensions.geometry, prec_x integer, prec_y integer, prec_z integer, prec_m integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_quantizecoordinates(g extensions.geometry, prec_x integer, prec_y integer, prec_z integer, prec_m integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_range4ma(value double precision[], pos integer[], VARIADIC userargs text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_range4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_range4ma(matrix double precision[], nodatamode text, VARIADIC args text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_range4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_rastertoworldcoord(rast extensions.raster, columnx integer, rowy integer, OUT longitude double precision, OUT latitude double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_rastertoworldcoord(rast extensions.raster, columnx integer, rowy integer, OUT longitude double precision, OUT latitude double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_rastertoworldcoordx(rast extensions.raster, xr integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_rastertoworldcoordx(rast extensions.raster, xr integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_rastertoworldcoordx(rast extensions.raster, xr integer, yr integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_rastertoworldcoordx(rast extensions.raster, xr integer, yr integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_rastertoworldcoordy(rast extensions.raster, yr integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_rastertoworldcoordy(rast extensions.raster, yr integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_rastertoworldcoordy(rast extensions.raster, xr integer, yr integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_rastertoworldcoordy(rast extensions.raster, xr integer, yr integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_rastfromhexwkb(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_rastfromhexwkb(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_rastfromwkb(bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_rastfromwkb(bytea) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_reclass(rast extensions.raster, VARIADIC reclassargset extensions.reclassarg[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_reclass(rast extensions.raster, VARIADIC reclassargset extensions.reclassarg[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_reclass(rast extensions.raster, reclassexpr text, pixeltype text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_reclass(rast extensions.raster, reclassexpr text, pixeltype text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_reclass(rast extensions.raster, nband integer, reclassexpr text, pixeltype text, nodataval double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_reclass(rast extensions.raster, nband integer, reclassexpr text, pixeltype text, nodataval double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_reduceprecision(geom extensions.geometry, gridsize double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_reduceprecision(geom extensions.geometry, gridsize double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_relate(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_relate(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_relate(geom1 extensions.geometry, geom2 extensions.geometry, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_relate(geom1 extensions.geometry, geom2 extensions.geometry, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_relate(geom1 extensions.geometry, geom2 extensions.geometry, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_relate(geom1 extensions.geometry, geom2 extensions.geometry, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_relatematch(text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_relatematch(text, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_removepoint(extensions.geometry, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_removepoint(extensions.geometry, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_removerepeatedpoints(geom extensions.geometry, tolerance double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_removerepeatedpoints(geom extensions.geometry, tolerance double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_resample(rast extensions.raster, ref extensions.raster, usescale boolean, algorithm text, maxerr double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_resample(rast extensions.raster, ref extensions.raster, usescale boolean, algorithm text, maxerr double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_resample(rast extensions.raster, ref extensions.raster, algorithm text, maxerr double precision, usescale boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_resample(rast extensions.raster, ref extensions.raster, algorithm text, maxerr double precision, usescale boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_resample(rast extensions.raster, scalex double precision, scaley double precision, gridx double precision, gridy double precision, skewx double precision, skewy double precision, algorithm text, maxerr double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_resample(rast extensions.raster, scalex double precision, scaley double precision, gridx double precision, gridy double precision, skewx double precision, skewy double precision, algorithm text, maxerr double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_resample(rast extensions.raster, width integer, height integer, gridx double precision, gridy double precision, skewx double precision, skewy double precision, algorithm text, maxerr double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_resample(rast extensions.raster, width integer, height integer, gridx double precision, gridy double precision, skewx double precision, skewy double precision, algorithm text, maxerr double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_rescale(rast extensions.raster, scalexy double precision, algorithm text, maxerr double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_rescale(rast extensions.raster, scalexy double precision, algorithm text, maxerr double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_rescale(rast extensions.raster, scalex double precision, scaley double precision, algorithm text, maxerr double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_rescale(rast extensions.raster, scalex double precision, scaley double precision, algorithm text, maxerr double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_resize(rast extensions.raster, percentwidth double precision, percentheight double precision, algorithm text, maxerr double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_resize(rast extensions.raster, percentwidth double precision, percentheight double precision, algorithm text, maxerr double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_resize(rast extensions.raster, width integer, height integer, algorithm text, maxerr double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_resize(rast extensions.raster, width integer, height integer, algorithm text, maxerr double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_resize(rast extensions.raster, width text, height text, algorithm text, maxerr double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_resize(rast extensions.raster, width text, height text, algorithm text, maxerr double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_reskew(rast extensions.raster, skewxy double precision, algorithm text, maxerr double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_reskew(rast extensions.raster, skewxy double precision, algorithm text, maxerr double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_reskew(rast extensions.raster, skewx double precision, skewy double precision, algorithm text, maxerr double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_reskew(rast extensions.raster, skewx double precision, skewy double precision, algorithm text, maxerr double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_retile(tab regclass, col name, ext extensions.geometry, sfx double precision, sfy double precision, tw integer, th integer, algo text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_retile(tab regclass, col name, ext extensions.geometry, sfx double precision, sfy double precision, tw integer, th integer, algo text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_reverse(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_reverse(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_rotate(extensions.geometry, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_rotate(extensions.geometry, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_rotate(extensions.geometry, double precision, extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_rotate(extensions.geometry, double precision, extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_rotate(extensions.geometry, double precision, double precision, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_rotate(extensions.geometry, double precision, double precision, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_rotatex(extensions.geometry, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_rotatex(extensions.geometry, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_rotatey(extensions.geometry, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_rotatey(extensions.geometry, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_rotatez(extensions.geometry, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_rotatez(extensions.geometry, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_rotation(extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_rotation(extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_roughness(rast extensions.raster, nband integer, pixeltype text, interpolate_nodata boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_roughness(rast extensions.raster, nband integer, pixeltype text, interpolate_nodata boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_roughness(rast extensions.raster, nband integer, customextent extensions.raster, pixeltype text, interpolate_nodata boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_roughness(rast extensions.raster, nband integer, customextent extensions.raster, pixeltype text, interpolate_nodata boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_samealignment(rast1 extensions.raster, rast2 extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_samealignment(rast1 extensions.raster, rast2 extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_samealignment(ulx1 double precision, uly1 double precision, scalex1 double precision, scaley1 double precision, skewx1 double precision, skewy1 double precision, ulx2 double precision, uly2 double precision, scalex2 double precision, scaley2 double precision, skewx2 double precision, skewy2 double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_samealignment(ulx1 double precision, uly1 double precision, scalex1 double precision, scaley1 double precision, skewx1 double precision, skewy1 double precision, ulx2 double precision, uly2 double precision, scalex2 double precision, scaley2 double precision, skewx2 double precision, skewy2 double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_scale(extensions.geometry, extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_scale(extensions.geometry, extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_scale(extensions.geometry, extensions.geometry, origin extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_scale(extensions.geometry, extensions.geometry, origin extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_scale(extensions.geometry, double precision, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_scale(extensions.geometry, double precision, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_scale(extensions.geometry, double precision, double precision, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_scale(extensions.geometry, double precision, double precision, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_scalex(extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_scalex(extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_scaley(extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_scaley(extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_scroll(extensions.geometry, extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_scroll(extensions.geometry, extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_segmentize(geog extensions.geography, max_segment_length double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_segmentize(geog extensions.geography, max_segment_length double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_segmentize(extensions.geometry, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_segmentize(extensions.geometry, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_setbandindex(rast extensions.raster, band integer, outdbindex integer, force boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_setbandindex(rast extensions.raster, band integer, outdbindex integer, force boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_setbandisnodata(rast extensions.raster, band integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_setbandisnodata(rast extensions.raster, band integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_setbandnodatavalue(rast extensions.raster, nodatavalue double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_setbandnodatavalue(rast extensions.raster, nodatavalue double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_setbandnodatavalue(rast extensions.raster, band integer, nodatavalue double precision, forcechecking boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_setbandnodatavalue(rast extensions.raster, band integer, nodatavalue double precision, forcechecking boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_setbandpath(rast extensions.raster, band integer, outdbpath text, outdbindex integer, force boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_setbandpath(rast extensions.raster, band integer, outdbpath text, outdbindex integer, force boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_seteffectivearea(extensions.geometry, double precision, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_seteffectivearea(extensions.geometry, double precision, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_setgeoreference(rast extensions.raster, georef text, format text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_setgeoreference(rast extensions.raster, georef text, format text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_setgeoreference(rast extensions.raster, upperleftx double precision, upperlefty double precision, scalex double precision, scaley double precision, skewx double precision, skewy double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_setgeoreference(rast extensions.raster, upperleftx double precision, upperlefty double precision, scalex double precision, scaley double precision, skewx double precision, skewy double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_setgeotransform(rast extensions.raster, imag double precision, jmag double precision, theta_i double precision, theta_ij double precision, xoffset double precision, yoffset double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_setgeotransform(rast extensions.raster, imag double precision, jmag double precision, theta_i double precision, theta_ij double precision, xoffset double precision, yoffset double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_setm(rast extensions.raster, geom extensions.geometry, resample text, band integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_setm(rast extensions.raster, geom extensions.geometry, resample text, band integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_setpoint(extensions.geometry, integer, extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_setpoint(extensions.geometry, integer, extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_setrotation(rast extensions.raster, rotation double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_setrotation(rast extensions.raster, rotation double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_setscale(rast extensions.raster, scale double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_setscale(rast extensions.raster, scale double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_setscale(rast extensions.raster, scalex double precision, scaley double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_setscale(rast extensions.raster, scalex double precision, scaley double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_setskew(rast extensions.raster, skew double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_setskew(rast extensions.raster, skew double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_setskew(rast extensions.raster, skewx double precision, skewy double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_setskew(rast extensions.raster, skewx double precision, skewy double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_setsrid(geog extensions.geography, srid integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_setsrid(geog extensions.geography, srid integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_setsrid(geom extensions.geometry, srid integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_setsrid(geom extensions.geometry, srid integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_setsrid(rast extensions.raster, srid integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_setsrid(rast extensions.raster, srid integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_setupperleft(rast extensions.raster, upperleftx double precision, upperlefty double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_setupperleft(rast extensions.raster, upperleftx double precision, upperlefty double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_setvalue(rast extensions.raster, geom extensions.geometry, newvalue double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_setvalue(rast extensions.raster, geom extensions.geometry, newvalue double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_setvalue(rast extensions.raster, nband integer, geom extensions.geometry, newvalue double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_setvalue(rast extensions.raster, nband integer, geom extensions.geometry, newvalue double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_setvalue(rast extensions.raster, x integer, y integer, newvalue double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_setvalue(rast extensions.raster, x integer, y integer, newvalue double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_setvalue(rast extensions.raster, band integer, x integer, y integer, newvalue double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_setvalue(rast extensions.raster, band integer, x integer, y integer, newvalue double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_setvalues(rast extensions.raster, nband integer, geomvalset extensions.geomval[], keepnodata boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_setvalues(rast extensions.raster, nband integer, geomvalset extensions.geomval[], keepnodata boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_setvalues(rast extensions.raster, nband integer, x integer, y integer, newvalueset double precision[], noset boolean[], keepnodata boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_setvalues(rast extensions.raster, nband integer, x integer, y integer, newvalueset double precision[], noset boolean[], keepnodata boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_setvalues(rast extensions.raster, nband integer, x integer, y integer, newvalueset double precision[], nosetvalue double precision, keepnodata boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_setvalues(rast extensions.raster, nband integer, x integer, y integer, newvalueset double precision[], nosetvalue double precision, keepnodata boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_setvalues(rast extensions.raster, x integer, y integer, width integer, height integer, newvalue double precision, keepnodata boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_setvalues(rast extensions.raster, x integer, y integer, width integer, height integer, newvalue double precision, keepnodata boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_setvalues(rast extensions.raster, nband integer, x integer, y integer, width integer, height integer, newvalue double precision, keepnodata boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_setvalues(rast extensions.raster, nband integer, x integer, y integer, width integer, height integer, newvalue double precision, keepnodata boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_setz(rast extensions.raster, geom extensions.geometry, resample text, band integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_setz(rast extensions.raster, geom extensions.geometry, resample text, band integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_sharedpaths(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_sharedpaths(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_shiftlongitude(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_shiftlongitude(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_shortestline(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_shortestline(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_simplify(extensions.geometry, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_simplify(extensions.geometry, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_simplify(extensions.geometry, double precision, boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_simplify(extensions.geometry, double precision, boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_simplifypolygonhull(geom extensions.geometry, vertex_fraction double precision, is_outer boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_simplifypolygonhull(geom extensions.geometry, vertex_fraction double precision, is_outer boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_simplifypreservetopology(extensions.geometry, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_simplifypreservetopology(extensions.geometry, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_simplifyvw(extensions.geometry, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_simplifyvw(extensions.geometry, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_skewx(extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_skewx(extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_skewy(extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_skewy(extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_slope(rast extensions.raster, nband integer, pixeltype text, units text, scale double precision, interpolate_nodata boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_slope(rast extensions.raster, nband integer, pixeltype text, units text, scale double precision, interpolate_nodata boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_slope(rast extensions.raster, nband integer, customextent extensions.raster, pixeltype text, units text, scale double precision, interpolate_nodata boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_slope(rast extensions.raster, nband integer, customextent extensions.raster, pixeltype text, units text, scale double precision, interpolate_nodata boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_snap(geom1 extensions.geometry, geom2 extensions.geometry, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_snap(geom1 extensions.geometry, geom2 extensions.geometry, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_snaptogrid(extensions.geometry, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_snaptogrid(extensions.geometry, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_snaptogrid(extensions.geometry, double precision, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_snaptogrid(extensions.geometry, double precision, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_snaptogrid(extensions.geometry, double precision, double precision, double precision, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_snaptogrid(extensions.geometry, double precision, double precision, double precision, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_snaptogrid(geom1 extensions.geometry, geom2 extensions.geometry, double precision, double precision, double precision, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_snaptogrid(geom1 extensions.geometry, geom2 extensions.geometry, double precision, double precision, double precision, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_snaptogrid(rast extensions.raster, gridx double precision, gridy double precision, scalexy double precision, algorithm text, maxerr double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_snaptogrid(rast extensions.raster, gridx double precision, gridy double precision, scalexy double precision, algorithm text, maxerr double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_snaptogrid(rast extensions.raster, gridx double precision, gridy double precision, scalex double precision, scaley double precision, algorithm text, maxerr double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_snaptogrid(rast extensions.raster, gridx double precision, gridy double precision, scalex double precision, scaley double precision, algorithm text, maxerr double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_snaptogrid(rast extensions.raster, gridx double precision, gridy double precision, algorithm text, maxerr double precision, scalex double precision, scaley double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_snaptogrid(rast extensions.raster, gridx double precision, gridy double precision, algorithm text, maxerr double precision, scalex double precision, scaley double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_split(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_split(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_square(size double precision, cell_i integer, cell_j integer, origin extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_square(size double precision, cell_i integer, cell_j integer, origin extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_squaregrid(size double precision, bounds extensions.geometry, OUT geom extensions.geometry, OUT i integer, OUT j integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_squaregrid(size double precision, bounds extensions.geometry, OUT geom extensions.geometry, OUT i integer, OUT j integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_srid(geog extensions.geography); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_srid(geog extensions.geography) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_srid(geom extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_srid(geom extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_srid(extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_srid(extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_startpoint(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_startpoint(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_stddev4ma(value double precision[], pos integer[], VARIADIC userargs text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_stddev4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_stddev4ma(matrix double precision[], nodatamode text, VARIADIC args text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_stddev4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_subdivide(geom extensions.geometry, maxvertices integer, gridsize double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_subdivide(geom extensions.geometry, maxvertices integer, gridsize double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_sum4ma(value double precision[], pos integer[], VARIADIC userargs text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_sum4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_sum4ma(matrix double precision[], nodatamode text, VARIADIC args text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_sum4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_summary(extensions.geography); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_summary(extensions.geography) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_summary(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_summary(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_summary(rast extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_summary(rast extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_summarystats(rast extensions.raster, exclude_nodata_value boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_summarystats(rast extensions.raster, exclude_nodata_value boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_summarystats(rast extensions.raster, nband integer, exclude_nodata_value boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_summarystats(rast extensions.raster, nband integer, exclude_nodata_value boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_swapordinates(geom extensions.geometry, ords cstring); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_swapordinates(geom extensions.geometry, ords cstring) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_symdifference(geom1 extensions.geometry, geom2 extensions.geometry, gridsize double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_symdifference(geom1 extensions.geometry, geom2 extensions.geometry, gridsize double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_symmetricdifference(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_symmetricdifference(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_tile(rast extensions.raster, width integer, height integer, padwithnodata boolean, nodataval double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_tile(rast extensions.raster, width integer, height integer, padwithnodata boolean, nodataval double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_tile(rast extensions.raster, nband integer[], width integer, height integer, padwithnodata boolean, nodataval double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_tile(rast extensions.raster, nband integer[], width integer, height integer, padwithnodata boolean, nodataval double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_tile(rast extensions.raster, nband integer, width integer, height integer, padwithnodata boolean, nodataval double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_tile(rast extensions.raster, nband integer, width integer, height integer, padwithnodata boolean, nodataval double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_tileenvelope(zoom integer, x integer, y integer, bounds extensions.geometry, margin double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_tileenvelope(zoom integer, x integer, y integer, bounds extensions.geometry, margin double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_touches(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_touches(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_touches(rast1 extensions.raster, rast2 extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_touches(rast1 extensions.raster, rast2 extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_touches(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_touches(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_tpi(rast extensions.raster, nband integer, pixeltype text, interpolate_nodata boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_tpi(rast extensions.raster, nband integer, pixeltype text, interpolate_nodata boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_tpi(rast extensions.raster, nband integer, customextent extensions.raster, pixeltype text, interpolate_nodata boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_tpi(rast extensions.raster, nband integer, customextent extensions.raster, pixeltype text, interpolate_nodata boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_transform(extensions.geometry, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_transform(extensions.geometry, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_transform(geom extensions.geometry, to_proj text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_transform(geom extensions.geometry, to_proj text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_transform(geom extensions.geometry, from_proj text, to_srid integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_transform(geom extensions.geometry, from_proj text, to_srid integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_transform(geom extensions.geometry, from_proj text, to_proj text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_transform(geom extensions.geometry, from_proj text, to_proj text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_transform(rast extensions.raster, alignto extensions.raster, algorithm text, maxerr double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_transform(rast extensions.raster, alignto extensions.raster, algorithm text, maxerr double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_transform(rast extensions.raster, srid integer, scalexy double precision, algorithm text, maxerr double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_transform(rast extensions.raster, srid integer, scalexy double precision, algorithm text, maxerr double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_transform(rast extensions.raster, srid integer, scalex double precision, scaley double precision, algorithm text, maxerr double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_transform(rast extensions.raster, srid integer, scalex double precision, scaley double precision, algorithm text, maxerr double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_transform(rast extensions.raster, srid integer, algorithm text, maxerr double precision, scalex double precision, scaley double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_transform(rast extensions.raster, srid integer, algorithm text, maxerr double precision, scalex double precision, scaley double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_translate(extensions.geometry, double precision, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_translate(extensions.geometry, double precision, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_translate(extensions.geometry, double precision, double precision, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_translate(extensions.geometry, double precision, double precision, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_transscale(extensions.geometry, double precision, double precision, double precision, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_transscale(extensions.geometry, double precision, double precision, double precision, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_tri(rast extensions.raster, nband integer, pixeltype text, interpolate_nodata boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_tri(rast extensions.raster, nband integer, pixeltype text, interpolate_nodata boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_tri(rast extensions.raster, nband integer, customextent extensions.raster, pixeltype text, interpolate_nodata boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_tri(rast extensions.raster, nband integer, customextent extensions.raster, pixeltype text, interpolate_nodata boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_triangulatepolygon(g1 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_triangulatepolygon(g1 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_unaryunion(extensions.geometry, gridsize double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_unaryunion(extensions.geometry, gridsize double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_union(extensions.geometry[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_union(extensions.geometry[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_union(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_union(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_union(geom1 extensions.geometry, geom2 extensions.geometry, gridsize double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_union(geom1 extensions.geometry, geom2 extensions.geometry, gridsize double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_upperleftx(extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_upperleftx(extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_upperlefty(extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_upperlefty(extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_value(rast extensions.raster, pt extensions.geometry, exclude_nodata_value boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_value(rast extensions.raster, pt extensions.geometry, exclude_nodata_value boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_value(rast extensions.raster, x integer, y integer, exclude_nodata_value boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_value(rast extensions.raster, x integer, y integer, exclude_nodata_value boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_value(rast extensions.raster, band integer, pt extensions.geometry, exclude_nodata_value boolean, resample text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_value(rast extensions.raster, band integer, pt extensions.geometry, exclude_nodata_value boolean, resample text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_value(rast extensions.raster, band integer, x integer, y integer, exclude_nodata_value boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_value(rast extensions.raster, band integer, x integer, y integer, exclude_nodata_value boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_valuecount(rast extensions.raster, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_valuecount(rast extensions.raster, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_valuecount(rast extensions.raster, searchvalue double precision, roundto double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_valuecount(rast extensions.raster, searchvalue double precision, roundto double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_valuecount(rast extensions.raster, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_valuecount(rast extensions.raster, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_valuecount(rast extensions.raster, nband integer, searchvalue double precision, roundto double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_valuecount(rast extensions.raster, nband integer, searchvalue double precision, roundto double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_valuecount(rastertable text, rastercolumn text, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_valuecount(rastertable text, rastercolumn text, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_valuecount(rastertable text, rastercolumn text, searchvalue double precision, roundto double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_valuecount(rastertable text, rastercolumn text, searchvalue double precision, roundto double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_valuecount(rast extensions.raster, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_valuecount(rast extensions.raster, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_valuecount(rast extensions.raster, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_valuecount(rast extensions.raster, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_valuecount(rastertable text, rastercolumn text, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, searchvalue double precision, roundto double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_valuecount(rastertable text, rastercolumn text, nband integer, searchvalue double precision, roundto double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_valuepercent(rast extensions.raster, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_valuepercent(rast extensions.raster, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_valuepercent(rast extensions.raster, searchvalue double precision, roundto double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_valuepercent(rast extensions.raster, searchvalue double precision, roundto double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_valuepercent(rast extensions.raster, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_valuepercent(rast extensions.raster, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_valuepercent(rast extensions.raster, nband integer, searchvalue double precision, roundto double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_valuepercent(rast extensions.raster, nband integer, searchvalue double precision, roundto double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_valuepercent(rastertable text, rastercolumn text, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_valuepercent(rastertable text, rastercolumn text, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_valuepercent(rastertable text, rastercolumn text, searchvalue double precision, roundto double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_valuepercent(rastertable text, rastercolumn text, searchvalue double precision, roundto double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_valuepercent(rast extensions.raster, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_valuepercent(rast extensions.raster, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_valuepercent(rast extensions.raster, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_valuepercent(rast extensions.raster, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_valuepercent(rastertable text, rastercolumn text, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, searchvalue double precision, roundto double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_valuepercent(rastertable text, rastercolumn text, nband integer, searchvalue double precision, roundto double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_valuepercent(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_valuepercent(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_voronoilines(g1 extensions.geometry, tolerance double precision, extend_to extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_voronoilines(g1 extensions.geometry, tolerance double precision, extend_to extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_voronoipolygons(g1 extensions.geometry, tolerance double precision, extend_to extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_voronoipolygons(g1 extensions.geometry, tolerance double precision, extend_to extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_width(extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_width(extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_within(geom1 extensions.geometry, geom2 extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_within(geom1 extensions.geometry, geom2 extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_within(rast1 extensions.raster, rast2 extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_within(rast1 extensions.raster, rast2 extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_within(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_within(rast1 extensions.raster, nband1 integer, rast2 extensions.raster, nband2 integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_wkbtosql(wkb bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_wkbtosql(wkb bytea) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_wkttosql(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_wkttosql(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_worldtorastercoord(rast extensions.raster, pt extensions.geometry, OUT columnx integer, OUT rowy integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_worldtorastercoord(rast extensions.raster, pt extensions.geometry, OUT columnx integer, OUT rowy integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_worldtorastercoord(rast extensions.raster, longitude double precision, latitude double precision, OUT columnx integer, OUT rowy integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_worldtorastercoord(rast extensions.raster, longitude double precision, latitude double precision, OUT columnx integer, OUT rowy integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_worldtorastercoordx(rast extensions.raster, pt extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_worldtorastercoordx(rast extensions.raster, pt extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_worldtorastercoordx(rast extensions.raster, xw double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_worldtorastercoordx(rast extensions.raster, xw double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_worldtorastercoordx(rast extensions.raster, xw double precision, yw double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_worldtorastercoordx(rast extensions.raster, xw double precision, yw double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_worldtorastercoordy(rast extensions.raster, pt extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_worldtorastercoordy(rast extensions.raster, pt extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_worldtorastercoordy(rast extensions.raster, yw double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_worldtorastercoordy(rast extensions.raster, yw double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_worldtorastercoordy(rast extensions.raster, xw double precision, yw double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_worldtorastercoordy(rast extensions.raster, xw double precision, yw double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_wrapx(geom extensions.geometry, wrap double precision, move double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_wrapx(geom extensions.geometry, wrap double precision, move double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_x(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_x(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_xmax(extensions.box3d); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_xmax(extensions.box3d) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_xmin(extensions.box3d); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_xmin(extensions.box3d) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_y(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_y(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_ymax(extensions.box3d); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_ymax(extensions.box3d) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_ymin(extensions.box3d); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_ymin(extensions.box3d) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_z(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_z(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_zmax(extensions.box3d); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_zmax(extensions.box3d) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_zmflag(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_zmflag(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_zmin(extensions.box3d); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_zmin(extensions.box3d) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION standardize_address(lextab text, gaztab text, rultab text, address text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.standardize_address(lextab text, gaztab text, rultab text, address text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION standardize_address(lextab text, gaztab text, rultab text, micro text, macro text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.standardize_address(lextab text, gaztab text, rultab text, micro text, macro text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION subltree(extensions.ltree, integer, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.subltree(extensions.ltree, integer, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION subpath(extensions.ltree, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.subpath(extensions.ltree, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION subpath(extensions.ltree, integer, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.subpath(extensions.ltree, integer, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION text2ltree(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.text2ltree(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION try_cast_double(inp text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.try_cast_double(inp text) FROM postgres;
GRANT ALL ON FUNCTION extensions.try_cast_double(inp text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.try_cast_double(inp text) TO dashboard_user;


--
-- Name: FUNCTION unlockrows(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.unlockrows(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION updategeometrysrid(character varying, character varying, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.updategeometrysrid(character varying, character varying, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION updategeometrysrid(character varying, character varying, character varying, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.updategeometrysrid(character varying, character varying, character varying, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION updategeometrysrid(catalogn_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.updategeometrysrid(catalogn_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION updaterastersrid(table_name name, column_name name, new_srid integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.updaterastersrid(table_name name, column_name name, new_srid integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION updaterastersrid(schema_name name, table_name name, column_name name, new_srid integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.updaterastersrid(schema_name name, table_name name, column_name name, new_srid integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION url_decode(data text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.url_decode(data text) FROM postgres;
GRANT ALL ON FUNCTION extensions.url_decode(data text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.url_decode(data text) TO dashboard_user;


--
-- Name: FUNCTION url_encode(data bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.url_encode(data bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.url_encode(data bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.url_encode(data bytea) TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v1(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v1() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v1mc(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v1mc() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1mc() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1mc() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v3(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v4(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v4() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v4() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v4() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v5(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) TO dashboard_user;


--
-- Name: FUNCTION uuid_nil(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_nil() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_nil() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_nil() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_dns(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_dns() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_dns() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_dns() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_oid(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_oid() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_oid() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_oid() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_url(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_url() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_url() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_url() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_x500(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_x500() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_x500() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_x500() TO dashboard_user;


--
-- Name: FUNCTION verify(token text, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) FROM postgres;
GRANT ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION comment_directive(comment_ text); Type: ACL; Schema: graphql; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql.comment_directive(comment_ text) TO postgres;
GRANT ALL ON FUNCTION graphql.comment_directive(comment_ text) TO anon;
GRANT ALL ON FUNCTION graphql.comment_directive(comment_ text) TO authenticated;
GRANT ALL ON FUNCTION graphql.comment_directive(comment_ text) TO service_role;


--
-- Name: FUNCTION exception(message text); Type: ACL; Schema: graphql; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql.exception(message text) TO postgres;
GRANT ALL ON FUNCTION graphql.exception(message text) TO anon;
GRANT ALL ON FUNCTION graphql.exception(message text) TO authenticated;
GRANT ALL ON FUNCTION graphql.exception(message text) TO service_role;


--
-- Name: FUNCTION get_schema_version(); Type: ACL; Schema: graphql; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql.get_schema_version() TO postgres;
GRANT ALL ON FUNCTION graphql.get_schema_version() TO anon;
GRANT ALL ON FUNCTION graphql.get_schema_version() TO authenticated;
GRANT ALL ON FUNCTION graphql.get_schema_version() TO service_role;


--
-- Name: FUNCTION increment_schema_version(); Type: ACL; Schema: graphql; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql.increment_schema_version() TO postgres;
GRANT ALL ON FUNCTION graphql.increment_schema_version() TO anon;
GRANT ALL ON FUNCTION graphql.increment_schema_version() TO authenticated;
GRANT ALL ON FUNCTION graphql.increment_schema_version() TO service_role;


--
-- Name: FUNCTION graphql("operationName" text, query text, variables jsonb, extensions jsonb); Type: ACL; Schema: graphql_public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO postgres;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO anon;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO authenticated;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO service_role;


--
-- Name: FUNCTION get_auth(p_usename text); Type: ACL; Schema: pgbouncer; Owner: postgres
--

REVOKE ALL ON FUNCTION pgbouncer.get_auth(p_usename text) FROM PUBLIC;
GRANT ALL ON FUNCTION pgbouncer.get_auth(p_usename text) TO pgbouncer;


--
-- Name: FUNCTION crypto_aead_det_decrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea); Type: ACL; Schema: pgsodium; Owner: pgsodium_keymaker
--

GRANT ALL ON FUNCTION pgsodium.crypto_aead_det_decrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea) TO service_role;


--
-- Name: FUNCTION crypto_aead_det_encrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea); Type: ACL; Schema: pgsodium; Owner: pgsodium_keymaker
--

GRANT ALL ON FUNCTION pgsodium.crypto_aead_det_encrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea) TO service_role;


--
-- Name: FUNCTION crypto_aead_det_keygen(); Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON FUNCTION pgsodium.crypto_aead_det_keygen() TO service_role;


--
-- Name: FUNCTION apply_rls(wal jsonb, max_record_bytes integer); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO postgres;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO anon;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO authenticated;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO service_role;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO supabase_realtime_admin;


--
-- Name: FUNCTION broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text) TO postgres;
GRANT ALL ON FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text) TO dashboard_user;


--
-- Name: FUNCTION build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO postgres;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO anon;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO authenticated;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO service_role;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO supabase_realtime_admin;


--
-- Name: FUNCTION "cast"(val text, type_ regtype); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO postgres;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO dashboard_user;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO anon;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO authenticated;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO service_role;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO supabase_realtime_admin;


--
-- Name: FUNCTION check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO postgres;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO anon;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO authenticated;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO service_role;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO supabase_realtime_admin;


--
-- Name: FUNCTION is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO postgres;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO anon;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO authenticated;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO service_role;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO supabase_realtime_admin;


--
-- Name: FUNCTION list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO postgres;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO anon;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO authenticated;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO service_role;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO supabase_realtime_admin;


--
-- Name: FUNCTION quote_wal2json(entity regclass); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO postgres;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO anon;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO authenticated;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO service_role;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO supabase_realtime_admin;


--
-- Name: FUNCTION send(payload jsonb, event text, topic text, private boolean); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean) TO postgres;
GRANT ALL ON FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean) TO dashboard_user;


--
-- Name: FUNCTION subscription_check_filters(); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO postgres;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO dashboard_user;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO anon;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO authenticated;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO service_role;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO supabase_realtime_admin;


--
-- Name: FUNCTION to_regrole(role_name text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO postgres;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO anon;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO authenticated;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO service_role;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO supabase_realtime_admin;


--
-- Name: FUNCTION topic(); Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON FUNCTION realtime.topic() TO postgres;
GRANT ALL ON FUNCTION realtime.topic() TO dashboard_user;


--
-- Name: FUNCTION count_words(character varying); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.count_words(character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION create_census_base_tables(); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.create_census_base_tables() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION cull_null(character varying); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.cull_null(character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION diff_zip(zip1 character varying, zip2 character varying); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.diff_zip(zip1 character varying, zip2 character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION difference(text, text); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.difference(text, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION dmetaphone(text); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.dmetaphone(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION dmetaphone_alt(text); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.dmetaphone_alt(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION drop_dupe_featnames_generate_script(); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.drop_dupe_featnames_generate_script() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION drop_indexes_generate_script(tiger_data_schema text); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.drop_indexes_generate_script(tiger_data_schema text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION drop_nation_tables_generate_script(param_schema text); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.drop_nation_tables_generate_script(param_schema text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION drop_state_tables_generate_script(param_state text, param_schema text); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.drop_state_tables_generate_script(param_state text, param_schema text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION end_soundex(character varying); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.end_soundex(character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geocode(input character varying, max_results integer, restrict_geom extensions.geometry, OUT addy tiger.norm_addy, OUT geomout extensions.geometry, OUT rating integer); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.geocode(input character varying, max_results integer, restrict_geom extensions.geometry, OUT addy tiger.norm_addy, OUT geomout extensions.geometry, OUT rating integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geocode(in_addy tiger.norm_addy, max_results integer, restrict_geom extensions.geometry, OUT addy tiger.norm_addy, OUT geomout extensions.geometry, OUT rating integer); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.geocode(in_addy tiger.norm_addy, max_results integer, restrict_geom extensions.geometry, OUT addy tiger.norm_addy, OUT geomout extensions.geometry, OUT rating integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geocode_address(parsed tiger.norm_addy, max_results integer, restrict_geom extensions.geometry, OUT addy tiger.norm_addy, OUT geomout extensions.geometry, OUT rating integer); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.geocode_address(parsed tiger.norm_addy, max_results integer, restrict_geom extensions.geometry, OUT addy tiger.norm_addy, OUT geomout extensions.geometry, OUT rating integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geocode_intersection(roadway1 text, roadway2 text, in_state text, in_city text, in_zip text, num_results integer, OUT addy tiger.norm_addy, OUT geomout extensions.geometry, OUT rating integer); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.geocode_intersection(roadway1 text, roadway2 text, in_state text, in_city text, in_zip text, num_results integer, OUT addy tiger.norm_addy, OUT geomout extensions.geometry, OUT rating integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION geocode_location(parsed tiger.norm_addy, restrict_geom extensions.geometry, OUT addy tiger.norm_addy, OUT geomout extensions.geometry, OUT rating integer); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.geocode_location(parsed tiger.norm_addy, restrict_geom extensions.geometry, OUT addy tiger.norm_addy, OUT geomout extensions.geometry, OUT rating integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION get_geocode_setting(setting_name text); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.get_geocode_setting(setting_name text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION get_last_words(inputstring character varying, count integer); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.get_last_words(inputstring character varying, count integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION get_tract(loc_geom extensions.geometry, output_field text); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.get_tract(loc_geom extensions.geometry, output_field text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION greatest_hn(fromhn character varying, tohn character varying); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.greatest_hn(fromhn character varying, tohn character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION includes_address(given_address integer, addr1 integer, addr2 integer, addr3 integer, addr4 integer); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.includes_address(given_address integer, addr1 integer, addr2 integer, addr3 integer, addr4 integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION install_geocode_settings(); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.install_geocode_settings() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION install_missing_indexes(); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.install_missing_indexes() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION install_pagc_tables(); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.install_pagc_tables() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION interpolate_from_address(given_address integer, in_addr1 character varying, in_addr2 character varying, in_road extensions.geometry, in_side character varying, in_offset_m double precision); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.interpolate_from_address(given_address integer, in_addr1 character varying, in_addr2 character varying, in_road extensions.geometry, in_side character varying, in_offset_m double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION is_pretype(text); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.is_pretype(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION least_hn(fromhn character varying, tohn character varying); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.least_hn(fromhn character varying, tohn character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION levenshtein(text, text); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.levenshtein(text, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION levenshtein(text, text, integer, integer, integer); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.levenshtein(text, text, integer, integer, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION levenshtein_ignore_case(character varying, character varying); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.levenshtein_ignore_case(character varying, character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION levenshtein_less_equal(text, text, integer); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.levenshtein_less_equal(text, text, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION levenshtein_less_equal(text, text, integer, integer, integer, integer); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.levenshtein_less_equal(text, text, integer, integer, integer, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION loader_generate_census_script(param_states text[], os text); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.loader_generate_census_script(param_states text[], os text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION loader_generate_nation_script(os text); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.loader_generate_nation_script(os text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION loader_generate_script(param_states text[], os text); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.loader_generate_script(param_states text[], os text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION loader_load_staged_data(param_staging_table text, param_target_table text); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.loader_load_staged_data(param_staging_table text, param_target_table text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION loader_load_staged_data(param_staging_table text, param_target_table text, param_columns_exclude text[]); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.loader_load_staged_data(param_staging_table text, param_target_table text, param_columns_exclude text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION loader_macro_replace(param_input text, param_keys text[], param_values text[]); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.loader_macro_replace(param_input text, param_keys text[], param_values text[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION location_extract(fullstreet character varying, stateabbrev character varying); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.location_extract(fullstreet character varying, stateabbrev character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION location_extract_countysub_exact(fullstreet character varying, stateabbrev character varying); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.location_extract_countysub_exact(fullstreet character varying, stateabbrev character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION location_extract_countysub_fuzzy(fullstreet character varying, stateabbrev character varying); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.location_extract_countysub_fuzzy(fullstreet character varying, stateabbrev character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION location_extract_place_exact(fullstreet character varying, stateabbrev character varying); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.location_extract_place_exact(fullstreet character varying, stateabbrev character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION location_extract_place_fuzzy(fullstreet character varying, stateabbrev character varying); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.location_extract_place_fuzzy(fullstreet character varying, stateabbrev character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION metaphone(text, integer); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.metaphone(text, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION missing_indexes_generate_script(); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.missing_indexes_generate_script() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION normalize_address(in_rawinput character varying); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.normalize_address(in_rawinput character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION nullable_levenshtein(character varying, character varying); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.nullable_levenshtein(character varying, character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION numeric_streets_equal(input_street character varying, output_street character varying); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.numeric_streets_equal(input_street character varying, output_street character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pagc_normalize_address(in_rawinput character varying); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.pagc_normalize_address(in_rawinput character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pprint_addy(input tiger.norm_addy); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.pprint_addy(input tiger.norm_addy) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION rate_attributes(dirpa character varying, dirpb character varying, streetnamea character varying, streetnameb character varying, streettypea character varying, streettypeb character varying, dirsa character varying, dirsb character varying, prequalabr character varying); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.rate_attributes(dirpa character varying, dirpb character varying, streetnamea character varying, streetnameb character varying, streettypea character varying, streettypeb character varying, dirsa character varying, dirsb character varying, prequalabr character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION rate_attributes(dirpa character varying, dirpb character varying, streetnamea character varying, streetnameb character varying, streettypea character varying, streettypeb character varying, dirsa character varying, dirsb character varying, locationa character varying, locationb character varying, prequalabr character varying); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.rate_attributes(dirpa character varying, dirpb character varying, streetnamea character varying, streetnameb character varying, streettypea character varying, streettypeb character varying, dirsa character varying, dirsb character varying, locationa character varying, locationb character varying, prequalabr character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION reverse_geocode(pt extensions.geometry, include_strnum_range boolean, OUT intpt extensions.geometry[], OUT addy tiger.norm_addy[], OUT street character varying[]); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.reverse_geocode(pt extensions.geometry, include_strnum_range boolean, OUT intpt extensions.geometry[], OUT addy tiger.norm_addy[], OUT street character varying[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION set_geocode_setting(setting_name text, setting_value text); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.set_geocode_setting(setting_name text, setting_value text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION setsearchpathforinstall(a_schema_name text); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.setsearchpathforinstall(a_schema_name text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION soundex(text); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.soundex(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION state_extract(rawinput character varying); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.state_extract(rawinput character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION text_soundex(text); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.text_soundex(text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION topology_load_tiger(toponame character varying, region_type character varying, region_id character varying); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.topology_load_tiger(toponame character varying, region_type character varying, region_id character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION utmzone(extensions.geometry); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.utmzone(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION zip_range(zip text, range_start integer, range_end integer); Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON FUNCTION tiger.zip_range(zip text, range_start integer, range_end integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_3dextent(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_3dextent(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asflatgeobuf(anyelement); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asflatgeobuf(anyelement) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asflatgeobuf(anyelement, boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asflatgeobuf(anyelement, boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asflatgeobuf(anyelement, boolean, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asflatgeobuf(anyelement, boolean, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asgeobuf(anyelement); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asgeobuf(anyelement) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asgeobuf(anyelement, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asgeobuf(anyelement, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asmvt(anyelement); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asmvt(anyelement) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asmvt(anyelement, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asmvt(anyelement, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asmvt(anyelement, text, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asmvt(anyelement, text, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asmvt(anyelement, text, integer, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asmvt(anyelement, text, integer, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_asmvt(anyelement, text, integer, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_asmvt(anyelement, text, integer, text, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_clusterintersecting(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_clusterintersecting(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_clusterwithin(extensions.geometry, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_clusterwithin(extensions.geometry, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_collect(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_collect(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_countagg(extensions.raster, boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_countagg(extensions.raster, boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_countagg(extensions.raster, integer, boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_countagg(extensions.raster, integer, boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_countagg(extensions.raster, integer, boolean, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_countagg(extensions.raster, integer, boolean, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_extent(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_extent(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_makeline(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_makeline(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_memcollect(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_memcollect(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_memunion(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_memunion(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_polygonize(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_polygonize(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_samealignment(extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_samealignment(extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_summarystatsagg(extensions.raster, boolean, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_summarystatsagg(extensions.raster, boolean, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_summarystatsagg(extensions.raster, integer, boolean); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_summarystatsagg(extensions.raster, integer, boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_summarystatsagg(extensions.raster, integer, boolean, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_summarystatsagg(extensions.raster, integer, boolean, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_union(extensions.geometry); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_union(extensions.geometry) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_union(extensions.raster); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_union(extensions.raster) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_union(extensions.geometry, double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_union(extensions.geometry, double precision) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_union(extensions.raster, extensions.unionarg[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_union(extensions.raster, extensions.unionarg[]) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_union(extensions.raster, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_union(extensions.raster, integer) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_union(extensions.raster, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_union(extensions.raster, text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION st_union(extensions.raster, integer, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.st_union(extensions.raster, integer, text) TO postgres WITH GRANT OPTION;


--
-- Name: TABLE audit_log_entries; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.audit_log_entries TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.audit_log_entries TO postgres;
GRANT SELECT ON TABLE auth.audit_log_entries TO postgres WITH GRANT OPTION;


--
-- Name: TABLE flow_state; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.flow_state TO postgres;
GRANT SELECT ON TABLE auth.flow_state TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.flow_state TO dashboard_user;


--
-- Name: TABLE identities; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.identities TO postgres;
GRANT SELECT ON TABLE auth.identities TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.identities TO dashboard_user;


--
-- Name: TABLE instances; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.instances TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.instances TO postgres;
GRANT SELECT ON TABLE auth.instances TO postgres WITH GRANT OPTION;


--
-- Name: TABLE mfa_amr_claims; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_amr_claims TO postgres;
GRANT SELECT ON TABLE auth.mfa_amr_claims TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_amr_claims TO dashboard_user;


--
-- Name: TABLE mfa_challenges; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_challenges TO postgres;
GRANT SELECT ON TABLE auth.mfa_challenges TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_challenges TO dashboard_user;


--
-- Name: TABLE mfa_factors; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_factors TO postgres;
GRANT SELECT ON TABLE auth.mfa_factors TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_factors TO dashboard_user;


--
-- Name: TABLE one_time_tokens; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.one_time_tokens TO postgres;
GRANT SELECT ON TABLE auth.one_time_tokens TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.one_time_tokens TO dashboard_user;


--
-- Name: TABLE refresh_tokens; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.refresh_tokens TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.refresh_tokens TO postgres;
GRANT SELECT ON TABLE auth.refresh_tokens TO postgres WITH GRANT OPTION;


--
-- Name: SEQUENCE refresh_tokens_id_seq; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON SEQUENCE auth.refresh_tokens_id_seq TO dashboard_user;
GRANT ALL ON SEQUENCE auth.refresh_tokens_id_seq TO postgres;


--
-- Name: TABLE saml_providers; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.saml_providers TO postgres;
GRANT SELECT ON TABLE auth.saml_providers TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.saml_providers TO dashboard_user;


--
-- Name: TABLE saml_relay_states; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.saml_relay_states TO postgres;
GRANT SELECT ON TABLE auth.saml_relay_states TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.saml_relay_states TO dashboard_user;


--
-- Name: TABLE schema_migrations; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.schema_migrations TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.schema_migrations TO postgres;
GRANT SELECT ON TABLE auth.schema_migrations TO postgres WITH GRANT OPTION;


--
-- Name: TABLE sessions; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sessions TO postgres;
GRANT SELECT ON TABLE auth.sessions TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sessions TO dashboard_user;


--
-- Name: TABLE sso_domains; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sso_domains TO postgres;
GRANT SELECT ON TABLE auth.sso_domains TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sso_domains TO dashboard_user;


--
-- Name: TABLE sso_providers; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sso_providers TO postgres;
GRANT SELECT ON TABLE auth.sso_providers TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sso_providers TO dashboard_user;


--
-- Name: TABLE users; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.users TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.users TO postgres;
GRANT SELECT ON TABLE auth.users TO postgres WITH GRANT OPTION;


--
-- Name: TABLE pg_stat_statements; Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON TABLE extensions.pg_stat_statements FROM postgres;
GRANT ALL ON TABLE extensions.pg_stat_statements TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE extensions.pg_stat_statements TO dashboard_user;


--
-- Name: TABLE pg_stat_statements_info; Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON TABLE extensions.pg_stat_statements_info FROM postgres;
GRANT ALL ON TABLE extensions.pg_stat_statements_info TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE extensions.pg_stat_statements_info TO dashboard_user;


--
-- Name: SEQUENCE seq_schema_version; Type: ACL; Schema: graphql; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE graphql.seq_schema_version TO postgres;
GRANT ALL ON SEQUENCE graphql.seq_schema_version TO anon;
GRANT ALL ON SEQUENCE graphql.seq_schema_version TO authenticated;
GRANT ALL ON SEQUENCE graphql.seq_schema_version TO service_role;


--
-- Name: TABLE decrypted_key; Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON TABLE pgsodium.decrypted_key TO pgsodium_keyholder;


--
-- Name: TABLE masking_rule; Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON TABLE pgsodium.masking_rule TO pgsodium_keyholder;


--
-- Name: TABLE mask_columns; Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON TABLE pgsodium.mask_columns TO pgsodium_keyholder;


--
-- Name: TABLE agencias; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.agencias TO anon;
GRANT ALL ON TABLE public.agencias TO authenticated;
GRANT ALL ON TABLE public.agencias TO service_role;


--
-- Name: SEQUENCE agencias_agencia_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.agencias_agencia_id_seq TO anon;
GRANT ALL ON SEQUENCE public.agencias_agencia_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.agencias_agencia_id_seq TO service_role;


--
-- Name: TABLE cargos; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.cargos TO anon;
GRANT ALL ON TABLE public.cargos TO authenticated;
GRANT ALL ON TABLE public.cargos TO service_role;


--
-- Name: SEQUENCE cargos_cargo_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.cargos_cargo_id_seq TO anon;
GRANT ALL ON SEQUENCE public.cargos_cargo_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.cargos_cargo_id_seq TO service_role;


--
-- Name: TABLE faccoes; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.faccoes TO anon;
GRANT ALL ON TABLE public.faccoes TO authenticated;
GRANT ALL ON TABLE public.faccoes TO service_role;


--
-- Name: TABLE count_faccoes_view; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.count_faccoes_view TO anon;
GRANT ALL ON TABLE public.count_faccoes_view TO authenticated;
GRANT ALL ON TABLE public.count_faccoes_view TO service_role;


--
-- Name: TABLE membros; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.membros TO anon;
GRANT ALL ON TABLE public.membros TO authenticated;
GRANT ALL ON TABLE public.membros TO service_role;


--
-- Name: TABLE count_membros_view; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.count_membros_view TO anon;
GRANT ALL ON TABLE public.count_membros_view TO authenticated;
GRANT ALL ON TABLE public.count_membros_view TO service_role;


--
-- Name: TABLE usuarios; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.usuarios TO anon;
GRANT ALL ON TABLE public.usuarios TO authenticated;
GRANT ALL ON TABLE public.usuarios TO service_role;


--
-- Name: TABLE count_usuarios_ativos_view; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.count_usuarios_ativos_view TO anon;
GRANT ALL ON TABLE public.count_usuarios_ativos_view TO authenticated;
GRANT ALL ON TABLE public.count_usuarios_ativos_view TO service_role;


--
-- Name: TABLE count_usuarios_view; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.count_usuarios_view TO anon;
GRANT ALL ON TABLE public.count_usuarios_view TO authenticated;
GRANT ALL ON TABLE public.count_usuarios_view TO service_role;


--
-- Name: TABLE estados; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.estados TO anon;
GRANT ALL ON TABLE public.estados TO authenticated;
GRANT ALL ON TABLE public.estados TO service_role;


--
-- Name: SEQUENCE estados_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.estados_id_seq TO anon;
GRANT ALL ON SEQUENCE public.estados_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.estados_id_seq TO service_role;


--
-- Name: SEQUENCE faccoes_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.faccoes_id_seq TO anon;
GRANT ALL ON SEQUENCE public.faccoes_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.faccoes_id_seq TO service_role;


--
-- Name: TABLE faccoes_view; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.faccoes_view TO anon;
GRANT ALL ON TABLE public.faccoes_view TO authenticated;
GRANT ALL ON TABLE public.faccoes_view TO service_role;


--
-- Name: TABLE funcoes; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.funcoes TO anon;
GRANT ALL ON TABLE public.funcoes TO authenticated;
GRANT ALL ON TABLE public.funcoes TO service_role;


--
-- Name: SEQUENCE funcoes_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.funcoes_id_seq TO anon;
GRANT ALL ON SEQUENCE public.funcoes_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.funcoes_id_seq TO service_role;


--
-- Name: TABLE grupos; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.grupos TO anon;
GRANT ALL ON TABLE public.grupos TO authenticated;
GRANT ALL ON TABLE public.grupos TO service_role;


--
-- Name: SEQUENCE grupos_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.grupos_id_seq TO anon;
GRANT ALL ON SEQUENCE public.grupos_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.grupos_id_seq TO service_role;


--
-- Name: TABLE grupos_membros; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.grupos_membros TO anon;
GRANT ALL ON TABLE public.grupos_membros TO authenticated;
GRANT ALL ON TABLE public.grupos_membros TO service_role;


--
-- Name: SEQUENCE grupos_membros_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.grupos_membros_id_seq TO anon;
GRANT ALL ON SEQUENCE public.grupos_membros_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.grupos_membros_id_seq TO service_role;


--
-- Name: SEQUENCE membros_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.membros_id_seq TO anon;
GRANT ALL ON SEQUENCE public.membros_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.membros_id_seq TO service_role;


--
-- Name: TABLE membros_view; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.membros_view TO anon;
GRANT ALL ON TABLE public.membros_view TO authenticated;
GRANT ALL ON TABLE public.membros_view TO service_role;


--
-- Name: TABLE municipios; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.municipios TO anon;
GRANT ALL ON TABLE public.municipios TO authenticated;
GRANT ALL ON TABLE public.municipios TO service_role;


--
-- Name: SEQUENCE municipios_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.municipios_id_seq TO anon;
GRANT ALL ON SEQUENCE public.municipios_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.municipios_id_seq TO service_role;


--
-- Name: TABLE procedimentos; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.procedimentos TO anon;
GRANT ALL ON TABLE public.procedimentos TO authenticated;
GRANT ALL ON TABLE public.procedimentos TO service_role;


--
-- Name: SEQUENCE procedumentos_procedimento_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.procedumentos_procedimento_id_seq TO anon;
GRANT ALL ON SEQUENCE public.procedumentos_procedimento_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.procedumentos_procedimento_id_seq TO service_role;


--
-- Name: TABLE processos; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.processos TO anon;
GRANT ALL ON TABLE public.processos TO authenticated;
GRANT ALL ON TABLE public.processos TO service_role;


--
-- Name: SEQUENCE processos_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.processos_id_seq TO anon;
GRANT ALL ON SEQUENCE public.processos_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.processos_id_seq TO service_role;


--
-- Name: TABLE relacionamentos_membros; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.relacionamentos_membros TO anon;
GRANT ALL ON TABLE public.relacionamentos_membros TO authenticated;
GRANT ALL ON TABLE public.relacionamentos_membros TO service_role;


--
-- Name: SEQUENCE relacionamentos_membros_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.relacionamentos_membros_id_seq TO anon;
GRANT ALL ON SEQUENCE public.relacionamentos_membros_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.relacionamentos_membros_id_seq TO service_role;


--
-- Name: TABLE tipos_usuarios; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.tipos_usuarios TO anon;
GRANT ALL ON TABLE public.tipos_usuarios TO authenticated;
GRANT ALL ON TABLE public.tipos_usuarios TO service_role;


--
-- Name: SEQUENCE tipos_usuarios_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.tipos_usuarios_id_seq TO anon;
GRANT ALL ON SEQUENCE public.tipos_usuarios_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.tipos_usuarios_id_seq TO service_role;


--
-- Name: SEQUENCE usuarios_usuario_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.usuarios_usuario_id_seq TO anon;
GRANT ALL ON SEQUENCE public.usuarios_usuario_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.usuarios_usuario_id_seq TO service_role;


--
-- Name: TABLE vara; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.vara TO anon;
GRANT ALL ON TABLE public.vara TO authenticated;
GRANT ALL ON TABLE public.vara TO service_role;


--
-- Name: SEQUENCE vara_vara_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.vara_vara_id_seq TO anon;
GRANT ALL ON SEQUENCE public.vara_vara_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.vara_vara_id_seq TO service_role;


--
-- Name: TABLE wappler_migrations; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.wappler_migrations TO anon;
GRANT ALL ON TABLE public.wappler_migrations TO authenticated;
GRANT ALL ON TABLE public.wappler_migrations TO service_role;


--
-- Name: SEQUENCE wappler_migrations_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.wappler_migrations_id_seq TO anon;
GRANT ALL ON SEQUENCE public.wappler_migrations_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.wappler_migrations_id_seq TO service_role;


--
-- Name: TABLE wappler_migrations_lock; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.wappler_migrations_lock TO anon;
GRANT ALL ON TABLE public.wappler_migrations_lock TO authenticated;
GRANT ALL ON TABLE public.wappler_migrations_lock TO service_role;


--
-- Name: SEQUENCE wappler_migrations_lock_index_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.wappler_migrations_lock_index_seq TO anon;
GRANT ALL ON SEQUENCE public.wappler_migrations_lock_index_seq TO authenticated;
GRANT ALL ON SEQUENCE public.wappler_migrations_lock_index_seq TO service_role;


--
-- Name: TABLE messages; Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON TABLE realtime.messages TO postgres;
GRANT ALL ON TABLE realtime.messages TO dashboard_user;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO anon;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO authenticated;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO service_role;


--
-- Name: TABLE messages_2024_11_17; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.messages_2024_11_17 TO postgres;
GRANT ALL ON TABLE realtime.messages_2024_11_17 TO dashboard_user;


--
-- Name: TABLE messages_2024_11_18; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.messages_2024_11_18 TO postgres;
GRANT ALL ON TABLE realtime.messages_2024_11_18 TO dashboard_user;


--
-- Name: TABLE messages_2024_11_19; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.messages_2024_11_19 TO postgres;
GRANT ALL ON TABLE realtime.messages_2024_11_19 TO dashboard_user;


--
-- Name: TABLE messages_2024_11_20; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.messages_2024_11_20 TO postgres;
GRANT ALL ON TABLE realtime.messages_2024_11_20 TO dashboard_user;


--
-- Name: TABLE messages_2024_11_21; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.messages_2024_11_21 TO postgres;
GRANT ALL ON TABLE realtime.messages_2024_11_21 TO dashboard_user;


--
-- Name: TABLE messages_2024_11_22; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.messages_2024_11_22 TO postgres;
GRANT ALL ON TABLE realtime.messages_2024_11_22 TO dashboard_user;


--
-- Name: TABLE messages_2024_11_24; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.messages_2024_11_24 TO postgres;
GRANT ALL ON TABLE realtime.messages_2024_11_24 TO dashboard_user;


--
-- Name: TABLE messages_2024_11_25; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.messages_2024_11_25 TO postgres;
GRANT ALL ON TABLE realtime.messages_2024_11_25 TO dashboard_user;


--
-- Name: TABLE messages_2024_11_26; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.messages_2024_11_26 TO postgres;
GRANT ALL ON TABLE realtime.messages_2024_11_26 TO dashboard_user;


--
-- Name: TABLE messages_2024_11_27; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.messages_2024_11_27 TO postgres;
GRANT ALL ON TABLE realtime.messages_2024_11_27 TO dashboard_user;


--
-- Name: TABLE messages_2024_11_28; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.messages_2024_11_28 TO postgres;
GRANT ALL ON TABLE realtime.messages_2024_11_28 TO dashboard_user;


--
-- Name: TABLE messages_2024_11_29; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.messages_2024_11_29 TO postgres;
GRANT ALL ON TABLE realtime.messages_2024_11_29 TO dashboard_user;


--
-- Name: TABLE messages_2024_12_01; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.messages_2024_12_01 TO postgres;
GRANT ALL ON TABLE realtime.messages_2024_12_01 TO dashboard_user;


--
-- Name: TABLE messages_2024_12_02; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.messages_2024_12_02 TO postgres;
GRANT ALL ON TABLE realtime.messages_2024_12_02 TO dashboard_user;


--
-- Name: TABLE messages_2024_12_03; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.messages_2024_12_03 TO postgres;
GRANT ALL ON TABLE realtime.messages_2024_12_03 TO dashboard_user;


--
-- Name: TABLE messages_2024_12_04; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.messages_2024_12_04 TO postgres;
GRANT ALL ON TABLE realtime.messages_2024_12_04 TO dashboard_user;


--
-- Name: TABLE messages_2024_12_05; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.messages_2024_12_05 TO postgres;
GRANT ALL ON TABLE realtime.messages_2024_12_05 TO dashboard_user;


--
-- Name: TABLE messages_2024_12_06; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.messages_2024_12_06 TO postgres;
GRANT ALL ON TABLE realtime.messages_2024_12_06 TO dashboard_user;


--
-- Name: TABLE messages_2024_12_07; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.messages_2024_12_07 TO postgres;
GRANT ALL ON TABLE realtime.messages_2024_12_07 TO dashboard_user;


--
-- Name: TABLE messages_2024_12_11; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.messages_2024_12_11 TO postgres;
GRANT ALL ON TABLE realtime.messages_2024_12_11 TO dashboard_user;


--
-- Name: TABLE messages_2024_12_12; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.messages_2024_12_12 TO postgres;
GRANT ALL ON TABLE realtime.messages_2024_12_12 TO dashboard_user;


--
-- Name: TABLE messages_2024_12_13; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.messages_2024_12_13 TO postgres;
GRANT ALL ON TABLE realtime.messages_2024_12_13 TO dashboard_user;


--
-- Name: TABLE schema_migrations; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.schema_migrations TO postgres;
GRANT ALL ON TABLE realtime.schema_migrations TO dashboard_user;
GRANT SELECT ON TABLE realtime.schema_migrations TO anon;
GRANT SELECT ON TABLE realtime.schema_migrations TO authenticated;
GRANT SELECT ON TABLE realtime.schema_migrations TO service_role;
GRANT ALL ON TABLE realtime.schema_migrations TO supabase_realtime_admin;


--
-- Name: TABLE subscription; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.subscription TO postgres;
GRANT ALL ON TABLE realtime.subscription TO dashboard_user;
GRANT SELECT ON TABLE realtime.subscription TO anon;
GRANT SELECT ON TABLE realtime.subscription TO authenticated;
GRANT SELECT ON TABLE realtime.subscription TO service_role;
GRANT ALL ON TABLE realtime.subscription TO supabase_realtime_admin;


--
-- Name: SEQUENCE subscription_id_seq; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO postgres;
GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO dashboard_user;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO anon;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO authenticated;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO service_role;
GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO supabase_realtime_admin;


--
-- Name: TABLE buckets; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.buckets TO anon;
GRANT ALL ON TABLE storage.buckets TO authenticated;
GRANT ALL ON TABLE storage.buckets TO service_role;
GRANT ALL ON TABLE storage.buckets TO postgres;


--
-- Name: TABLE migrations; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.migrations TO anon;
GRANT ALL ON TABLE storage.migrations TO authenticated;
GRANT ALL ON TABLE storage.migrations TO service_role;
GRANT ALL ON TABLE storage.migrations TO postgres;


--
-- Name: TABLE objects; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.objects TO anon;
GRANT ALL ON TABLE storage.objects TO authenticated;
GRANT ALL ON TABLE storage.objects TO service_role;
GRANT ALL ON TABLE storage.objects TO postgres;


--
-- Name: TABLE s3_multipart_uploads; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.s3_multipart_uploads TO service_role;
GRANT SELECT ON TABLE storage.s3_multipart_uploads TO authenticated;
GRANT SELECT ON TABLE storage.s3_multipart_uploads TO anon;


--
-- Name: TABLE s3_multipart_uploads_parts; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.s3_multipart_uploads_parts TO service_role;
GRANT SELECT ON TABLE storage.s3_multipart_uploads_parts TO authenticated;
GRANT SELECT ON TABLE storage.s3_multipart_uploads_parts TO anon;


--
-- Name: TABLE addr; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.addr TO postgres WITH GRANT OPTION;


--
-- Name: SEQUENCE addr_gid_seq; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE tiger.addr_gid_seq TO postgres WITH GRANT OPTION;


--
-- Name: TABLE addrfeat; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.addrfeat TO postgres WITH GRANT OPTION;


--
-- Name: SEQUENCE addrfeat_gid_seq; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE tiger.addrfeat_gid_seq TO postgres WITH GRANT OPTION;


--
-- Name: TABLE bg; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.bg TO postgres WITH GRANT OPTION;


--
-- Name: SEQUENCE bg_gid_seq; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE tiger.bg_gid_seq TO postgres WITH GRANT OPTION;


--
-- Name: TABLE county; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.county TO postgres WITH GRANT OPTION;


--
-- Name: SEQUENCE county_gid_seq; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE tiger.county_gid_seq TO postgres WITH GRANT OPTION;


--
-- Name: TABLE county_lookup; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.county_lookup TO postgres WITH GRANT OPTION;


--
-- Name: TABLE countysub_lookup; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.countysub_lookup TO postgres WITH GRANT OPTION;


--
-- Name: TABLE cousub; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.cousub TO postgres WITH GRANT OPTION;


--
-- Name: SEQUENCE cousub_gid_seq; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE tiger.cousub_gid_seq TO postgres WITH GRANT OPTION;


--
-- Name: TABLE direction_lookup; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.direction_lookup TO postgres WITH GRANT OPTION;


--
-- Name: TABLE edges; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.edges TO postgres WITH GRANT OPTION;


--
-- Name: SEQUENCE edges_gid_seq; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE tiger.edges_gid_seq TO postgres WITH GRANT OPTION;


--
-- Name: TABLE faces; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.faces TO postgres WITH GRANT OPTION;


--
-- Name: SEQUENCE faces_gid_seq; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE tiger.faces_gid_seq TO postgres WITH GRANT OPTION;


--
-- Name: TABLE featnames; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.featnames TO postgres WITH GRANT OPTION;


--
-- Name: SEQUENCE featnames_gid_seq; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE tiger.featnames_gid_seq TO postgres WITH GRANT OPTION;


--
-- Name: TABLE geocode_settings; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.geocode_settings TO postgres WITH GRANT OPTION;


--
-- Name: TABLE geocode_settings_default; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.geocode_settings_default TO postgres WITH GRANT OPTION;


--
-- Name: TABLE loader_lookuptables; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.loader_lookuptables TO postgres WITH GRANT OPTION;


--
-- Name: TABLE loader_platform; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.loader_platform TO postgres WITH GRANT OPTION;


--
-- Name: TABLE loader_variables; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.loader_variables TO postgres WITH GRANT OPTION;


--
-- Name: TABLE pagc_gaz; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.pagc_gaz TO postgres WITH GRANT OPTION;


--
-- Name: SEQUENCE pagc_gaz_id_seq; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE tiger.pagc_gaz_id_seq TO postgres WITH GRANT OPTION;


--
-- Name: TABLE pagc_lex; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.pagc_lex TO postgres WITH GRANT OPTION;


--
-- Name: SEQUENCE pagc_lex_id_seq; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE tiger.pagc_lex_id_seq TO postgres WITH GRANT OPTION;


--
-- Name: TABLE pagc_rules; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.pagc_rules TO postgres WITH GRANT OPTION;


--
-- Name: SEQUENCE pagc_rules_id_seq; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE tiger.pagc_rules_id_seq TO postgres WITH GRANT OPTION;


--
-- Name: TABLE place; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.place TO postgres WITH GRANT OPTION;


--
-- Name: SEQUENCE place_gid_seq; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE tiger.place_gid_seq TO postgres WITH GRANT OPTION;


--
-- Name: TABLE place_lookup; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.place_lookup TO postgres WITH GRANT OPTION;


--
-- Name: TABLE secondary_unit_lookup; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.secondary_unit_lookup TO postgres WITH GRANT OPTION;


--
-- Name: TABLE state; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.state TO postgres WITH GRANT OPTION;


--
-- Name: SEQUENCE state_gid_seq; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE tiger.state_gid_seq TO postgres WITH GRANT OPTION;


--
-- Name: TABLE state_lookup; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.state_lookup TO postgres WITH GRANT OPTION;


--
-- Name: TABLE street_type_lookup; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.street_type_lookup TO postgres WITH GRANT OPTION;


--
-- Name: TABLE tabblock; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.tabblock TO postgres WITH GRANT OPTION;


--
-- Name: TABLE tabblock20; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.tabblock20 TO postgres WITH GRANT OPTION;


--
-- Name: SEQUENCE tabblock_gid_seq; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE tiger.tabblock_gid_seq TO postgres WITH GRANT OPTION;


--
-- Name: TABLE tract; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.tract TO postgres WITH GRANT OPTION;


--
-- Name: SEQUENCE tract_gid_seq; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE tiger.tract_gid_seq TO postgres WITH GRANT OPTION;


--
-- Name: TABLE zcta5; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.zcta5 TO postgres WITH GRANT OPTION;


--
-- Name: SEQUENCE zcta5_gid_seq; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE tiger.zcta5_gid_seq TO postgres WITH GRANT OPTION;


--
-- Name: TABLE zip_lookup; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.zip_lookup TO postgres WITH GRANT OPTION;


--
-- Name: TABLE zip_lookup_all; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.zip_lookup_all TO postgres WITH GRANT OPTION;


--
-- Name: TABLE zip_lookup_base; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.zip_lookup_base TO postgres WITH GRANT OPTION;


--
-- Name: TABLE zip_state; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.zip_state TO postgres WITH GRANT OPTION;


--
-- Name: TABLE zip_state_loc; Type: ACL; Schema: tiger; Owner: supabase_admin
--

GRANT ALL ON TABLE tiger.zip_state_loc TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON SEQUENCES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON FUNCTIONS  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON TABLES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON SEQUENCES  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON FUNCTIONS  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON TABLES  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: pgsodium; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium GRANT ALL ON SEQUENCES  TO pgsodium_keyholder;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: pgsodium; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium GRANT ALL ON TABLES  TO pgsodium_keyholder;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: pgsodium_masks; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium_masks GRANT ALL ON SEQUENCES  TO pgsodium_keyiduser;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: pgsodium_masks; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium_masks GRANT ALL ON FUNCTIONS  TO pgsodium_keyiduser;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: pgsodium_masks; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium_masks GRANT ALL ON TABLES  TO pgsodium_keyiduser;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON SEQUENCES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON FUNCTIONS  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON TABLES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: tiger; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA tiger GRANT ALL ON SEQUENCES  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: tiger; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA tiger GRANT ALL ON FUNCTIONS  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: tiger; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA tiger GRANT ALL ON TABLES  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: tiger_data; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA tiger_data GRANT ALL ON SEQUENCES  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: tiger_data; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA tiger_data GRANT ALL ON FUNCTIONS  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: tiger_data; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA tiger_data GRANT ALL ON TABLES  TO postgres WITH GRANT OPTION;


--
-- Name: issue_graphql_placeholder; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_graphql_placeholder ON sql_drop
         WHEN TAG IN ('DROP EXTENSION')
   EXECUTE FUNCTION extensions.set_graphql_placeholder();


ALTER EVENT TRIGGER issue_graphql_placeholder OWNER TO supabase_admin;

--
-- Name: issue_pg_cron_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_cron_access ON ddl_command_end
         WHEN TAG IN ('CREATE EXTENSION')
   EXECUTE FUNCTION extensions.grant_pg_cron_access();


ALTER EVENT TRIGGER issue_pg_cron_access OWNER TO supabase_admin;

--
-- Name: issue_pg_graphql_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_graphql_access ON ddl_command_end
         WHEN TAG IN ('CREATE FUNCTION')
   EXECUTE FUNCTION extensions.grant_pg_graphql_access();


ALTER EVENT TRIGGER issue_pg_graphql_access OWNER TO supabase_admin;

--
-- Name: issue_pg_net_access; Type: EVENT TRIGGER; Schema: -; Owner: postgres
--

CREATE EVENT TRIGGER issue_pg_net_access ON ddl_command_end
         WHEN TAG IN ('CREATE EXTENSION')
   EXECUTE FUNCTION extensions.grant_pg_net_access();


ALTER EVENT TRIGGER issue_pg_net_access OWNER TO postgres;

--
-- Name: pgrst_ddl_watch; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER pgrst_ddl_watch ON ddl_command_end
   EXECUTE FUNCTION extensions.pgrst_ddl_watch();


ALTER EVENT TRIGGER pgrst_ddl_watch OWNER TO supabase_admin;

--
-- Name: pgrst_drop_watch; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER pgrst_drop_watch ON sql_drop
   EXECUTE FUNCTION extensions.pgrst_drop_watch();


ALTER EVENT TRIGGER pgrst_drop_watch OWNER TO supabase_admin;

--
-- PostgreSQL database dump complete
--

--
-- PostgreSQL database cluster dump complete
--

